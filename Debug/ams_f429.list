
ams_f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a54c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d50  0800a700  0800a700  0001a700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c450  0800c450  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800c450  0800c450  0001c450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c458  0800c458  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c458  0800c458  0001c458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c45c  0800c45c  0001c45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800c460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000224  0800c684  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000086c  0800c684  0002086c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3f5  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003587  00000000  00000000  0003b649  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e8  00000000  00000000  0003ebd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001648  00000000  00000000  000403b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a05  00000000  00000000  00041a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013082  00000000  00000000  00069405  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e548a  00000000  00000000  0007c487  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ed0  00000000  00000000  0016198c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000224 	.word	0x20000224
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a6e4 	.word	0x0800a6e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000228 	.word	0x20000228
 80001ec:	0800a6e4 	.word	0x0800a6e4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f94d 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f006 ff56 	bl	8007e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f965 	bl	800129a <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 f92d 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000050 	.word	0x20000050
 8001004:	20000004 	.word	0x20000004
 8001008:	20000000 	.word	0x20000000

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000004 	.word	0x20000004
 8001030:	200003f8 	.word	0x200003f8

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	200003f8 	.word	0x200003f8

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_Delay+0x40>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000004 	.word	0x20000004

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff29 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff3e 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff31 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa2 	bl	80011ec <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff feb8 	bl	8001034 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e099      	b.n	8001404 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2202      	movs	r2, #2
 80012dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f0:	e00f      	b.n	8001312 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f2:	f7ff fe9f 	bl	8001034 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d908      	bls.n	8001312 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2220      	movs	r2, #32
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2203      	movs	r2, #3
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e078      	b.n	8001404 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e8      	bne.n	80012f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_DMA_Init+0x158>)
 800132c:	4013      	ands	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800133e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4313      	orrs	r3, r2
 8001362:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2b04      	cmp	r3, #4
 800136a:	d107      	bne.n	800137c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4313      	orrs	r3, r2
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4313      	orrs	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f023 0307 	bic.w	r3, r3, #7
 8001392:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4313      	orrs	r3, r2
 800139c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d117      	bne.n	80013d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00e      	beq.n	80013d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fa47 	bl	800184c <DMA_CheckFifoParam>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2240      	movs	r2, #64	; 0x40
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013d2:	2301      	movs	r3, #1
 80013d4:	e016      	b.n	8001404 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f9fe 	bl	80017e0 <DMA_CalcBaseAndBitshift>
 80013e4:	4603      	mov	r3, r0
 80013e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	223f      	movs	r2, #63	; 0x3f
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	f010803f 	.word	0xf010803f

08001410 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e050      	b.n	80014c4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d101      	bne.n	8001432 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800142e:	2302      	movs	r3, #2
 8001430:	e048      	b.n	80014c4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2221      	movs	r2, #33	; 0x21
 8001470:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f9b4 	bl	80017e0 <DMA_CalcBaseAndBitshift>
 8001478:	4603      	mov	r3, r0
 800147a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	223f      	movs	r2, #63	; 0x3f
 80014a6:	409a      	lsls	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014d8:	4b92      	ldr	r3, [pc, #584]	; (8001724 <HAL_DMA_IRQHandler+0x258>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a92      	ldr	r2, [pc, #584]	; (8001728 <HAL_DMA_IRQHandler+0x25c>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0a9b      	lsrs	r3, r3, #10
 80014e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f6:	2208      	movs	r2, #8
 80014f8:	409a      	lsls	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d01a      	beq.n	8001538 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0204 	bic.w	r2, r2, #4
 800151e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2208      	movs	r2, #8
 8001526:	409a      	lsls	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	f043 0201 	orr.w	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	2201      	movs	r2, #1
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d012      	beq.n	800156e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2201      	movs	r2, #1
 800155c:	409a      	lsls	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	f043 0202 	orr.w	r2, r3, #2
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2204      	movs	r2, #4
 8001574:	409a      	lsls	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d012      	beq.n	80015a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	2204      	movs	r2, #4
 8001592:	409a      	lsls	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159c:	f043 0204 	orr.w	r2, r3, #4
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2210      	movs	r2, #16
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d043      	beq.n	800163c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d03c      	beq.n	800163c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	2210      	movs	r2, #16
 80015c8:	409a      	lsls	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d018      	beq.n	800160e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d024      	beq.n	800163c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	4798      	blx	r3
 80015fa:	e01f      	b.n	800163c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01b      	beq.n	800163c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
 800160c:	e016      	b.n	800163c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d107      	bne.n	800162c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0208 	bic.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2220      	movs	r2, #32
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 808e 	beq.w	800176a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8086 	beq.w	800176a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	2220      	movs	r2, #32
 8001664:	409a      	lsls	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b05      	cmp	r3, #5
 8001674:	d136      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0216 	bic.w	r2, r2, #22
 8001684:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001694:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <HAL_DMA_IRQHandler+0x1da>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0208 	bic.w	r2, r2, #8
 80016b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	223f      	movs	r2, #63	; 0x3f
 80016bc:	409a      	lsls	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d07d      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4798      	blx	r3
        }
        return;
 80016e2:	e078      	b.n	80017d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d01c      	beq.n	800172c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d108      	bne.n	8001712 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	2b00      	cmp	r3, #0
 8001706:	d030      	beq.n	800176a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
 8001710:	e02b      	b.n	800176a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001716:	2b00      	cmp	r3, #0
 8001718:	d027      	beq.n	800176a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
 8001722:	e022      	b.n	800176a <HAL_DMA_IRQHandler+0x29e>
 8001724:	20000050 	.word	0x20000050
 8001728:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10f      	bne.n	800175a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0210 	bic.w	r2, r2, #16
 8001748:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176e:	2b00      	cmp	r3, #0
 8001770:	d032      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d022      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2205      	movs	r2, #5
 8001782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3301      	adds	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d307      	bcc.n	80017b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f2      	bne.n	8001796 <HAL_DMA_IRQHandler+0x2ca>
 80017b0:	e000      	b.n	80017b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
 80017d4:	e000      	b.n	80017d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017d6:	bf00      	nop
    }
  }
}
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop

080017e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	3b10      	subs	r3, #16
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <DMA_CalcBaseAndBitshift+0x64>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017fa:	4a13      	ldr	r2, [pc, #76]	; (8001848 <DMA_CalcBaseAndBitshift+0x68>)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d909      	bls.n	8001822 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001816:	f023 0303 	bic.w	r3, r3, #3
 800181a:	1d1a      	adds	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	659a      	str	r2, [r3, #88]	; 0x58
 8001820:	e007      	b.n	8001832 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	aaaaaaab 	.word	0xaaaaaaab
 8001848:	0800a71c 	.word	0x0800a71c

0800184c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d11f      	bne.n	80018a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d855      	bhi.n	8001918 <DMA_CheckFifoParam+0xcc>
 800186c:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <DMA_CheckFifoParam+0x28>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	08001885 	.word	0x08001885
 8001878:	08001897 	.word	0x08001897
 800187c:	08001885 	.word	0x08001885
 8001880:	08001919 	.word	0x08001919
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d045      	beq.n	800191c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001894:	e042      	b.n	800191c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800189e:	d13f      	bne.n	8001920 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018a4:	e03c      	b.n	8001920 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ae:	d121      	bne.n	80018f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d836      	bhi.n	8001924 <DMA_CheckFifoParam+0xd8>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <DMA_CheckFifoParam+0x70>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	080018d3 	.word	0x080018d3
 80018c4:	080018cd 	.word	0x080018cd
 80018c8:	080018e5 	.word	0x080018e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
      break;
 80018d0:	e02f      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d024      	beq.n	8001928 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e2:	e021      	b.n	8001928 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018ec:	d11e      	bne.n	800192c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018f2:	e01b      	b.n	800192c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d902      	bls.n	8001900 <DMA_CheckFifoParam+0xb4>
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d003      	beq.n	8001906 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018fe:	e018      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
      break;
 8001904:	e015      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00e      	beq.n	8001930 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
      break;
 8001916:	e00b      	b.n	8001930 <DMA_CheckFifoParam+0xe4>
      break;
 8001918:	bf00      	nop
 800191a:	e00a      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
      break;
 800191c:	bf00      	nop
 800191e:	e008      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
      break;
 8001920:	bf00      	nop
 8001922:	e006      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
      break;
 8001924:	bf00      	nop
 8001926:	e004      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
      break;
 8001928:	bf00      	nop
 800192a:	e002      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
      break;   
 800192c:	bf00      	nop
 800192e:	e000      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
      break;
 8001930:	bf00      	nop
    }
  } 
  
  return status; 
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e03b      	b.n	80019ca <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f006 fa98 	bl	8007e9c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	f023 0107 	bic.w	r1, r3, #7
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68d1      	ldr	r1, [r2, #12]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	430b      	orrs	r3, r1
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af02      	add	r7, sp, #8
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_DMA2D_Start+0x1c>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e018      	b.n	8001a20 <HAL_DMA2D_Start+0x4e>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fa99 	bl	8001f40 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d056      	beq.n	8001af2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001a44:	f7ff faf6 	bl	8001034 <HAL_GetTick>
 8001a48:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001a4a:	e04b      	b.n	8001ae4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d023      	beq.n	8001aa6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	f043 0202 	orr.w	r2, r3, #2
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2221      	movs	r2, #33	; 0x21
 8001a90:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2204      	movs	r2, #4
 8001a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0a5      	b.n	8001bf2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d01a      	beq.n	8001ae4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001aae:	f7ff fac1 	bl	8001034 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d302      	bcc.n	8001ac4 <HAL_DMA2D_PollForTransfer+0x9c>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10f      	bne.n	8001ae4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac8:	f043 0220 	orr.w	r2, r3, #32
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e086      	b.n	8001bf2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ac      	beq.n	8001a4c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d061      	beq.n	8001bd8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b14:	f7ff fa8e 	bl	8001034 <HAL_GetTick>
 8001b18:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001b1a:	e056      	b.n	8001bca <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d02e      	beq.n	8001b8c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3c:	f043 0204 	orr.w	r2, r3, #4
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b52:	f043 0202 	orr.w	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2229      	movs	r2, #41	; 0x29
 8001b76:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e032      	b.n	8001bf2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b92:	d01a      	beq.n	8001bca <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001b94:	f7ff fa4e 	bl	8001034 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d302      	bcc.n	8001baa <HAL_DMA2D_PollForTransfer+0x182>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10f      	bne.n	8001bca <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bae:	f043 0220 	orr.w	r2, r3, #32
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2203      	movs	r2, #3
 8001bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e013      	b.n	8001bf2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0a1      	beq.n	8001b1c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2212      	movs	r2, #18
 8001bde:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d026      	beq.n	8001c6a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d021      	beq.n	8001c6a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c34:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d026      	beq.n	8001cc2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d021      	beq.n	8001cc2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2220      	movs	r2, #32
 8001c94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	f043 0202 	orr.w	r2, r3, #2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d026      	beq.n	8001d1a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d021      	beq.n	8001d1a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2208      	movs	r2, #8
 8001cec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf2:	f043 0204 	orr.w	r2, r3, #4
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00e      	beq.n	8001d4c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d3c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f853 	bl	8001df2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d024      	beq.n	8001da0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01f      	beq.n	8001da0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2202      	movs	r2, #2
 8001d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01f      	beq.n	8001dea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01a      	beq.n	8001dea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f80e 	bl	8001e06 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_DMA2D_ConfigLayer+0x20>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e079      	b.n	8001f30 <HAL_DMA2D_ConfigLayer+0x114>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	3318      	adds	r3, #24
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_DMA2D_ConfigLayer+0x120>)
 8001e68:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b0a      	cmp	r3, #10
 8001e70:	d003      	beq.n	8001e7a <HAL_DMA2D_ConfigLayer+0x5e>
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b09      	cmp	r3, #9
 8001e78:	d107      	bne.n	8001e8a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e005      	b.n	8001e96 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	061b      	lsls	r3, r3, #24
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d120      	bne.n	8001ede <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	ea02 0103 	and.w	r1, r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b0a      	cmp	r3, #10
 8001ec4:	d003      	beq.n	8001ece <HAL_DMA2D_ConfigLayer+0xb2>
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b09      	cmp	r3, #9
 8001ecc:	d127      	bne.n	8001f1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
 8001edc:	e01f      	b.n	8001f1e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	ea02 0103 	and.w	r1, r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b0a      	cmp	r3, #10
 8001f06:	d003      	beq.n	8001f10 <HAL_DMA2D_ConfigLayer+0xf4>
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b09      	cmp	r3, #9
 8001f0e:	d106      	bne.n	8001f1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f1c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	ff03000f 	.word	0xff03000f

08001f40 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b08b      	sub	sp, #44	; 0x2c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001f78:	d174      	bne.n	8002064 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f80:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f88:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001f90:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d108      	bne.n	8001fb2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	e053      	b.n	800205a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d106      	bne.n	8001fc8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc6:	e048      	b.n	800205a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d111      	bne.n	8001ff4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	0cdb      	lsrs	r3, r3, #19
 8001fd4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	0a9b      	lsrs	r3, r3, #10
 8001fda:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	08db      	lsrs	r3, r3, #3
 8001fe0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	02db      	lsls	r3, r3, #11
 8001fea:	4313      	orrs	r3, r2
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	e032      	b.n	800205a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d117      	bne.n	800202c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	0fdb      	lsrs	r3, r3, #31
 8002000:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	0cdb      	lsrs	r3, r3, #19
 8002006:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	0adb      	lsrs	r3, r3, #11
 800200c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	431a      	orrs	r2, r3
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	03db      	lsls	r3, r3, #15
 8002022:	4313      	orrs	r3, r2
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4313      	orrs	r3, r2
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e016      	b.n	800205a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	0f1b      	lsrs	r3, r3, #28
 8002030:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	0d1b      	lsrs	r3, r3, #20
 8002036:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	0b1b      	lsrs	r3, r3, #12
 800203c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	011a      	lsls	r2, r3, #4
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	431a      	orrs	r2, r3
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	031b      	lsls	r3, r3, #12
 8002052:	4313      	orrs	r3, r2
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002062:	e003      	b.n	800206c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	60da      	str	r2, [r3, #12]
}
 800206c:	bf00      	nop
 800206e:	372c      	adds	r7, #44	; 0x2c
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e177      	b.n	8002384 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8166 	bne.w	800237e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x4a>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d123      	bne.n	800210a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	69b9      	ldr	r1, [r7, #24]
 8002106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0203 	and.w	r2, r3, #3
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d00b      	beq.n	800215e <HAL_GPIO_Init+0xe6>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002152:	2b11      	cmp	r3, #17
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b12      	cmp	r3, #18
 800215c:	d130      	bne.n	80021c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 0201 	and.w	r2, r3, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80c0 	beq.w	800237e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_GPIO_Init+0x320>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a64      	ldr	r2, [pc, #400]	; (8002398 <HAL_GPIO_Init+0x320>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b62      	ldr	r3, [pc, #392]	; (8002398 <HAL_GPIO_Init+0x320>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221a:	4a60      	ldr	r2, [pc, #384]	; (800239c <HAL_GPIO_Init+0x324>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a57      	ldr	r2, [pc, #348]	; (80023a0 <HAL_GPIO_Init+0x328>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d037      	beq.n	80022b6 <HAL_GPIO_Init+0x23e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a56      	ldr	r2, [pc, #344]	; (80023a4 <HAL_GPIO_Init+0x32c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d031      	beq.n	80022b2 <HAL_GPIO_Init+0x23a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a55      	ldr	r2, [pc, #340]	; (80023a8 <HAL_GPIO_Init+0x330>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02b      	beq.n	80022ae <HAL_GPIO_Init+0x236>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a54      	ldr	r2, [pc, #336]	; (80023ac <HAL_GPIO_Init+0x334>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d025      	beq.n	80022aa <HAL_GPIO_Init+0x232>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a53      	ldr	r2, [pc, #332]	; (80023b0 <HAL_GPIO_Init+0x338>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01f      	beq.n	80022a6 <HAL_GPIO_Init+0x22e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_GPIO_Init+0x33c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d019      	beq.n	80022a2 <HAL_GPIO_Init+0x22a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_GPIO_Init+0x340>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0x226>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a50      	ldr	r2, [pc, #320]	; (80023bc <HAL_GPIO_Init+0x344>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00d      	beq.n	800229a <HAL_GPIO_Init+0x222>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4f      	ldr	r2, [pc, #316]	; (80023c0 <HAL_GPIO_Init+0x348>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x21e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4e      	ldr	r2, [pc, #312]	; (80023c4 <HAL_GPIO_Init+0x34c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_GPIO_Init+0x21a>
 800228e:	2309      	movs	r3, #9
 8002290:	e012      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 8002292:	230a      	movs	r3, #10
 8002294:	e010      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 8002296:	2308      	movs	r3, #8
 8002298:	e00e      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 800229a:	2307      	movs	r3, #7
 800229c:	e00c      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 800229e:	2306      	movs	r3, #6
 80022a0:	e00a      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022a2:	2305      	movs	r3, #5
 80022a4:	e008      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022b6:	2300      	movs	r3, #0
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c8:	4934      	ldr	r1, [pc, #208]	; (800239c <HAL_GPIO_Init+0x324>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d6:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <HAL_GPIO_Init+0x350>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022fa:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <HAL_GPIO_Init+0x350>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002300:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_GPIO_Init+0x350>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002324:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_GPIO_Init+0x350>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232a:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_GPIO_Init+0x350>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234e:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_GPIO_Init+0x350>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_GPIO_Init+0x350>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002378:	4a13      	ldr	r2, [pc, #76]	; (80023c8 <HAL_GPIO_Init+0x350>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	f67f ae84 	bls.w	8002094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800238c:	bf00      	nop
 800238e:	3724      	adds	r7, #36	; 0x24
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40023800 	.word	0x40023800
 800239c:	40013800 	.word	0x40013800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40021800 	.word	0x40021800
 80023bc:	40021c00 	.word	0x40021c00
 80023c0:	40022000 	.word	0x40022000
 80023c4:	40022400 	.word	0x40022400
 80023c8:	40013c00 	.word	0x40013c00

080023cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e0d9      	b.n	800259c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e8:	2201      	movs	r2, #1
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	429a      	cmp	r2, r3
 8002400:	f040 80c9 	bne.w	8002596 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002404:	4a6a      	ldr	r2, [pc, #424]	; (80025b0 <HAL_GPIO_DeInit+0x1e4>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4013      	ands	r3, r2
 8002424:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a62      	ldr	r2, [pc, #392]	; (80025b4 <HAL_GPIO_DeInit+0x1e8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d037      	beq.n	800249e <HAL_GPIO_DeInit+0xd2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a61      	ldr	r2, [pc, #388]	; (80025b8 <HAL_GPIO_DeInit+0x1ec>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_GPIO_DeInit+0xce>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a60      	ldr	r2, [pc, #384]	; (80025bc <HAL_GPIO_DeInit+0x1f0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <HAL_GPIO_DeInit+0xca>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a5f      	ldr	r2, [pc, #380]	; (80025c0 <HAL_GPIO_DeInit+0x1f4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_DeInit+0xc6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a5e      	ldr	r2, [pc, #376]	; (80025c4 <HAL_GPIO_DeInit+0x1f8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_DeInit+0xc2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a5d      	ldr	r2, [pc, #372]	; (80025c8 <HAL_GPIO_DeInit+0x1fc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_DeInit+0xbe>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a5c      	ldr	r2, [pc, #368]	; (80025cc <HAL_GPIO_DeInit+0x200>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_DeInit+0xba>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a5b      	ldr	r2, [pc, #364]	; (80025d0 <HAL_GPIO_DeInit+0x204>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_DeInit+0xb6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a5a      	ldr	r2, [pc, #360]	; (80025d4 <HAL_GPIO_DeInit+0x208>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_DeInit+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a59      	ldr	r2, [pc, #356]	; (80025d8 <HAL_GPIO_DeInit+0x20c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_DeInit+0xae>
 8002476:	2309      	movs	r3, #9
 8002478:	e012      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 800247a:	230a      	movs	r3, #10
 800247c:	e010      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 800247e:	2308      	movs	r3, #8
 8002480:	e00e      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 8002482:	2307      	movs	r3, #7
 8002484:	e00c      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 8002486:	2306      	movs	r3, #6
 8002488:	e00a      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 800248a:	2305      	movs	r3, #5
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 800248e:	2304      	movs	r3, #4
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_DeInit+0xd4>
 800249e:	2300      	movs	r3, #0
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d132      	bne.n	8002516 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80024c0:	4a3b      	ldr	r2, [pc, #236]	; (80025b0 <HAL_GPIO_DeInit+0x1e4>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	43da      	mvns	r2, r3
 80024d0:	4837      	ldr	r0, [pc, #220]	; (80025b0 <HAL_GPIO_DeInit+0x1e4>)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	400a      	ands	r2, r1
 80024d8:	3302      	adds	r3, #2
 80024da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80024de:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_GPIO_DeInit+0x210>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	493d      	ldr	r1, [pc, #244]	; (80025dc <HAL_GPIO_DeInit+0x210>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80024ec:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_GPIO_DeInit+0x210>)
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	4939      	ldr	r1, [pc, #228]	; (80025dc <HAL_GPIO_DeInit+0x210>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_GPIO_DeInit+0x210>)
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43db      	mvns	r3, r3
 8002502:	4936      	ldr	r1, [pc, #216]	; (80025dc <HAL_GPIO_DeInit+0x210>)
 8002504:	4013      	ands	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002508:	4b34      	ldr	r3, [pc, #208]	; (80025dc <HAL_GPIO_DeInit+0x210>)
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	4932      	ldr	r1, [pc, #200]	; (80025dc <HAL_GPIO_DeInit+0x210>)
 8002512:	4013      	ands	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2103      	movs	r1, #3
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	08da      	lsrs	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3208      	adds	r2, #8
 8002534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	08d2      	lsrs	r2, r2, #3
 800254c:	4019      	ands	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2103      	movs	r1, #3
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	2101      	movs	r1, #1
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	401a      	ands	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2103      	movs	r1, #3
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	401a      	ands	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	f67f af22 	bls.w	80023e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40013800 	.word	0x40013800
 80025b4:	40020000 	.word	0x40020000
 80025b8:	40020400 	.word	0x40020400
 80025bc:	40020800 	.word	0x40020800
 80025c0:	40020c00 	.word	0x40020c00
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40021400 	.word	0x40021400
 80025cc:	40021800 	.word	0x40021800
 80025d0:	40021c00 	.word	0x40021c00
 80025d4:	40022000 	.word	0x40022000
 80025d8:	40022400 	.word	0x40022400
 80025dc:	40013c00 	.word	0x40013c00

080025e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
 80025ec:	4613      	mov	r3, r2
 80025ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f0:	787b      	ldrb	r3, [r7, #1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025fc:	e003      	b.n	8002606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	041a      	lsls	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	619a      	str	r2, [r3, #24]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	401a      	ands	r2, r3
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	429a      	cmp	r2, r3
 800262a:	d104      	bne.n	8002636 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	041a      	lsls	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002634:	e002      	b.n	800263c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e10f      	b.n	800287a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f005 fc3c 	bl	8007eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800268c:	f002 f83e 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8002690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4a7b      	ldr	r2, [pc, #492]	; (8002884 <HAL_I2C_Init+0x23c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d807      	bhi.n	80026ac <HAL_I2C_Init+0x64>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a7a      	ldr	r2, [pc, #488]	; (8002888 <HAL_I2C_Init+0x240>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	bf94      	ite	ls
 80026a4:	2301      	movls	r3, #1
 80026a6:	2300      	movhi	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e006      	b.n	80026ba <HAL_I2C_Init+0x72>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a77      	ldr	r2, [pc, #476]	; (800288c <HAL_I2C_Init+0x244>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	bf94      	ite	ls
 80026b4:	2301      	movls	r3, #1
 80026b6:	2300      	movhi	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0db      	b.n	800287a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4a72      	ldr	r2, [pc, #456]	; (8002890 <HAL_I2C_Init+0x248>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	0c9b      	lsrs	r3, r3, #18
 80026cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a64      	ldr	r2, [pc, #400]	; (8002884 <HAL_I2C_Init+0x23c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d802      	bhi.n	80026fc <HAL_I2C_Init+0xb4>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3301      	adds	r3, #1
 80026fa:	e009      	b.n	8002710 <HAL_I2C_Init+0xc8>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	4a63      	ldr	r2, [pc, #396]	; (8002894 <HAL_I2C_Init+0x24c>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	099b      	lsrs	r3, r3, #6
 800270e:	3301      	adds	r3, #1
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4956      	ldr	r1, [pc, #344]	; (8002884 <HAL_I2C_Init+0x23c>)
 800272c:	428b      	cmp	r3, r1
 800272e:	d80d      	bhi.n	800274c <HAL_I2C_Init+0x104>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e59      	subs	r1, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fbb1 f3f3 	udiv	r3, r1, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	2b04      	cmp	r3, #4
 8002746:	bf38      	it	cc
 8002748:	2304      	movcc	r3, #4
 800274a:	e04f      	b.n	80027ec <HAL_I2C_Init+0x1a4>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d111      	bne.n	8002778 <HAL_I2C_Init+0x130>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e58      	subs	r0, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	440b      	add	r3, r1
 8002762:	fbb0 f3f3 	udiv	r3, r0, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e012      	b.n	800279e <HAL_I2C_Init+0x156>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e58      	subs	r0, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	0099      	lsls	r1, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	fbb0 f3f3 	udiv	r3, r0, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Init+0x15e>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e022      	b.n	80027ec <HAL_I2C_Init+0x1a4>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10e      	bne.n	80027cc <HAL_I2C_Init+0x184>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1e58      	subs	r0, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	440b      	add	r3, r1
 80027bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ca:	e00f      	b.n	80027ec <HAL_I2C_Init+0x1a4>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1e58      	subs	r0, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	0099      	lsls	r1, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	6809      	ldr	r1, [r1, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800281a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6911      	ldr	r1, [r2, #16]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68d2      	ldr	r2, [r2, #12]
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	000186a0 	.word	0x000186a0
 8002888:	001e847f 	.word	0x001e847f
 800288c:	003d08ff 	.word	0x003d08ff
 8002890:	431bde83 	.word	0x431bde83
 8002894:	10624dd3 	.word	0x10624dd3

08002898 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	4608      	mov	r0, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	817b      	strh	r3, [r7, #10]
 80028aa:	460b      	mov	r3, r1
 80028ac:	813b      	strh	r3, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028b2:	f7fe fbbf 	bl	8001034 <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	f040 80d9 	bne.w	8002a78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2319      	movs	r3, #25
 80028cc:	2201      	movs	r2, #1
 80028ce:	496d      	ldr	r1, [pc, #436]	; (8002a84 <HAL_I2C_Mem_Write+0x1ec>)
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fc5b 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
 80028de:	e0cc      	b.n	8002a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_I2C_Mem_Write+0x56>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e0c5      	b.n	8002a7a <HAL_I2C_Mem_Write+0x1e2>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d007      	beq.n	8002914 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002922:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2221      	movs	r2, #33	; 0x21
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2240      	movs	r2, #64	; 0x40
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a4d      	ldr	r2, [pc, #308]	; (8002a88 <HAL_I2C_Mem_Write+0x1f0>)
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002956:	88f8      	ldrh	r0, [r7, #6]
 8002958:	893a      	ldrh	r2, [r7, #8]
 800295a:	8979      	ldrh	r1, [r7, #10]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	4603      	mov	r3, r0
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fab6 	bl	8002ed8 <I2C_RequestMemoryWrite>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d052      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e081      	b.n	8002a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fcdc 	bl	8003338 <I2C_WaitOnTXEFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00d      	beq.n	80029a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2b04      	cmp	r3, #4
 800298c:	d107      	bne.n	800299e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06b      	b.n	8002a7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d11b      	bne.n	8002a18 <HAL_I2C_Mem_Write+0x180>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d017      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1aa      	bne.n	8002976 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fcc8 	bl	80033ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d107      	bne.n	8002a48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e016      	b.n	8002a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	00100002 	.word	0x00100002
 8002a88:	ffff0000 	.word	0xffff0000

08002a8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08c      	sub	sp, #48	; 0x30
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	4608      	mov	r0, r1
 8002a96:	4611      	mov	r1, r2
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	817b      	strh	r3, [r7, #10]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	813b      	strh	r3, [r7, #8]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aa6:	f7fe fac5 	bl	8001034 <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	f040 8208 	bne.w	8002eca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	2319      	movs	r3, #25
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	497b      	ldr	r1, [pc, #492]	; (8002cb0 <HAL_I2C_Mem_Read+0x224>)
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fb61 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e1fb      	b.n	8002ecc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Mem_Read+0x56>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e1f4      	b.n	8002ecc <HAL_I2C_Mem_Read+0x440>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d007      	beq.n	8002b08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2222      	movs	r2, #34	; 0x22
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2240      	movs	r2, #64	; 0x40
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_I2C_Mem_Read+0x228>)
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b4a:	88f8      	ldrh	r0, [r7, #6]
 8002b4c:	893a      	ldrh	r2, [r7, #8]
 8002b4e:	8979      	ldrh	r1, [r7, #10]
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	4603      	mov	r3, r0
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fa46 	bl	8002fec <I2C_RequestMemoryRead>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e1b0      	b.n	8002ecc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d113      	bne.n	8002b9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	623b      	str	r3, [r7, #32]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	623b      	str	r3, [r7, #32]
 8002b86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e184      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d11b      	bne.n	8002bda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e164      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d11b      	bne.n	8002c1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	e144      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c30:	e138      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	f200 80f1 	bhi.w	8002e1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d123      	bne.n	8002c8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fbf7 	bl	800343c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e139      	b.n	8002ecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c8a:	e10b      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d14e      	bne.n	8002d32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4906      	ldr	r1, [pc, #24]	; (8002cb8 <HAL_I2C_Mem_Read+0x22c>)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fa74 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e10e      	b.n	8002ecc <HAL_I2C_Mem_Read+0x440>
 8002cae:	bf00      	nop
 8002cb0:	00100002 	.word	0x00100002
 8002cb4:	ffff0000 	.word	0xffff0000
 8002cb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d30:	e0b8      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4966      	ldr	r1, [pc, #408]	; (8002ed4 <HAL_I2C_Mem_Read+0x448>)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fa25 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0bf      	b.n	8002ecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2200      	movs	r2, #0
 8002d96:	494f      	ldr	r1, [pc, #316]	; (8002ed4 <HAL_I2C_Mem_Read+0x448>)
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f9f7 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e091      	b.n	8002ecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e1c:	e042      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fb0a 	bl	800343c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e04c      	b.n	8002ecc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d118      	bne.n	8002ea4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f aec2 	bne.w	8002c32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3728      	adds	r7, #40	; 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	00010004 	.word	0x00010004

08002ed8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	460b      	mov	r3, r1
 8002eec:	813b      	strh	r3, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f93c 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e05f      	b.n	8002fde <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	6a3a      	ldr	r2, [r7, #32]
 8002f32:	492d      	ldr	r1, [pc, #180]	; (8002fe8 <I2C_RequestMemoryWrite+0x110>)
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f980 	bl	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e04c      	b.n	8002fde <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	6a39      	ldr	r1, [r7, #32]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f9ea 	bl	8003338 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d107      	bne.n	8002f82 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e02b      	b.n	8002fde <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8c:	893b      	ldrh	r3, [r7, #8]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]
 8002f96:	e021      	b.n	8002fdc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f98:	893b      	ldrh	r3, [r7, #8]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f9c4 	bl	8003338 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00d      	beq.n	8002fd2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d107      	bne.n	8002fce <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e005      	b.n	8002fde <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fd2:	893b      	ldrh	r3, [r7, #8]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	00010002 	.word	0x00010002

08002fec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003014:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003024:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	2200      	movs	r2, #0
 800302e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f8aa 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e09e      	b.n	8003180 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003042:	897b      	ldrh	r3, [r7, #10]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003050:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	494c      	ldr	r1, [pc, #304]	; (8003188 <I2C_RequestMemoryRead+0x19c>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f8ee 	bl	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e08b      	b.n	8003180 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003080:	6a39      	ldr	r1, [r7, #32]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f958 	bl	8003338 <I2C_WaitOnTXEFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	2b04      	cmp	r3, #4
 8003094:	d107      	bne.n	80030a6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e06a      	b.n	8003180 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030b0:	893b      	ldrh	r3, [r7, #8]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	611a      	str	r2, [r3, #16]
 80030ba:	e021      	b.n	8003100 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030bc:	893b      	ldrh	r3, [r7, #8]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	6a39      	ldr	r1, [r7, #32]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f932 	bl	8003338 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d107      	bne.n	80030f2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e044      	b.n	8003180 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f6:	893b      	ldrh	r3, [r7, #8]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	6a39      	ldr	r1, [r7, #32]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f917 	bl	8003338 <I2C_WaitOnTXEFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b04      	cmp	r3, #4
 8003116:	d107      	bne.n	8003128 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e029      	b.n	8003180 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	2200      	movs	r2, #0
 8003144:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f81f 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e013      	b.n	8003180 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003158:	897b      	ldrh	r3, [r7, #10]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	6a3a      	ldr	r2, [r7, #32]
 800316c:	4906      	ldr	r1, [pc, #24]	; (8003188 <I2C_RequestMemoryRead+0x19c>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f863 	bl	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	00010002 	.word	0x00010002

0800318c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319c:	e025      	b.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d021      	beq.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fd ff45 	bl	8001034 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d116      	bne.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e023      	b.n	8003232 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d10d      	bne.n	8003210 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	e00c      	b.n	800322a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	429a      	cmp	r2, r3
 800322e:	d0b6      	beq.n	800319e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003248:	e051      	b.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003258:	d123      	bne.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003268:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003272:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f043 0204 	orr.w	r2, r3, #4
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e046      	b.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d021      	beq.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7fd fec3 	bl	8001034 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d116      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e020      	b.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10c      	bne.n	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	e00b      	b.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	43da      	mvns	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d18d      	bne.n	800324a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003344:	e02d      	b.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f8ce 	bl	80034e8 <I2C_IsAcknowledgeFailed>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e02d      	b.n	80033b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d021      	beq.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fd fe69 	bl	8001034 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b80      	cmp	r3, #128	; 0x80
 80033ae:	d1ca      	bne.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c6:	e02d      	b.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f88d 	bl	80034e8 <I2C_IsAcknowledgeFailed>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e02d      	b.n	8003434 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d021      	beq.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e0:	f7fd fe28 	bl	8001034 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d302      	bcc.n	80033f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d116      	bne.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e007      	b.n	8003434 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d1ca      	bne.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003448:	e042      	b.n	80034d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d119      	bne.n	800348c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0210 	mvn.w	r2, #16
 8003460:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e029      	b.n	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348c:	f7fd fdd2 	bl	8001034 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	429a      	cmp	r2, r3
 800349a:	d302      	bcc.n	80034a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e007      	b.n	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d1b5      	bne.n	800344a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fe:	d11b      	bne.n	8003538 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003508:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0204 	orr.w	r2, r3, #4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b20      	cmp	r3, #32
 800355a:	d129      	bne.n	80035b0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e000      	b.n	80035b2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d12a      	bne.n	800362e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2224      	movs	r2, #36	; 0x24
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	f023 030f 	bic.w	r3, r3, #15
 80035fe:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b29a      	uxth	r2, r3
 8003604:	89fb      	ldrh	r3, [r7, #14]
 8003606:	4313      	orrs	r3, r2
 8003608:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	89fa      	ldrh	r2, [r7, #14]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e000      	b.n	8003630 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800362e:	2302      	movs	r3, #2
  }
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0bf      	b.n	80037ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f004 fcac 	bl	8007fc0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800367e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6999      	ldr	r1, [r3, #24]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003694:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_LTDC_Init+0x19c>)
 80036b0:	400b      	ands	r3, r1
 80036b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6899      	ldr	r1, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68d9      	ldr	r1, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <HAL_LTDC_Init+0x19c>)
 80036de:	400b      	ands	r3, r1
 80036e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68d9      	ldr	r1, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1a      	ldr	r2, [r3, #32]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6919      	ldr	r1, [r3, #16]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_LTDC_Init+0x19c>)
 800370c:	400b      	ands	r3, r1
 800370e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	041b      	lsls	r3, r3, #16
 8003716:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6919      	ldr	r1, [r3, #16]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6959      	ldr	r1, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <HAL_LTDC_Init+0x19c>)
 800373a:	400b      	ands	r3, r1
 800373c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6959      	ldr	r1, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0206 	orr.w	r2, r2, #6
 80037aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	f000f800 	.word	0xf000f800

080037dc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d023      	beq.n	8003846 <HAL_LTDC_IRQHandler+0x6a>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01e      	beq.n	8003846 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0204 	bic.w	r2, r2, #4
 8003816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2204      	movs	r2, #4
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2204      	movs	r2, #4
 8003834:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f86f 	bl	8003924 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d023      	beq.n	8003898 <HAL_LTDC_IRQHandler+0xbc>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01e      	beq.n	8003898 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0202 	bic.w	r2, r2, #2
 8003868:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2202      	movs	r2, #2
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003878:	f043 0202 	orr.w	r2, r3, #2
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f846 	bl	8003924 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01b      	beq.n	80038da <HAL_LTDC_IRQHandler+0xfe>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d016      	beq.n	80038da <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2201      	movs	r2, #1
 80038c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f82f 	bl	8003938 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01b      	beq.n	800391c <HAL_LTDC_IRQHandler+0x140>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0208 	bic.w	r2, r2, #8
 80038fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2208      	movs	r2, #8
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f818 	bl	800394c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003960:	b5b0      	push	{r4, r5, r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_LTDC_ConfigLayer+0x1a>
 8003976:	2302      	movs	r3, #2
 8003978:	e02c      	b.n	80039d4 <HAL_LTDC_ConfigLayer+0x74>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2134      	movs	r1, #52	; 0x34
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4614      	mov	r4, r2
 800399e:	461d      	mov	r5, r3
 80039a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039ac:	682b      	ldr	r3, [r5, #0]
 80039ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f8b9 	bl	8003b2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2201      	movs	r2, #1
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bdb0      	pop	{r4, r5, r7, pc}

080039dc <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_LTDC_ConfigColorKeying+0x1a>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e030      	b.n	8003a58 <HAL_LTDC_ConfigColorKeying+0x7c>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	01db      	lsls	r3, r3, #7
 8003a10:	4413      	add	r3, r2
 8003a12:	3384      	adds	r3, #132	; 0x84
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	01d2      	lsls	r2, r2, #7
 8003a20:	440a      	add	r2, r1
 8003a22:	3284      	adds	r2, #132	; 0x84
 8003a24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a28:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	01db      	lsls	r3, r3, #7
 8003a34:	4413      	add	r3, r2
 8003a36:	3384      	adds	r3, #132	; 0x84
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2201      	movs	r2, #1
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_LTDC_EnableColorKeying+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e026      	b.n	8003aca <HAL_LTDC_EnableColorKeying+0x66>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	01db      	lsls	r3, r3, #7
 8003a96:	4413      	add	r3, r2
 8003a98:	3384      	adds	r3, #132	; 0x84
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	01d2      	lsls	r2, r2, #7
 8003aa6:	440a      	add	r2, r1
 8003aa8:	3284      	adds	r2, #132	; 0x84
 8003aaa:	f043 0302 	orr.w	r3, r3, #2
 8003aae:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_LTDC_EnableDither+0x16>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e016      	b.n	8003b1c <HAL_LTDC_EnableDither+0x44>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <HAL_LTDC_EnableDither+0x50>)
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_LTDC_EnableDither+0x50>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40016800 	.word	0x40016800

08003b2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	0c1b      	lsrs	r3, r3, #16
 8003b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b48:	4413      	add	r3, r2
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	01db      	lsls	r3, r3, #7
 8003b58:	4413      	add	r3, r2
 8003b5a:	3384      	adds	r3, #132	; 0x84
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	4611      	mov	r1, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	01d2      	lsls	r2, r2, #7
 8003b68:	440a      	add	r2, r1
 8003b6a:	3284      	adds	r2, #132	; 0x84
 8003b6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b82:	4413      	add	r3, r2
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	01db      	lsls	r3, r3, #7
 8003b90:	440b      	add	r3, r1
 8003b92:	3384      	adds	r3, #132	; 0x84
 8003b94:	4619      	mov	r1, r3
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003baa:	4413      	add	r3, r2
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	01db      	lsls	r3, r3, #7
 8003bba:	4413      	add	r3, r2
 8003bbc:	3384      	adds	r3, #132	; 0x84
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	01d2      	lsls	r2, r2, #7
 8003bca:	440a      	add	r2, r1
 8003bcc:	3284      	adds	r2, #132	; 0x84
 8003bce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003bd2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003be2:	4413      	add	r3, r2
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4619      	mov	r1, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	01db      	lsls	r3, r3, #7
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3384      	adds	r3, #132	; 0x84
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	01db      	lsls	r3, r3, #7
 8003c06:	4413      	add	r3, r2
 8003c08:	3384      	adds	r3, #132	; 0x84
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	4611      	mov	r1, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	01d2      	lsls	r2, r2, #7
 8003c16:	440a      	add	r2, r1
 8003c18:	3284      	adds	r2, #132	; 0x84
 8003c1a:	f023 0307 	bic.w	r3, r3, #7
 8003c1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	01db      	lsls	r3, r3, #7
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3384      	adds	r3, #132	; 0x84
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	01db      	lsls	r3, r3, #7
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3384      	adds	r3, #132	; 0x84
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	01db      	lsls	r3, r3, #7
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3384      	adds	r3, #132	; 0x84
 8003c70:	461a      	mov	r2, r3
 8003c72:	2300      	movs	r3, #0
 8003c74:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	01db      	lsls	r3, r3, #7
 8003c90:	440b      	add	r3, r1
 8003c92:	3384      	adds	r3, #132	; 0x84
 8003c94:	4619      	mov	r1, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	01db      	lsls	r3, r3, #7
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3384      	adds	r3, #132	; 0x84
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	01d2      	lsls	r2, r2, #7
 8003cb6:	440a      	add	r2, r1
 8003cb8:	3284      	adds	r2, #132	; 0x84
 8003cba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	01db      	lsls	r3, r3, #7
 8003cca:	4413      	add	r3, r2
 8003ccc:	3384      	adds	r3, #132	; 0x84
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	01db      	lsls	r3, r3, #7
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3384      	adds	r3, #132	; 0x84
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	4611      	mov	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	01d2      	lsls	r2, r2, #7
 8003cf0:	440a      	add	r2, r1
 8003cf2:	3284      	adds	r2, #132	; 0x84
 8003cf4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cf8:	f023 0307 	bic.w	r3, r3, #7
 8003cfc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	6809      	ldr	r1, [r1, #0]
 8003d0a:	4608      	mov	r0, r1
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	01c9      	lsls	r1, r1, #7
 8003d10:	4401      	add	r1, r0
 8003d12:	3184      	adds	r1, #132	; 0x84
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	01db      	lsls	r3, r3, #7
 8003d22:	4413      	add	r3, r2
 8003d24:	3384      	adds	r3, #132	; 0x84
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	01db      	lsls	r3, r3, #7
 8003d32:	4413      	add	r3, r2
 8003d34:	3384      	adds	r3, #132	; 0x84
 8003d36:	461a      	mov	r2, r3
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	01db      	lsls	r3, r3, #7
 8003d46:	4413      	add	r3, r2
 8003d48:	3384      	adds	r3, #132	; 0x84
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	e01b      	b.n	8003d98 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	e014      	b.n	8003d98 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d00b      	beq.n	8003d8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d007      	beq.n	8003d8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d003      	beq.n	8003d8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d8a:	2b07      	cmp	r3, #7
 8003d8c:	d102      	bne.n	8003d94 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	e001      	b.n	8003d98 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003d94:	2301      	movs	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	01db      	lsls	r3, r3, #7
 8003da2:	4413      	add	r3, r2
 8003da4:	3384      	adds	r3, #132	; 0x84
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	4611      	mov	r1, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	01d2      	lsls	r2, r2, #7
 8003db2:	440a      	add	r2, r1
 8003db4:	3284      	adds	r2, #132	; 0x84
 8003db6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003dba:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	041a      	lsls	r2, r3, #16
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1acb      	subs	r3, r1, r3
 8003dd2:	69f9      	ldr	r1, [r7, #28]
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	3303      	adds	r3, #3
 8003dda:	68f9      	ldr	r1, [r7, #12]
 8003ddc:	6809      	ldr	r1, [r1, #0]
 8003dde:	4608      	mov	r0, r1
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	01c9      	lsls	r1, r1, #7
 8003de4:	4401      	add	r1, r0
 8003de6:	3184      	adds	r1, #132	; 0x84
 8003de8:	4313      	orrs	r3, r2
 8003dea:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	01db      	lsls	r3, r3, #7
 8003df6:	4413      	add	r3, r2
 8003df8:	3384      	adds	r3, #132	; 0x84
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	4611      	mov	r1, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	01d2      	lsls	r2, r2, #7
 8003e06:	440a      	add	r2, r1
 8003e08:	3284      	adds	r2, #132	; 0x84
 8003e0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e0e:	f023 0307 	bic.w	r3, r3, #7
 8003e12:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	01db      	lsls	r3, r3, #7
 8003e1e:	4413      	add	r3, r2
 8003e20:	3384      	adds	r3, #132	; 0x84
 8003e22:	461a      	mov	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	01db      	lsls	r3, r3, #7
 8003e34:	4413      	add	r3, r2
 8003e36:	3384      	adds	r3, #132	; 0x84
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	01d2      	lsls	r2, r2, #7
 8003e44:	440a      	add	r2, r1
 8003e46:	3284      	adds	r2, #132	; 0x84
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6013      	str	r3, [r2, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	3724      	adds	r7, #36	; 0x24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_PWREx_EnableOverDrive+0x90>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <HAL_PWREx_EnableOverDrive+0x90>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6413      	str	r3, [r2, #64]	; 0x40
 8003e76:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <HAL_PWREx_EnableOverDrive+0x90>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e88:	f7fd f8d4 	bl	8001034 <HAL_GetTick>
 8003e8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e8e:	e009      	b.n	8003ea4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e90:	f7fd f8d0 	bl	8001034 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e9e:	d901      	bls.n	8003ea4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e01f      	b.n	8003ee4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d1ee      	bne.n	8003e90 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb8:	f7fd f8bc 	bl	8001034 <HAL_GetTick>
 8003ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ebe:	e009      	b.n	8003ed4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ec0:	f7fd f8b8 	bl	8001034 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ece:	d901      	bls.n	8003ed4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e007      	b.n	8003ee4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ed4:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ee0:	d1ee      	bne.n	8003ec0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	420e0040 	.word	0x420e0040
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	420e0044 	.word	0x420e0044

08003efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e22d      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d075      	beq.n	8004006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1a:	4ba3      	ldr	r3, [pc, #652]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4ba0      	ldr	r3, [pc, #640]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d112      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b9d      	ldr	r3, [pc, #628]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	4b99      	ldr	r3, [pc, #612]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05b      	beq.n	8004004 <HAL_RCC_OscConfig+0x108>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d157      	bne.n	8004004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e208      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x74>
 8003f62:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a90      	ldr	r2, [pc, #576]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x98>
 8003f7a:	4b8b      	ldr	r3, [pc, #556]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a8a      	ldr	r2, [pc, #552]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a87      	ldr	r2, [pc, #540]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f94:	4b84      	ldr	r3, [pc, #528]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a83      	ldr	r2, [pc, #524]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b81      	ldr	r3, [pc, #516]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a80      	ldr	r2, [pc, #512]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd f83e 	bl	8001034 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fd f83a 	bl	8001034 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1cd      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xc0>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fd f82a 	bl	8001034 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fd f826 	bl	8001034 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1b9      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xe8>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004012:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b62      	ldr	r3, [pc, #392]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b5f      	ldr	r3, [pc, #380]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e18d      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b56      	ldr	r3, [pc, #344]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4952      	ldr	r1, [pc, #328]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b4f      	ldr	r3, [pc, #316]	; (80041ac <HAL_RCC_OscConfig+0x2b0>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fc ffdf 	bl	8001034 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407a:	f7fc ffdb 	bl	8001034 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e16e      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b46      	ldr	r3, [pc, #280]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4940      	ldr	r1, [pc, #256]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <HAL_RCC_OscConfig+0x2b0>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fc ffbe 	bl	8001034 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fc ffba 	bl	8001034 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e14d      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d030      	beq.n	8004148 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <HAL_RCC_OscConfig+0x2b4>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fc ff9e 	bl	8001034 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fc ff9a 	bl	8001034 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e12d      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x200>
 800411a:	e015      	b.n	8004148 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411c:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <HAL_RCC_OscConfig+0x2b4>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fc ff87 	bl	8001034 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412a:	f7fc ff83 	bl	8001034 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e116      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80a0 	beq.w	8004296 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_OscConfig+0x2b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d121      	bne.n	80041d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_RCC_OscConfig+0x2b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <HAL_RCC_OscConfig+0x2b8>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fc ff49 	bl	8001034 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	e011      	b.n	80041ca <HAL_RCC_OscConfig+0x2ce>
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470000 	.word	0x42470000
 80041b0:	42470e80 	.word	0x42470e80
 80041b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b8:	f7fc ff3c 	bl	8001034 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0cf      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b6a      	ldr	r3, [pc, #424]	; (8004374 <HAL_RCC_OscConfig+0x478>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x2f0>
 80041de:	4b66      	ldr	r3, [pc, #408]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a65      	ldr	r2, [pc, #404]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ea:	e01c      	b.n	8004226 <HAL_RCC_OscConfig+0x32a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d10c      	bne.n	800420e <HAL_RCC_OscConfig+0x312>
 80041f4:	4b60      	ldr	r3, [pc, #384]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	4a5f      	ldr	r2, [pc, #380]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004200:	4b5d      	ldr	r3, [pc, #372]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a5c      	ldr	r2, [pc, #368]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6713      	str	r3, [r2, #112]	; 0x70
 800420c:	e00b      	b.n	8004226 <HAL_RCC_OscConfig+0x32a>
 800420e:	4b5a      	ldr	r3, [pc, #360]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a59      	ldr	r2, [pc, #356]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6713      	str	r3, [r2, #112]	; 0x70
 800421a:	4b57      	ldr	r3, [pc, #348]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a56      	ldr	r2, [pc, #344]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 8004220:	f023 0304 	bic.w	r3, r3, #4
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d015      	beq.n	800425a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fc ff01 	bl	8001034 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fc fefd 	bl	8001034 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e08e      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	4b4a      	ldr	r3, [pc, #296]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ee      	beq.n	8004236 <HAL_RCC_OscConfig+0x33a>
 8004258:	e014      	b.n	8004284 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fc feeb 	bl	8001034 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fc fee7 	bl	8001034 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e078      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ee      	bne.n	8004262 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428a:	4b3b      	ldr	r3, [pc, #236]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4a3a      	ldr	r2, [pc, #232]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d064      	beq.n	8004368 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800429e:	4b36      	ldr	r3, [pc, #216]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d05c      	beq.n	8004364 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d141      	bne.n	8004336 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	4b32      	ldr	r3, [pc, #200]	; (800437c <HAL_RCC_OscConfig+0x480>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fc febc 	bl	8001034 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c0:	f7fc feb8 	bl	8001034 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04b      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d2:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	085b      	lsrs	r3, r3, #1
 80042f6:	3b01      	subs	r3, #1
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	061b      	lsls	r3, r3, #24
 8004302:	491d      	ldr	r1, [pc, #116]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <HAL_RCC_OscConfig+0x480>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430e:	f7fc fe91 	bl	8001034 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004316:	f7fc fe8d 	bl	8001034 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e020      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x41a>
 8004334:	e018      	b.n	8004368 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <HAL_RCC_OscConfig+0x480>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fc fe7a 	bl	8001034 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004344:	f7fc fe76 	bl	8001034 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e009      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <HAL_RCC_OscConfig+0x47c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x448>
 8004362:	e001      	b.n	8004368 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40007000 	.word	0x40007000
 8004378:	40023800 	.word	0x40023800
 800437c:	42470060 	.word	0x42470060

08004380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0ca      	b.n	800452a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004394:	4b67      	ldr	r3, [pc, #412]	; (8004534 <HAL_RCC_ClockConfig+0x1b4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d90c      	bls.n	80043bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4b64      	ldr	r3, [pc, #400]	; (8004534 <HAL_RCC_ClockConfig+0x1b4>)
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b62      	ldr	r3, [pc, #392]	; (8004534 <HAL_RCC_ClockConfig+0x1b4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0b6      	b.n	800452a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d020      	beq.n	800440a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043d4:	4b58      	ldr	r3, [pc, #352]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4a57      	ldr	r2, [pc, #348]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80043da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ec:	4b52      	ldr	r3, [pc, #328]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f8:	4b4f      	ldr	r3, [pc, #316]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	494c      	ldr	r1, [pc, #304]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d044      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	4b46      	ldr	r3, [pc, #280]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d119      	bne.n	800445e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e07d      	b.n	800452a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d003      	beq.n	800443e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800443a:	2b03      	cmp	r3, #3
 800443c:	d107      	bne.n	800444e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443e:	4b3e      	ldr	r3, [pc, #248]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e06d      	b.n	800452a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444e:	4b3a      	ldr	r3, [pc, #232]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e065      	b.n	800452a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f023 0203 	bic.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4933      	ldr	r1, [pc, #204]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	4313      	orrs	r3, r2
 800446e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004470:	f7fc fde0 	bl	8001034 <HAL_GetTick>
 8004474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	e00a      	b.n	800448e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004478:	f7fc fddc 	bl	8001034 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e04d      	b.n	800452a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448e:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 020c 	and.w	r2, r3, #12
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	429a      	cmp	r2, r3
 800449e:	d1eb      	bne.n	8004478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <HAL_RCC_ClockConfig+0x1b4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d20c      	bcs.n	80044c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ae:	4b21      	ldr	r3, [pc, #132]	; (8004534 <HAL_RCC_ClockConfig+0x1b4>)
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	4b1f      	ldr	r3, [pc, #124]	; (8004534 <HAL_RCC_ClockConfig+0x1b4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e030      	b.n	800452a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d4:	4b18      	ldr	r3, [pc, #96]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4915      	ldr	r1, [pc, #84]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	490d      	ldr	r1, [pc, #52]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004506:	f000 f81d 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 800450a:	4601      	mov	r1, r0
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	4a09      	ldr	r2, [pc, #36]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	5cd3      	ldrb	r3, [r2, r3]
 800451a:	fa21 f303 	lsr.w	r3, r1, r3
 800451e:	4a08      	ldr	r2, [pc, #32]	; (8004540 <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004522:	2000      	movs	r0, #0
 8004524:	f7fc fd42 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40023c00 	.word	0x40023c00
 8004538:	40023800 	.word	0x40023800
 800453c:	0800c1dc 	.word	0x0800c1dc
 8004540:	20000050 	.word	0x20000050

08004544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	2300      	movs	r3, #0
 8004554:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800455a:	4b63      	ldr	r3, [pc, #396]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b04      	cmp	r3, #4
 8004564:	d007      	beq.n	8004576 <HAL_RCC_GetSysClockFreq+0x32>
 8004566:	2b08      	cmp	r3, #8
 8004568:	d008      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x38>
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 80b4 	bne.w	80046d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004570:	4b5e      	ldr	r3, [pc, #376]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004572:	60bb      	str	r3, [r7, #8]
       break;
 8004574:	e0b3      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004576:	4b5e      	ldr	r3, [pc, #376]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004578:	60bb      	str	r3, [r7, #8]
      break;
 800457a:	e0b0      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800457c:	4b5a      	ldr	r3, [pc, #360]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004584:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004586:	4b58      	ldr	r3, [pc, #352]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d04a      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004592:	4b55      	ldr	r3, [pc, #340]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	f04f 0400 	mov.w	r4, #0
 800459c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	ea03 0501 	and.w	r5, r3, r1
 80045a8:	ea04 0602 	and.w	r6, r4, r2
 80045ac:	4629      	mov	r1, r5
 80045ae:	4632      	mov	r2, r6
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	f04f 0400 	mov.w	r4, #0
 80045b8:	0154      	lsls	r4, r2, #5
 80045ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045be:	014b      	lsls	r3, r1, #5
 80045c0:	4619      	mov	r1, r3
 80045c2:	4622      	mov	r2, r4
 80045c4:	1b49      	subs	r1, r1, r5
 80045c6:	eb62 0206 	sbc.w	r2, r2, r6
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	f04f 0400 	mov.w	r4, #0
 80045d2:	0194      	lsls	r4, r2, #6
 80045d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045d8:	018b      	lsls	r3, r1, #6
 80045da:	1a5b      	subs	r3, r3, r1
 80045dc:	eb64 0402 	sbc.w	r4, r4, r2
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	00e2      	lsls	r2, r4, #3
 80045ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045ee:	00d9      	lsls	r1, r3, #3
 80045f0:	460b      	mov	r3, r1
 80045f2:	4614      	mov	r4, r2
 80045f4:	195b      	adds	r3, r3, r5
 80045f6:	eb44 0406 	adc.w	r4, r4, r6
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	0262      	lsls	r2, r4, #9
 8004604:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004608:	0259      	lsls	r1, r3, #9
 800460a:	460b      	mov	r3, r1
 800460c:	4614      	mov	r4, r2
 800460e:	4618      	mov	r0, r3
 8004610:	4621      	mov	r1, r4
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f04f 0400 	mov.w	r4, #0
 8004618:	461a      	mov	r2, r3
 800461a:	4623      	mov	r3, r4
 800461c:	f7fc fb24 	bl	8000c68 <__aeabi_uldivmod>
 8004620:	4603      	mov	r3, r0
 8004622:	460c      	mov	r4, r1
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e049      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004628:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	099b      	lsrs	r3, r3, #6
 800462e:	f04f 0400 	mov.w	r4, #0
 8004632:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	ea03 0501 	and.w	r5, r3, r1
 800463e:	ea04 0602 	and.w	r6, r4, r2
 8004642:	4629      	mov	r1, r5
 8004644:	4632      	mov	r2, r6
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	f04f 0400 	mov.w	r4, #0
 800464e:	0154      	lsls	r4, r2, #5
 8004650:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004654:	014b      	lsls	r3, r1, #5
 8004656:	4619      	mov	r1, r3
 8004658:	4622      	mov	r2, r4
 800465a:	1b49      	subs	r1, r1, r5
 800465c:	eb62 0206 	sbc.w	r2, r2, r6
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	f04f 0400 	mov.w	r4, #0
 8004668:	0194      	lsls	r4, r2, #6
 800466a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800466e:	018b      	lsls	r3, r1, #6
 8004670:	1a5b      	subs	r3, r3, r1
 8004672:	eb64 0402 	sbc.w	r4, r4, r2
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	00e2      	lsls	r2, r4, #3
 8004680:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004684:	00d9      	lsls	r1, r3, #3
 8004686:	460b      	mov	r3, r1
 8004688:	4614      	mov	r4, r2
 800468a:	195b      	adds	r3, r3, r5
 800468c:	eb44 0406 	adc.w	r4, r4, r6
 8004690:	f04f 0100 	mov.w	r1, #0
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	02a2      	lsls	r2, r4, #10
 800469a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800469e:	0299      	lsls	r1, r3, #10
 80046a0:	460b      	mov	r3, r1
 80046a2:	4614      	mov	r4, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	4621      	mov	r1, r4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f04f 0400 	mov.w	r4, #0
 80046ae:	461a      	mov	r2, r3
 80046b0:	4623      	mov	r3, r4
 80046b2:	f7fc fad9 	bl	8000c68 <__aeabi_uldivmod>
 80046b6:	4603      	mov	r3, r0
 80046b8:	460c      	mov	r4, r1
 80046ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	3301      	adds	r3, #1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	60bb      	str	r3, [r7, #8]
      break;
 80046d6:	e002      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b04      	ldr	r3, [pc, #16]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046da:	60bb      	str	r3, [r7, #8]
      break;
 80046dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046de:	68bb      	ldr	r3, [r7, #8]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e8:	40023800 	.word	0x40023800
 80046ec:	00f42400 	.word	0x00f42400
 80046f0:	007a1200 	.word	0x007a1200

080046f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_RCC_GetHCLKFreq+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000050 	.word	0x20000050

0800470c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004710:	f7ff fff0 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004714:	4601      	mov	r1, r0
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0a9b      	lsrs	r3, r3, #10
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4a03      	ldr	r2, [pc, #12]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40023800 	.word	0x40023800
 8004730:	0800c1ec 	.word	0x0800c1ec

08004734 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004758:	2b00      	cmp	r3, #0
 800475a:	d061      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800475c:	4ba3      	ldr	r3, [pc, #652]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004762:	f7fc fc67 	bl	8001034 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004768:	e008      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800476a:	f7fc fc63 	bl	8001034 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e177      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800477c:	4b9c      	ldr	r3, [pc, #624]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	019a      	lsls	r2, r3, #6
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	071b      	lsls	r3, r3, #28
 80047a0:	4993      	ldr	r1, [pc, #588]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b4:	4b8e      	ldr	r3, [pc, #568]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ba:	0f1b      	lsrs	r3, r3, #28
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	019a      	lsls	r2, r3, #6
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	431a      	orrs	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	071b      	lsls	r3, r3, #28
 80047d4:	4986      	ldr	r1, [pc, #536]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047dc:	4b84      	ldr	r3, [pc, #528]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e2:	f023 021f 	bic.w	r2, r3, #31
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	4980      	ldr	r1, [pc, #512]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047f4:	4b7d      	ldr	r3, [pc, #500]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047fa:	f7fc fc1b 	bl	8001034 <HAL_GetTick>
 80047fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004800:	e008      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004802:	f7fc fc17 	bl	8001034 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e12b      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004814:	4b76      	ldr	r3, [pc, #472]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d105      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004834:	2b00      	cmp	r3, #0
 8004836:	d079      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004838:	4b6e      	ldr	r3, [pc, #440]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800483e:	f7fc fbf9 	bl	8001034 <HAL_GetTick>
 8004842:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004846:	f7fc fbf5 	bl	8001034 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e109      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004858:	4b65      	ldr	r3, [pc, #404]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004864:	d0ef      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004872:	4b5f      	ldr	r3, [pc, #380]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	0f1b      	lsrs	r3, r3, #28
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	019a      	lsls	r2, r3, #6
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	061b      	lsls	r3, r3, #24
 800488c:	431a      	orrs	r2, r3
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	071b      	lsls	r3, r3, #28
 8004892:	4957      	ldr	r1, [pc, #348]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800489a:	4b55      	ldr	r3, [pc, #340]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800489c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	4950      	ldr	r1, [pc, #320]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01e      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048c0:	4b4b      	ldr	r3, [pc, #300]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	0e1b      	lsrs	r3, r3, #24
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	019a      	lsls	r2, r3, #6
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	071b      	lsls	r3, r3, #28
 80048e0:	4943      	ldr	r1, [pc, #268]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048e8:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	493e      	ldr	r1, [pc, #248]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048fe:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004904:	f7fc fb96 	bl	8001034 <HAL_GetTick>
 8004908:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800490c:	f7fc fb92 	bl	8001034 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0a6      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800491e:	4b34      	ldr	r3, [pc, #208]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800492a:	d1ef      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 808d 	beq.w	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6413      	str	r3, [r2, #64]	; 0x40
 800494a:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004956:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a27      	ldr	r2, [pc, #156]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800495c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004960:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004962:	f7fc fb67 	bl	8001034 <HAL_GetTick>
 8004966:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004968:	e008      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800496a:	f7fc fb63 	bl	8001034 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e077      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800497c:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004988:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004990:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d039      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d032      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049bc:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d11e      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049ce:	f7fc fb31 	bl	8001034 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d4:	e014      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d6:	f7fc fb2d 	bl	8001034 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d90b      	bls.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e03f      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x338>
 80049ec:	42470068 	.word	0x42470068
 80049f0:	40023800 	.word	0x40023800
 80049f4:	42470070 	.word	0x42470070
 80049f8:	40007000 	.word	0x40007000
 80049fc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a00:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0e4      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a18:	d10d      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2e:	4911      	ldr	r1, [pc, #68]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	608b      	str	r3, [r1, #8]
 8004a34:	e005      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	4a0e      	ldr	r2, [pc, #56]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a40:	6093      	str	r3, [r2, #8]
 8004a42:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4e:	4909      	ldr	r1, [pc, #36]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004a68:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40023800 	.word	0x40023800
 8004a78:	424711e0 	.word	0x424711e0

08004a7c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e025      	b.n	8004adc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f003 fcc1 	bl	800842c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f001 f860 	bl	8005b82 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	461a      	mov	r2, r3
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	f001 f8cb 	bl	8005c68 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d101      	bne.n	8004b00 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
 8004afe:	e018      	b.n	8004b32 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 f928 	bl	8005d66 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d104      	bne.n	8004b28 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2205      	movs	r2, #5
 8004b22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004b26:	e003      	b.n	8004b30 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d101      	bne.n	8004b54 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
 8004b52:	e00e      	b.n	8004b72 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 f93b 	bl	8005dde <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e056      	b.n	8004c3a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f003 fb20 	bl	80081ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	ea42 0103 	orr.w	r1, r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	f003 0104 	and.w	r1, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e01a      	b.n	8004c8a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f003 fb05 	bl	800827c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b088      	sub	sp, #32
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	603b      	str	r3, [r7, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_SPI_Transmit+0x22>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e11e      	b.n	8004ef2 <HAL_SPI_Transmit+0x260>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cbc:	f7fc f9ba 	bl	8001034 <HAL_GetTick>
 8004cc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd6:	e103      	b.n	8004ee0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_SPI_Transmit+0x52>
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ce8:	e0fa      	b.n	8004ee0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2203      	movs	r2, #3
 8004cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	88fa      	ldrh	r2, [r7, #6]
 8004d08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	d107      	bne.n	8004d42 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d007      	beq.n	8004d60 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d68:	d14b      	bne.n	8004e02 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Transmit+0xe6>
 8004d72:	8afb      	ldrh	r3, [r7, #22]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d13e      	bne.n	8004df6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d9c:	e02b      	b.n	8004df6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d112      	bne.n	8004dd2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	881a      	ldrh	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	1c9a      	adds	r2, r3, #2
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dd0:	e011      	b.n	8004df6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd2:	f7fc f92f 	bl	8001034 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d803      	bhi.n	8004dea <HAL_SPI_Transmit+0x158>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d102      	bne.n	8004df0 <HAL_SPI_Transmit+0x15e>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004df4:	e074      	b.n	8004ee0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1ce      	bne.n	8004d9e <HAL_SPI_Transmit+0x10c>
 8004e00:	e04c      	b.n	8004e9c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_Transmit+0x17e>
 8004e0a:	8afb      	ldrh	r3, [r7, #22]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d140      	bne.n	8004e92 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e36:	e02c      	b.n	8004e92 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d113      	bne.n	8004e6e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e6c:	e011      	b.n	8004e92 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6e:	f7fc f8e1 	bl	8001034 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d803      	bhi.n	8004e86 <HAL_SPI_Transmit+0x1f4>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d102      	bne.n	8004e8c <HAL_SPI_Transmit+0x1fa>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e90:	e026      	b.n	8004ee0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1cd      	bne.n	8004e38 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 fbb3 	bl	800560c <SPI_EndRxTxTransaction>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e000      	b.n	8004ee0 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004ede:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b088      	sub	sp, #32
 8004efe:	af02      	add	r7, sp, #8
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f16:	d112      	bne.n	8004f3e <HAL_SPI_Receive+0x44>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10e      	bne.n	8004f3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2204      	movs	r2, #4
 8004f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f28:	88fa      	ldrh	r2, [r7, #6]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f8e9 	bl	800510c <HAL_SPI_TransmitReceive>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	e0e2      	b.n	8005104 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_SPI_Receive+0x52>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e0db      	b.n	8005104 <HAL_SPI_Receive+0x20a>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f54:	f7fc f86e 	bl	8001034 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d002      	beq.n	8004f6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
 8004f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f6a:	e0c2      	b.n	80050f2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_SPI_Receive+0x7e>
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f7c:	e0b9      	b.n	80050f2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2204      	movs	r2, #4
 8004f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	88fa      	ldrh	r2, [r7, #6]
 8004f9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc4:	d107      	bne.n	8004fd6 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	d007      	beq.n	8004ff4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d162      	bne.n	80050c2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ffc:	e02e      	b.n	800505c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d115      	bne.n	8005038 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f103 020c 	add.w	r2, r3, #12
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005036:	e011      	b.n	800505c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005038:	f7fb fffc 	bl	8001034 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d803      	bhi.n	8005050 <HAL_SPI_Receive+0x156>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d102      	bne.n	8005056 <HAL_SPI_Receive+0x15c>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	75fb      	strb	r3, [r7, #23]
          goto error;
 800505a:	e04a      	b.n	80050f2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1cb      	bne.n	8004ffe <HAL_SPI_Receive+0x104>
 8005066:	e031      	b.n	80050cc <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d113      	bne.n	800509e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	b292      	uxth	r2, r2
 8005082:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	1c9a      	adds	r2, r3, #2
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800509c:	e011      	b.n	80050c2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800509e:	f7fb ffc9 	bl	8001034 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d803      	bhi.n	80050b6 <HAL_SPI_Receive+0x1bc>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d102      	bne.n	80050bc <HAL_SPI_Receive+0x1c2>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050c0:	e017      	b.n	80050f2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1cd      	bne.n	8005068 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fa35 	bl	8005540 <SPI_EndRxTransaction>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
 80050ee:	e000      	b.n	80050f2 <HAL_SPI_Receive+0x1f8>
  }

error :
 80050f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005102:	7dfb      	ldrb	r3, [r7, #23]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	; 0x30
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800511a:	2301      	movs	r3, #1
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_SPI_TransmitReceive+0x26>
 800512e:	2302      	movs	r3, #2
 8005130:	e18a      	b.n	8005448 <HAL_SPI_TransmitReceive+0x33c>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800513a:	f7fb ff7b 	bl	8001034 <HAL_GetTick>
 800513e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005158:	2b01      	cmp	r3, #1
 800515a:	d00f      	beq.n	800517c <HAL_SPI_TransmitReceive+0x70>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005162:	d107      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d103      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x68>
 800516c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005170:	2b04      	cmp	r3, #4
 8005172:	d003      	beq.n	800517c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005174:	2302      	movs	r3, #2
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800517a:	e15b      	b.n	8005434 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_SPI_TransmitReceive+0x82>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_SPI_TransmitReceive+0x82>
 8005188:	887b      	ldrh	r3, [r7, #2]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d103      	bne.n	8005196 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005194:	e14e      	b.n	8005434 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d003      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2205      	movs	r2, #5
 80051a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	887a      	ldrh	r2, [r7, #2]
 80051ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	887a      	ldrh	r2, [r7, #2]
 80051c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	887a      	ldrh	r2, [r7, #2]
 80051cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	887a      	ldrh	r2, [r7, #2]
 80051d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d007      	beq.n	80051fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005206:	d178      	bne.n	80052fa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_SPI_TransmitReceive+0x10a>
 8005210:	8b7b      	ldrh	r3, [r7, #26]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d166      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	881a      	ldrh	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	1c9a      	adds	r2, r3, #2
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523a:	e053      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d11b      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x176>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d016      	beq.n	8005282 <HAL_SPI_TransmitReceive+0x176>
 8005254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005256:	2b01      	cmp	r3, #1
 8005258:	d113      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b01      	cmp	r3, #1
 800528e:	d119      	bne.n	80052c4 <HAL_SPI_TransmitReceive+0x1b8>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	b292      	uxth	r2, r2
 80052a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	1c9a      	adds	r2, r3, #2
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052c0:	2301      	movs	r3, #1
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052c4:	f7fb feb6 	bl	8001034 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d807      	bhi.n	80052e4 <HAL_SPI_TransmitReceive+0x1d8>
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052da:	d003      	beq.n	80052e4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052e2:	e0a7      	b.n	8005434 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1a6      	bne.n	800523c <HAL_SPI_TransmitReceive+0x130>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1a1      	bne.n	800523c <HAL_SPI_TransmitReceive+0x130>
 80052f8:	e07c      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_SPI_TransmitReceive+0x1fc>
 8005302:	8b7b      	ldrh	r3, [r7, #26]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d16b      	bne.n	80053e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	7812      	ldrb	r2, [r2, #0]
 8005314:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532e:	e057      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d11c      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x26c>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d017      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x26c>
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d114      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	330c      	adds	r3, #12
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	d119      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x2ae>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d014      	beq.n	80053ba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053b6:	2301      	movs	r3, #1
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053ba:	f7fb fe3b 	bl	8001034 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d803      	bhi.n	80053d2 <HAL_SPI_TransmitReceive+0x2c6>
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d0:	d102      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x2cc>
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d103      	bne.n	80053e0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053de:	e029      	b.n	8005434 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1a2      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x224>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d19d      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f907 	bl	800560c <SPI_EndRxTxTransaction>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d006      	beq.n	8005412 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005410:	e010      	b.n	8005434 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	e000      	b.n	8005434 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005432:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005444:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005448:	4618      	mov	r0, r3
 800544a:	3730      	adds	r7, #48	; 0x30
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800545e:	b2db      	uxtb	r3, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800547c:	e04c      	b.n	8005518 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d048      	beq.n	8005518 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005486:	f7fb fdd5 	bl	8001034 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d902      	bls.n	800549c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d13d      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b4:	d111      	bne.n	80054da <SPI_WaitFlagStateUntilTimeout+0x6e>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054be:	d004      	beq.n	80054ca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c8:	d107      	bne.n	80054da <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d10f      	bne.n	8005504 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005502:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e00f      	b.n	8005538 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	429a      	cmp	r2, r3
 8005534:	d1a3      	bne.n	800547e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005554:	d111      	bne.n	800557a <SPI_EndRxTransaction+0x3a>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	d004      	beq.n	800556a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005568:	d107      	bne.n	800557a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005582:	d12a      	bne.n	80055da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558c:	d012      	beq.n	80055b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff ff67 	bl	800546c <SPI_WaitFlagStateUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02d      	beq.n	8005600 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e026      	b.n	8005602 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2200      	movs	r2, #0
 80055bc:	2101      	movs	r1, #1
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff ff54 	bl	800546c <SPI_WaitFlagStateUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01a      	beq.n	8005600 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	f043 0220 	orr.w	r2, r3, #32
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e013      	b.n	8005602 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2200      	movs	r2, #0
 80055e2:	2101      	movs	r1, #1
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ff41 	bl	800546c <SPI_WaitFlagStateUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e000      	b.n	8005602 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005618:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <SPI_EndRxTxTransaction+0x7c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1b      	ldr	r2, [pc, #108]	; (800568c <SPI_EndRxTxTransaction+0x80>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	0d5b      	lsrs	r3, r3, #21
 8005624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005636:	d112      	bne.n	800565e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff ff12 	bl	800546c <SPI_WaitFlagStateUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e00f      	b.n	800567e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	3b01      	subs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005674:	2b80      	cmp	r3, #128	; 0x80
 8005676:	d0f2      	beq.n	800565e <SPI_EndRxTxTransaction+0x52>
 8005678:	e000      	b.n	800567c <SPI_EndRxTxTransaction+0x70>
        break;
 800567a:	bf00      	nop
  }

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000050 	.word	0x20000050
 800568c:	165e9f81 	.word	0x165e9f81

08005690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e01d      	b.n	80056de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f002 fdfe 	bl	80082b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f000 f95e 	bl	8005990 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0201 	orr.w	r2, r2, #1
 80056fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b06      	cmp	r3, #6
 800570e:	d007      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d122      	bne.n	800578a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b02      	cmp	r3, #2
 8005750:	d11b      	bne.n	800578a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f06f 0202 	mvn.w	r2, #2
 800575a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f8ee 	bl	8005952 <HAL_TIM_IC_CaptureCallback>
 8005776:	e005      	b.n	8005784 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f8e0 	bl	800593e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f8f1 	bl	8005966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d122      	bne.n	80057de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d11b      	bne.n	80057de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0204 	mvn.w	r2, #4
 80057ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f8c4 	bl	8005952 <HAL_TIM_IC_CaptureCallback>
 80057ca:	e005      	b.n	80057d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f8b6 	bl	800593e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8c7 	bl	8005966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d122      	bne.n	8005832 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d11b      	bne.n	8005832 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f06f 0208 	mvn.w	r2, #8
 8005802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2204      	movs	r2, #4
 8005808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f89a 	bl	8005952 <HAL_TIM_IC_CaptureCallback>
 800581e:	e005      	b.n	800582c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f88c 	bl	800593e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f89d 	bl	8005966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b10      	cmp	r3, #16
 800583e:	d122      	bne.n	8005886 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b10      	cmp	r3, #16
 800584c:	d11b      	bne.n	8005886 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f06f 0210 	mvn.w	r2, #16
 8005856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2208      	movs	r2, #8
 800585c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f870 	bl	8005952 <HAL_TIM_IC_CaptureCallback>
 8005872:	e005      	b.n	8005880 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f862 	bl	800593e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f873 	bl	8005966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d10e      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d107      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f06f 0201 	mvn.w	r2, #1
 80058aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fdef 	bl	8006490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d10e      	bne.n	80058de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	d107      	bne.n	80058de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f948 	bl	8005b6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d10e      	bne.n	800590a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d107      	bne.n	800590a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f838 	bl	800597a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b20      	cmp	r3, #32
 8005916:	d10e      	bne.n	8005936 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b20      	cmp	r3, #32
 8005924:	d107      	bne.n	8005936 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f06f 0220 	mvn.w	r2, #32
 800592e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f912 	bl	8005b5a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a40      	ldr	r2, [pc, #256]	; (8005aa4 <TIM_Base_SetConfig+0x114>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d013      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ae:	d00f      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a3d      	ldr	r2, [pc, #244]	; (8005aa8 <TIM_Base_SetConfig+0x118>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a3c      	ldr	r2, [pc, #240]	; (8005aac <TIM_Base_SetConfig+0x11c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a3b      	ldr	r2, [pc, #236]	; (8005ab0 <TIM_Base_SetConfig+0x120>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a3a      	ldr	r2, [pc, #232]	; (8005ab4 <TIM_Base_SetConfig+0x124>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d108      	bne.n	80059e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2f      	ldr	r2, [pc, #188]	; (8005aa4 <TIM_Base_SetConfig+0x114>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d02b      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f0:	d027      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <TIM_Base_SetConfig+0x118>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d023      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a2b      	ldr	r2, [pc, #172]	; (8005aac <TIM_Base_SetConfig+0x11c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01f      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <TIM_Base_SetConfig+0x120>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01b      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <TIM_Base_SetConfig+0x124>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d017      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a28      	ldr	r2, [pc, #160]	; (8005ab8 <TIM_Base_SetConfig+0x128>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a27      	ldr	r2, [pc, #156]	; (8005abc <TIM_Base_SetConfig+0x12c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00f      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a26      	ldr	r2, [pc, #152]	; (8005ac0 <TIM_Base_SetConfig+0x130>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00b      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a25      	ldr	r2, [pc, #148]	; (8005ac4 <TIM_Base_SetConfig+0x134>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a24      	ldr	r2, [pc, #144]	; (8005ac8 <TIM_Base_SetConfig+0x138>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a23      	ldr	r2, [pc, #140]	; (8005acc <TIM_Base_SetConfig+0x13c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d108      	bne.n	8005a54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <TIM_Base_SetConfig+0x114>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_Base_SetConfig+0xf8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a0c      	ldr	r2, [pc, #48]	; (8005ab4 <TIM_Base_SetConfig+0x124>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d103      	bne.n	8005a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	615a      	str	r2, [r3, #20]
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00
 8005ab4:	40010400 	.word	0x40010400
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40014400 	.word	0x40014400
 8005ac0:	40014800 	.word	0x40014800
 8005ac4:	40001800 	.word	0x40001800
 8005ac8:	40001c00 	.word	0x40001c00
 8005acc:	40002000 	.word	0x40002000

08005ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e032      	b.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b20:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d029      	beq.n	8005bf0 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ba8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bac:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005bb6:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8005bbc:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005bc2:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005bc8:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005bce:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005bd4:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005bda:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005be0:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e034      	b.n	8005c5a <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfc:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c06:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005c0c:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c24:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c2e:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005c34:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005c3a:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005c40:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005c46:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d02e      	beq.n	8005ce0 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c8e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005c9e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005ca8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005cb2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005cbc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005cc6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	609a      	str	r2, [r3, #8]
 8005cde:	e03b      	b.n	8005d58 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cf0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005d02:	4313      	orrs	r3, r2
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d16:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005d26:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005d30:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005d3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005d44:	4313      	orrs	r3, r2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d82:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005d8c:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005d9e:	f7fb f949 	bl	8001034 <HAL_GetTick>
 8005da2:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005da4:	e010      	b.n	8005dc8 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d00c      	beq.n	8005dc8 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d007      	beq.n	8005dc4 <FMC_SDRAM_SendCommand+0x5e>
 8005db4:	f7fb f93e 	bl	8001034 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d201      	bcs.n	8005dc8 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e006      	b.n	8005dd6 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d0e8      	beq.n	8005da6 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695a      	ldr	r2, [r3, #20]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <i2cm_read>:

/**
 * Read a I2C (real) register from AS7265x
 */
uint8_t i2cm_read(I2C_HandleTypeDef *hi2c, uint8_t addr)
    {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af04      	add	r7, sp, #16
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t result;
	HAL_I2C_Mem_Read(hi2c, (uint16_t)(0x49 << 1) ,addr, I2C_MEMADD_SIZE_8BIT, &result , sizeof(result) , 100);
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	2364      	movs	r3, #100	; 0x64
 8005e16:	9302      	str	r3, [sp, #8]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	9301      	str	r3, [sp, #4]
 8005e1c:	f107 030f 	add.w	r3, r7, #15
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	2301      	movs	r3, #1
 8005e24:	2192      	movs	r1, #146	; 0x92
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc fe30 	bl	8002a8c <HAL_I2C_Mem_Read>
	return result;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <i2cm_write>:

/**
 * Write a I2C (real) register to AS7265x.
 */
void i2cm_write(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t value)
    {
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b086      	sub	sp, #24
 8005e3a:	af04      	add	r7, sp, #16
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
 8005e42:	4613      	mov	r3, r2
 8005e44:	70bb      	strb	r3, [r7, #2]

	HAL_I2C_Mem_Write(hi2c, (uint16_t)(0x49 << 1) , addr, I2C_MEMADD_SIZE_8BIT, &value, sizeof(value) , 100); //AS7265X_I2C_ADDR
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	2364      	movs	r3, #100	; 0x64
 8005e4c:	9302      	str	r3, [sp, #8]
 8005e4e:	2301      	movs	r3, #1
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	1cbb      	adds	r3, r7, #2
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2301      	movs	r3, #1
 8005e58:	2192      	movs	r1, #146	; 0x92
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fc fd1c 	bl	8002898 <HAL_I2C_Mem_Write>
    }
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <as7265x_vreg_write>:

/**
 * Write to AS7265x virtual register. Based on code in the AS7265x datasheet.
 */
void as7265x_vreg_write(I2C_HandleTypeDef *hi2c, uint8_t virtualReg, uint8_t d)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
 8005e74:	4613      	mov	r3, r2
 8005e76:	70bb      	strb	r3, [r7, #2]
	volatile uint8_t status;
	while (1)
	{
		// Read slave I²C status to see if the write buffer is ready.
		status = i2cm_read(hi2c,I2C_AS72XX_SLAVE_STATUS_REG);
 8005e78:	2100      	movs	r1, #0
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff ffc2 	bl	8005e04 <i2cm_read>
 8005e80:	4603      	mov	r3, r0
 8005e82:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) 
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d000      	beq.n	8005e92 <as7265x_vreg_write+0x2a>
		status = i2cm_read(hi2c,I2C_AS72XX_SLAVE_STATUS_REG);
 8005e90:	e7f2      	b.n	8005e78 <as7265x_vreg_write+0x10>
			// No inbound TX pending at slave. Okay to write now.
			break ;
 8005e92:	bf00      	nop
//		HAL_Delay(5);
	}
	// Send the virtual register address (enabling bit 7 to indicate a write).
	i2cm_write(hi2c, I2C_AS72XX_SLAVE_WRITE_REG, (virtualReg | 0x80)) ;
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ffc8 	bl	8005e36 <i2cm_write>
	while (1)
	{
		// Read the slave I²C status to see if the write buffer is ready.
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG) ;
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ffab 	bl	8005e04 <i2cm_read>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0)
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d000      	beq.n	8005ec0 <as7265x_vreg_write+0x58>
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG) ;
 8005ebe:	e7f2      	b.n	8005ea6 <as7265x_vreg_write+0x3e>
		// No inbound TX pending at slave. Okay to write data now.
		break ;
 8005ec0:	bf00      	nop
//		HAL_Delay(5);

	}
	// Send the data to complete the operation.
	i2cm_write(hi2c,I2C_AS72XX_SLAVE_WRITE_REG, d) ;
 8005ec2:	78bb      	ldrb	r3, [r7, #2]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ffb4 	bl	8005e36 <i2cm_write>
}
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <as7265x_vreg_read>:

/**
 * Read from AS7265x virtual register. Based on code in the AS7265x datasheet. 
 */
uint8_t as7265x_vreg_read(I2C_HandleTypeDef *hi2c, uint8_t virtualReg)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	70fb      	strb	r3, [r7, #3]

	// Wait for WRITE flag to clear
	while (1)
	{
		// Read slave I²C status to see if the read buffer is ready.
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG) ;
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff8d 	bl	8005e04 <i2cm_read>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0)
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d000      	beq.n	8005efc <as7265x_vreg_read+0x26>
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG) ;
 8005efa:	e7f2      	b.n	8005ee2 <as7265x_vreg_read+0xc>
		// No inbound TX pending at slave. Okay to write now.
		break;
 8005efc:	bf00      	nop

	}


	// Send the virtual register address (disabling bit 7 to indicate a read).
	i2cm_write(hi2c, I2C_AS72XX_SLAVE_WRITE_REG, virtualReg);
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	461a      	mov	r2, r3
 8005f02:	2101      	movs	r1, #1
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff ff96 	bl	8005e36 <i2cm_write>


	while (1)
	{
		// Read the slave I²C status to see if our read data is available.
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG);
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff ff79 	bl	8005e04 <i2cm_read>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_RX_VALID)!= 0)
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d100      	bne.n	8005f24 <as7265x_vreg_read+0x4e>
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG);
 8005f22:	e7f2      	b.n	8005f0a <as7265x_vreg_read+0x34>
		// Read data is ready.
		break;
 8005f24:	bf00      	nop
//		HAL_Delay(5);

	}

	// Read the data to complete the operation.
	d = i2cm_read(hi2c, I2C_AS72XX_SLAVE_READ_REG) ;
 8005f26:	2102      	movs	r1, #2
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff6b 	bl	8005e04 <i2cm_read>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73bb      	strb	r3, [r7, #14]
	return d;
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	b2db      	uxtb	r3, r3
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <as7265x_is_data_available>:
 * Test DATA_RDY flag of configuration virtual register (add
 *
 * @return 0 if not set, non-zero if set.
 */
int as7265x_is_data_available (I2C_HandleTypeDef *hi2c)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
	int status = as7265x_vreg_read(hi2c, AS7265X_CONFIG);
 8005f46:	2104      	movs	r1, #4
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ffc4 	bl	8005ed6 <as7265x_vreg_read>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	60fb      	str	r3, [r7, #12]
	return (status & (1<<1) );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f003 0302 	and.w	r3, r3, #2
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <as7265x_device_select>:
/**
 * Select device
 *
 * @param device 0=master; 1=first slave; 2=second slave
 */
void as7265x_device_select(I2C_HandleTypeDef *hi2c, uint8_t device) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
	as7265x_vreg_write(hi2c, AS7265X_DEV_SELECT_CONTROL, device);
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	214f      	movs	r1, #79	; 0x4f
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff ff78 	bl	8005e68 <as7265x_vreg_write>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <as7265x_set_gain>:
 * Set amplifier gain

 * @param gain 0= 1x (default), 1=3.7x, 2=16x, 3=64x
 */
void as7265x_set_gain (I2C_HandleTypeDef *hi2c, int gain) 
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]

	int value = as7265x_vreg_read(hi2c, AS7265X_CONFIG);
 8005f8a:	2104      	movs	r1, #4
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff ffa2 	bl	8005ed6 <as7265x_vreg_read>
 8005f92:	4603      	mov	r3, r0
 8005f94:	60fb      	str	r3, [r7, #12]
	value &= 0b11001111; // clear gain bits
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
 8005f9c:	60fb      	str	r3, [r7, #12]
	value |= (gain&0b11) << 4;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
	as7265x_vreg_write(hi2c, AS7265X_CONFIG,value);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2104      	movs	r1, #4
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff ff57 	bl	8005e68 <as7265x_vreg_write>
}
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <as7265x_set_integration_time>:
 * Set ADC integration time. 
 *
 * @param time from 1..255. 2.8ms units.
 */
void as7265x_set_integration_time(I2C_HandleTypeDef *hi2c, uint8_t time)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	70fb      	strb	r3, [r7, #3]
	as7265x_vreg_write(hi2c, AS7265X_INTERGRATION_TIME, time);
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2105      	movs	r1, #5
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff ff47 	bl	8005e68 <as7265x_vreg_write>
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <as7265x_indicator_disable>:
	value |= (1<<0);
	as7265x_vreg_write(hi2c, AS7265X_LED_CONFIG, value);
}

void as7265x_indicator_disable (I2C_HandleTypeDef *hi2c) 
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
        as7265x_device_select(hi2c, 0);
 8005fea:	2100      	movs	r1, #0
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff ffb7 	bl	8005f60 <as7265x_device_select>
        uint8_t value = as7265x_vreg_read(hi2c, AS7265X_LED_CONFIG);
 8005ff2:	2107      	movs	r1, #7
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ff6e 	bl	8005ed6 <as7265x_vreg_read>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73fb      	strb	r3, [r7, #15]
        value &= ~(1<<0);
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
        as7265x_vreg_write(hi2c, AS7265X_LED_CONFIG, value);
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	461a      	mov	r2, r3
 800600a:	2107      	movs	r1, #7
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ff2b 	bl	8005e68 <as7265x_vreg_write>
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <as7265x_set_measurement_mode>:
 * Set measurement mode.
 * 
 * @param mode 2 = all 6 channels continuous; 3 = one shot all channels
 */
void as7265x_set_measurement_mode(I2C_HandleTypeDef *hi2c, uint8_t mode) 
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	70fb      	strb	r3, [r7, #3]
	uint8_t value = as7265x_vreg_read(hi2c, AS7265X_CONFIG);
 8006026:	2104      	movs	r1, #4
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ff54 	bl	8005ed6 <as7265x_vreg_read>
 800602e:	4603      	mov	r3, r0
 8006030:	73fb      	strb	r3, [r7, #15]
	value &= 0b11110011;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	f023 030c 	bic.w	r3, r3, #12
 8006038:	73fb      	strb	r3, [r7, #15]
	value |= (mode&0b11) << 2;
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	b25b      	sxtb	r3, r3
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	b25a      	sxtb	r2, r3
 8006046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800604a:	4313      	orrs	r3, r2
 800604c:	b25b      	sxtb	r3, r3
 800604e:	73fb      	strb	r3, [r7, #15]
	as7265x_vreg_write(hi2c, AS7265X_CONFIG, value);
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	461a      	mov	r2, r3
 8006054:	2104      	movs	r1, #4
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ff06 	bl	8005e68 <as7265x_vreg_write>
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <as7265x_get_calibrated_value>:

/**
 * Read calibrated value (IEEE 754 float)
 */
float as7265x_get_calibrated_value (I2C_HandleTypeDef *hi2c, uint8_t device, uint8_t base_addr)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
 8006070:	4613      	mov	r3, r2
 8006072:	70bb      	strb	r3, [r7, #2]
	int i;
	uint8_t value;
	uint32_t shift_reg = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]

	as7265x_device_select(hi2c, device);
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff6f 	bl	8005f60 <as7265x_device_select>

	for (i = base_addr; i < base_addr+4; i++) {
 8006082:	78bb      	ldrb	r3, [r7, #2]
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e011      	b.n	80060ac <as7265x_get_calibrated_value+0x48>
		shift_reg <<= 8;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	60fb      	str	r3, [r7, #12]
		value = as7265x_vreg_read(hi2c, i);
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff ff1e 	bl	8005ed6 <as7265x_vreg_read>
 800609a:	4603      	mov	r3, r0
 800609c:	74fb      	strb	r3, [r7, #19]
		shift_reg |= value;
 800609e:	7cfa      	ldrb	r2, [r7, #19]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
	for (i = base_addr; i < base_addr+4; i++) {
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	3301      	adds	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	78bb      	ldrb	r3, [r7, #2]
 80060ae:	3304      	adds	r3, #4
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	dbe8      	blt.n	8006088 <as7265x_get_calibrated_value+0x24>
	}
	// convert content of shift_reg to floating point
	float ret;
	memcpy (&ret, &shift_reg, sizeof(float));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	60bb      	str	r3, [r7, #8]
	return ret;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	ee07 3a90 	vmov	s15, r3
}
 80060c0:	eeb0 0a67 	vmov.f32	s0, s15
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <as7265x_get_all_calibrated_values>:
/**
 * Read all 18 channels. Channels AS72651 (vis): channels 0-5, AS72652 (vis+IR): channels 6-11,
 * AS72653 (vis+UV): channels 12-17.
 */
void as7265x_get_all_calibrated_values (I2C_HandleTypeDef *hi2c, as7265x_channels_t *channels)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b086      	sub	sp, #24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]

	uint8_t base_addr;
	int channel_index = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
	uint8_t device;
	float v;

	for (device = 0; device < 3; device++) {
 80060d8:	2300      	movs	r3, #0
 80060da:	73fb      	strb	r3, [r7, #15]
 80060dc:	e01c      	b.n	8006118 <as7265x_get_all_calibrated_values+0x4e>
		for (base_addr = 0x14; base_addr < 0x2c; base_addr += 4) {	
 80060de:	2314      	movs	r3, #20
 80060e0:	75fb      	strb	r3, [r7, #23]
 80060e2:	e013      	b.n	800610c <as7265x_get_all_calibrated_values+0x42>
			v = as7265x_get_calibrated_value (hi2c, device, base_addr);
 80060e4:	7dfa      	ldrb	r2, [r7, #23]
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff ffba 	bl	8006064 <as7265x_get_calibrated_value>
 80060f0:	ed87 0a02 	vstr	s0, [r7, #8]
			channels->channel[channel_index] = v;
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	601a      	str	r2, [r3, #0]
			channel_index++;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3301      	adds	r3, #1
 8006104:	613b      	str	r3, [r7, #16]
		for (base_addr = 0x14; base_addr < 0x2c; base_addr += 4) {	
 8006106:	7dfb      	ldrb	r3, [r7, #23]
 8006108:	3304      	adds	r3, #4
 800610a:	75fb      	strb	r3, [r7, #23]
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b2b      	cmp	r3, #43	; 0x2b
 8006110:	d9e8      	bls.n	80060e4 <as7265x_get_all_calibrated_values+0x1a>
	for (device = 0; device < 3; device++) {
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	3301      	adds	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d9df      	bls.n	80060de <as7265x_get_all_calibrated_values+0x14>
		}
	}

}
 800611e:	bf00      	nop
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800612a:	f000 ff13 	bl	8006f54 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800612e:	20ca      	movs	r0, #202	; 0xca
 8006130:	f000 f95d 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8006134:	20c3      	movs	r0, #195	; 0xc3
 8006136:	f000 f967 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800613a:	2008      	movs	r0, #8
 800613c:	f000 f964 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8006140:	2050      	movs	r0, #80	; 0x50
 8006142:	f000 f961 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8006146:	20cf      	movs	r0, #207	; 0xcf
 8006148:	f000 f951 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800614c:	2000      	movs	r0, #0
 800614e:	f000 f95b 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8006152:	20c1      	movs	r0, #193	; 0xc1
 8006154:	f000 f958 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8006158:	2030      	movs	r0, #48	; 0x30
 800615a:	f000 f955 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800615e:	20ed      	movs	r0, #237	; 0xed
 8006160:	f000 f945 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8006164:	2064      	movs	r0, #100	; 0x64
 8006166:	f000 f94f 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800616a:	2003      	movs	r0, #3
 800616c:	f000 f94c 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8006170:	2012      	movs	r0, #18
 8006172:	f000 f949 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8006176:	2081      	movs	r0, #129	; 0x81
 8006178:	f000 f946 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800617c:	20e8      	movs	r0, #232	; 0xe8
 800617e:	f000 f936 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8006182:	2085      	movs	r0, #133	; 0x85
 8006184:	f000 f940 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006188:	2000      	movs	r0, #0
 800618a:	f000 f93d 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800618e:	2078      	movs	r0, #120	; 0x78
 8006190:	f000 f93a 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8006194:	20cb      	movs	r0, #203	; 0xcb
 8006196:	f000 f92a 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800619a:	2039      	movs	r0, #57	; 0x39
 800619c:	f000 f934 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80061a0:	202c      	movs	r0, #44	; 0x2c
 80061a2:	f000 f931 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80061a6:	2000      	movs	r0, #0
 80061a8:	f000 f92e 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80061ac:	2034      	movs	r0, #52	; 0x34
 80061ae:	f000 f92b 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80061b2:	2002      	movs	r0, #2
 80061b4:	f000 f928 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80061b8:	20f7      	movs	r0, #247	; 0xf7
 80061ba:	f000 f918 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80061be:	2020      	movs	r0, #32
 80061c0:	f000 f922 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80061c4:	20ea      	movs	r0, #234	; 0xea
 80061c6:	f000 f912 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80061ca:	2000      	movs	r0, #0
 80061cc:	f000 f91c 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80061d0:	2000      	movs	r0, #0
 80061d2:	f000 f919 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80061d6:	20b1      	movs	r0, #177	; 0xb1
 80061d8:	f000 f909 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80061dc:	2000      	movs	r0, #0
 80061de:	f000 f913 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80061e2:	201b      	movs	r0, #27
 80061e4:	f000 f910 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80061e8:	20b6      	movs	r0, #182	; 0xb6
 80061ea:	f000 f900 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80061ee:	200a      	movs	r0, #10
 80061f0:	f000 f90a 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80061f4:	20a2      	movs	r0, #162	; 0xa2
 80061f6:	f000 f907 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80061fa:	20c0      	movs	r0, #192	; 0xc0
 80061fc:	f000 f8f7 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8006200:	2010      	movs	r0, #16
 8006202:	f000 f901 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8006206:	20c1      	movs	r0, #193	; 0xc1
 8006208:	f000 f8f1 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800620c:	2010      	movs	r0, #16
 800620e:	f000 f8fb 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8006212:	20c5      	movs	r0, #197	; 0xc5
 8006214:	f000 f8eb 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8006218:	2045      	movs	r0, #69	; 0x45
 800621a:	f000 f8f5 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800621e:	2015      	movs	r0, #21
 8006220:	f000 f8f2 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8006224:	20c7      	movs	r0, #199	; 0xc7
 8006226:	f000 f8e2 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800622a:	2090      	movs	r0, #144	; 0x90
 800622c:	f000 f8ec 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8006230:	2036      	movs	r0, #54	; 0x36
 8006232:	f000 f8dc 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8006236:	20c8      	movs	r0, #200	; 0xc8
 8006238:	f000 f8e6 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800623c:	20f2      	movs	r0, #242	; 0xf2
 800623e:	f000 f8d6 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006242:	2000      	movs	r0, #0
 8006244:	f000 f8e0 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8006248:	20b0      	movs	r0, #176	; 0xb0
 800624a:	f000 f8d0 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800624e:	20c2      	movs	r0, #194	; 0xc2
 8006250:	f000 f8da 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006254:	20b6      	movs	r0, #182	; 0xb6
 8006256:	f000 f8ca 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800625a:	200a      	movs	r0, #10
 800625c:	f000 f8d4 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8006260:	20a7      	movs	r0, #167	; 0xa7
 8006262:	f000 f8d1 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8006266:	2027      	movs	r0, #39	; 0x27
 8006268:	f000 f8ce 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800626c:	2004      	movs	r0, #4
 800626e:	f000 f8cb 	bl	8006408 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8006272:	202a      	movs	r0, #42	; 0x2a
 8006274:	f000 f8bb 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006278:	2000      	movs	r0, #0
 800627a:	f000 f8c5 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800627e:	2000      	movs	r0, #0
 8006280:	f000 f8c2 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006284:	2000      	movs	r0, #0
 8006286:	f000 f8bf 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800628a:	20ef      	movs	r0, #239	; 0xef
 800628c:	f000 f8bc 	bl	8006408 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8006290:	202b      	movs	r0, #43	; 0x2b
 8006292:	f000 f8ac 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006296:	2000      	movs	r0, #0
 8006298:	f000 f8b6 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800629c:	2000      	movs	r0, #0
 800629e:	f000 f8b3 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80062a2:	2001      	movs	r0, #1
 80062a4:	f000 f8b0 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80062a8:	203f      	movs	r0, #63	; 0x3f
 80062aa:	f000 f8ad 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80062ae:	20f6      	movs	r0, #246	; 0xf6
 80062b0:	f000 f89d 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80062b4:	2001      	movs	r0, #1
 80062b6:	f000 f8a7 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80062ba:	2000      	movs	r0, #0
 80062bc:	f000 f8a4 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80062c0:	2006      	movs	r0, #6
 80062c2:	f000 f8a1 	bl	8006408 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80062c6:	202c      	movs	r0, #44	; 0x2c
 80062c8:	f000 f891 	bl	80063ee <ili9341_WriteReg>
  LCD_Delay(200);
 80062cc:	20c8      	movs	r0, #200	; 0xc8
 80062ce:	f000 ff2f 	bl	8007130 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80062d2:	2026      	movs	r0, #38	; 0x26
 80062d4:	f000 f88b 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80062d8:	2001      	movs	r0, #1
 80062da:	f000 f895 	bl	8006408 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80062de:	20e0      	movs	r0, #224	; 0xe0
 80062e0:	f000 f885 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80062e4:	200f      	movs	r0, #15
 80062e6:	f000 f88f 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80062ea:	2029      	movs	r0, #41	; 0x29
 80062ec:	f000 f88c 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80062f0:	2024      	movs	r0, #36	; 0x24
 80062f2:	f000 f889 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80062f6:	200c      	movs	r0, #12
 80062f8:	f000 f886 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80062fc:	200e      	movs	r0, #14
 80062fe:	f000 f883 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006302:	2009      	movs	r0, #9
 8006304:	f000 f880 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8006308:	204e      	movs	r0, #78	; 0x4e
 800630a:	f000 f87d 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800630e:	2078      	movs	r0, #120	; 0x78
 8006310:	f000 f87a 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8006314:	203c      	movs	r0, #60	; 0x3c
 8006316:	f000 f877 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800631a:	2009      	movs	r0, #9
 800631c:	f000 f874 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8006320:	2013      	movs	r0, #19
 8006322:	f000 f871 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8006326:	2005      	movs	r0, #5
 8006328:	f000 f86e 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800632c:	2017      	movs	r0, #23
 800632e:	f000 f86b 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006332:	2011      	movs	r0, #17
 8006334:	f000 f868 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006338:	2000      	movs	r0, #0
 800633a:	f000 f865 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800633e:	20e1      	movs	r0, #225	; 0xe1
 8006340:	f000 f855 	bl	80063ee <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006344:	2000      	movs	r0, #0
 8006346:	f000 f85f 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800634a:	2016      	movs	r0, #22
 800634c:	f000 f85c 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8006350:	201b      	movs	r0, #27
 8006352:	f000 f859 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006356:	2004      	movs	r0, #4
 8006358:	f000 f856 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800635c:	2011      	movs	r0, #17
 800635e:	f000 f853 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8006362:	2007      	movs	r0, #7
 8006364:	f000 f850 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8006368:	2031      	movs	r0, #49	; 0x31
 800636a:	f000 f84d 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800636e:	2033      	movs	r0, #51	; 0x33
 8006370:	f000 f84a 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8006374:	2042      	movs	r0, #66	; 0x42
 8006376:	f000 f847 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800637a:	2005      	movs	r0, #5
 800637c:	f000 f844 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8006380:	200c      	movs	r0, #12
 8006382:	f000 f841 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8006386:	200a      	movs	r0, #10
 8006388:	f000 f83e 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800638c:	2028      	movs	r0, #40	; 0x28
 800638e:	f000 f83b 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8006392:	202f      	movs	r0, #47	; 0x2f
 8006394:	f000 f838 	bl	8006408 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8006398:	200f      	movs	r0, #15
 800639a:	f000 f835 	bl	8006408 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800639e:	2011      	movs	r0, #17
 80063a0:	f000 f825 	bl	80063ee <ili9341_WriteReg>
  LCD_Delay(200);
 80063a4:	20c8      	movs	r0, #200	; 0xc8
 80063a6:	f000 fec3 	bl	8007130 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80063aa:	2029      	movs	r0, #41	; 0x29
 80063ac:	f000 f81f 	bl	80063ee <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80063b0:	202c      	movs	r0, #44	; 0x2c
 80063b2:	f000 f81c 	bl	80063ee <ili9341_WriteReg>
}
 80063b6:	bf00      	nop
 80063b8:	bd80      	pop	{r7, pc}

080063ba <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80063be:	f000 fdc9 	bl	8006f54 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80063c2:	2103      	movs	r1, #3
 80063c4:	20d3      	movs	r0, #211	; 0xd3
 80063c6:	f000 f82c 	bl	8006422 <ili9341_ReadData>
 80063ca:	4603      	mov	r3, r0
 80063cc:	b29b      	uxth	r3, r3
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80063d6:	2029      	movs	r0, #41	; 0x29
 80063d8:	f000 f809 	bl	80063ee <ili9341_WriteReg>
}
 80063dc:	bf00      	nop
 80063de:	bd80      	pop	{r7, pc}

080063e0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80063e4:	2028      	movs	r0, #40	; 0x28
 80063e6:	f000 f802 	bl	80063ee <ili9341_WriteReg>
}
 80063ea:	bf00      	nop
 80063ec:	bd80      	pop	{r7, pc}

080063ee <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	4603      	mov	r3, r0
 80063f6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fe44 	bl	8007088 <LCD_IO_WriteReg>
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fe15 	bl	8007044 <LCD_IO_WriteData>
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	4603      	mov	r3, r0
 800642a:	460a      	mov	r2, r1
 800642c:	80fb      	strh	r3, [r7, #6]
 800642e:	4613      	mov	r3, r2
 8006430:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8006432:	797a      	ldrb	r2, [r7, #5]
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fe47 	bl	80070cc <LCD_IO_ReadData>
 800643e:	4603      	mov	r3, r0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800644c:	23f0      	movs	r3, #240	; 0xf0
}
 800644e:	4618      	mov	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800645c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8006460:	4618      	mov	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <as7265x_init>:
static void MX_TIM7_Init(void);
static void MX_DMA2D_Init(void);
/* USER CODE BEGIN PFP */

void as7265x_init(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
	as7265x_indicator_disable(&hi2c3);
 8006470:	4806      	ldr	r0, [pc, #24]	; (800648c <as7265x_init+0x20>)
 8006472:	f7ff fdb6 	bl	8005fe2 <as7265x_indicator_disable>
	as7265x_set_gain (&hi2c3, AS7265X_GAIN_16X);
 8006476:	2102      	movs	r1, #2
 8006478:	4804      	ldr	r0, [pc, #16]	; (800648c <as7265x_init+0x20>)
 800647a:	f7ff fd81 	bl	8005f80 <as7265x_set_gain>
	as7265x_set_integration_time (&hi2c3, 59); //integration_time: 1-255 in 2.8ms units
 800647e:	213b      	movs	r1, #59	; 0x3b
 8006480:	4802      	ldr	r0, [pc, #8]	; (800648c <as7265x_init+0x20>)
 8006482:	f7ff fd9e 	bl	8005fc2 <as7265x_set_integration_time>
}
 8006486:	bf00      	nop
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	200003fc 	.word	0x200003fc

08006490 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b5b0      	push	{r4, r5, r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4ac3      	ldr	r2, [pc, #780]	; (80067ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	f040 8277 	bne.w	8006992 <HAL_TIM_PeriodElapsedCallback+0x502>
	    {
		as7265x_set_measurement_mode(&hi2c3, AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT);
 80064a4:	2103      	movs	r1, #3
 80064a6:	48c2      	ldr	r0, [pc, #776]	; (80067b0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80064a8:	f7ff fdb7 	bl	800601a <as7265x_set_measurement_mode>
//
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80064ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064b0:	48c0      	ldr	r0, [pc, #768]	; (80067b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80064b2:	f7fc f8ae 	bl	8002612 <HAL_GPIO_TogglePin>

		while (!as7265x_is_data_available(&hi2c3))
 80064b6:	bf00      	nop
 80064b8:	48bd      	ldr	r0, [pc, #756]	; (80067b0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80064ba:	f7ff fd40 	bl	8005f3e <as7265x_is_data_available>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0f9      	beq.n	80064b8 <HAL_TIM_PeriodElapsedCallback+0x28>
		    {

		    }
//
		as7265x_get_all_calibrated_values(&hi2c3, &calibrated_channels);
 80064c4:	49bc      	ldr	r1, [pc, #752]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80064c6:	48ba      	ldr	r0, [pc, #744]	; (80067b0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80064c8:	f7ff fdff 	bl	80060ca <as7265x_get_all_calibrated_values>

		calibrated_channel.nm410 = calibrated_channels.channel[12];
 80064cc:	4bba      	ldr	r3, [pc, #744]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	4aba      	ldr	r2, [pc, #744]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80064d2:	6013      	str	r3, [r2, #0]
		calibrated_channel.nm435 = calibrated_channels.channel[13];
 80064d4:	4bb8      	ldr	r3, [pc, #736]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80064d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d8:	4ab8      	ldr	r2, [pc, #736]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80064da:	6053      	str	r3, [r2, #4]
		calibrated_channel.nm460 = calibrated_channels.channel[14];
 80064dc:	4bb6      	ldr	r3, [pc, #728]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	4ab6      	ldr	r2, [pc, #728]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80064e2:	6093      	str	r3, [r2, #8]
		calibrated_channel.nm485 = calibrated_channels.channel[15];
 80064e4:	4bb4      	ldr	r3, [pc, #720]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	4ab4      	ldr	r2, [pc, #720]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80064ea:	60d3      	str	r3, [r2, #12]
		calibrated_channel.nm510 = calibrated_channels.channel[16];
 80064ec:	4bb2      	ldr	r3, [pc, #712]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	4ab2      	ldr	r2, [pc, #712]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80064f2:	6113      	str	r3, [r2, #16]
		calibrated_channel.nm535 = calibrated_channels.channel[17];
 80064f4:	4bb0      	ldr	r3, [pc, #704]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80064f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f8:	4ab0      	ldr	r2, [pc, #704]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80064fa:	6153      	str	r3, [r2, #20]

		calibrated_channel.nm560 = calibrated_channels.channel[6];
 80064fc:	4bae      	ldr	r3, [pc, #696]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	4aae      	ldr	r2, [pc, #696]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006502:	6193      	str	r3, [r2, #24]
		calibrated_channel.nm585 = calibrated_channels.channel[7];
 8006504:	4bac      	ldr	r3, [pc, #688]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	4aac      	ldr	r2, [pc, #688]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800650a:	61d3      	str	r3, [r2, #28]
		calibrated_channel.nm610 = calibrated_channels.channel[0];
 800650c:	4baa      	ldr	r3, [pc, #680]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4aaa      	ldr	r2, [pc, #680]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006512:	6213      	str	r3, [r2, #32]
		calibrated_channel.nm645 = calibrated_channels.channel[8];
 8006514:	4ba8      	ldr	r3, [pc, #672]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	4aa8      	ldr	r2, [pc, #672]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800651a:	6253      	str	r3, [r2, #36]	; 0x24
		calibrated_channel.nm680 = calibrated_channels.channel[1];
 800651c:	4ba6      	ldr	r3, [pc, #664]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	4aa6      	ldr	r2, [pc, #664]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006522:	6293      	str	r3, [r2, #40]	; 0x28
		calibrated_channel.nm705 = calibrated_channels.channel[9];
 8006524:	4ba4      	ldr	r3, [pc, #656]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	4aa4      	ldr	r2, [pc, #656]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800652a:	62d3      	str	r3, [r2, #44]	; 0x2c

		calibrated_channel.nm730 = calibrated_channels.channel[2];
 800652c:	4ba2      	ldr	r3, [pc, #648]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4aa2      	ldr	r2, [pc, #648]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006532:	6313      	str	r3, [r2, #48]	; 0x30
		calibrated_channel.nm760 = calibrated_channels.channel[3];
 8006534:	4ba0      	ldr	r3, [pc, #640]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4aa0      	ldr	r2, [pc, #640]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800653a:	6353      	str	r3, [r2, #52]	; 0x34
		calibrated_channel.nm810 = calibrated_channels.channel[4];
 800653c:	4b9e      	ldr	r3, [pc, #632]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	4a9e      	ldr	r2, [pc, #632]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006542:	6393      	str	r3, [r2, #56]	; 0x38
		calibrated_channel.nm860 = calibrated_channels.channel[5];
 8006544:	4b9c      	ldr	r3, [pc, #624]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	4a9c      	ldr	r2, [pc, #624]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800654a:	63d3      	str	r3, [r2, #60]	; 0x3c
		calibrated_channel.nm900 = calibrated_channels.channel[10];
 800654c:	4b9a      	ldr	r3, [pc, #616]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	4a9a      	ldr	r2, [pc, #616]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006552:	6413      	str	r3, [r2, #64]	; 0x40
		calibrated_channel.nm940 = calibrated_channels.channel[11];
 8006554:	4b98      	ldr	r3, [pc, #608]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4a98      	ldr	r2, [pc, #608]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800655a:	6453      	str	r3, [r2, #68]	; 0x44

		calibrated_channel.intensity = ((calibrated_channel.nm410 + calibrated_channel.nm435)*12.5) + ((calibrated_channel.nm435 + calibrated_channel.nm460)*12.5) +
 800655c:	4b97      	ldr	r3, [pc, #604]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800655e:	ed93 7a00 	vldr	s14, [r3]
 8006562:	4b96      	ldr	r3, [pc, #600]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006564:	edd3 7a01 	vldr	s15, [r3, #4]
 8006568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800656c:	ee17 0a90 	vmov	r0, s15
 8006570:	f7f9 fffa 	bl	8000568 <__aeabi_f2d>
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	4b91      	ldr	r3, [pc, #580]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800657a:	f7fa f84d 	bl	8000618 <__aeabi_dmul>
 800657e:	4603      	mov	r3, r0
 8006580:	460c      	mov	r4, r1
 8006582:	4625      	mov	r5, r4
 8006584:	461c      	mov	r4, r3
 8006586:	4b8d      	ldr	r3, [pc, #564]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006588:	ed93 7a01 	vldr	s14, [r3, #4]
 800658c:	4b8b      	ldr	r3, [pc, #556]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800658e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006596:	ee17 0a90 	vmov	r0, s15
 800659a:	f7f9 ffe5 	bl	8000568 <__aeabi_f2d>
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	4b87      	ldr	r3, [pc, #540]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80065a4:	f7fa f838 	bl	8000618 <__aeabi_dmul>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4620      	mov	r0, r4
 80065ae:	4629      	mov	r1, r5
 80065b0:	f7f9 fe7c 	bl	80002ac <__adddf3>
 80065b4:	4603      	mov	r3, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	4625      	mov	r5, r4
 80065ba:	461c      	mov	r4, r3
			((calibrated_channel.nm460 + calibrated_channel.nm485)*12.5) + ((calibrated_channel.nm485 + calibrated_channel.nm510)*12.5) +
 80065bc:	4b7f      	ldr	r3, [pc, #508]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80065be:	ed93 7a02 	vldr	s14, [r3, #8]
 80065c2:	4b7e      	ldr	r3, [pc, #504]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80065c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80065c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065cc:	ee17 0a90 	vmov	r0, s15
 80065d0:	f7f9 ffca 	bl	8000568 <__aeabi_f2d>
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	4b79      	ldr	r3, [pc, #484]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80065da:	f7fa f81d 	bl	8000618 <__aeabi_dmul>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
		calibrated_channel.intensity = ((calibrated_channel.nm410 + calibrated_channel.nm435)*12.5) + ((calibrated_channel.nm435 + calibrated_channel.nm460)*12.5) +
 80065e2:	4620      	mov	r0, r4
 80065e4:	4629      	mov	r1, r5
 80065e6:	f7f9 fe61 	bl	80002ac <__adddf3>
 80065ea:	4603      	mov	r3, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	4625      	mov	r5, r4
 80065f0:	461c      	mov	r4, r3
			((calibrated_channel.nm460 + calibrated_channel.nm485)*12.5) + ((calibrated_channel.nm485 + calibrated_channel.nm510)*12.5) +
 80065f2:	4b72      	ldr	r3, [pc, #456]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80065f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80065f8:	4b70      	ldr	r3, [pc, #448]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80065fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80065fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006602:	ee17 0a90 	vmov	r0, s15
 8006606:	f7f9 ffaf 	bl	8000568 <__aeabi_f2d>
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	4b6c      	ldr	r3, [pc, #432]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8006610:	f7fa f802 	bl	8000618 <__aeabi_dmul>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4620      	mov	r0, r4
 800661a:	4629      	mov	r1, r5
 800661c:	f7f9 fe46 	bl	80002ac <__adddf3>
 8006620:	4603      	mov	r3, r0
 8006622:	460c      	mov	r4, r1
 8006624:	4625      	mov	r5, r4
 8006626:	461c      	mov	r4, r3
			((calibrated_channel.nm510 + calibrated_channel.nm535)*12.5) + ((calibrated_channel.nm535 + calibrated_channel.nm560)*12.5) +
 8006628:	4b64      	ldr	r3, [pc, #400]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800662a:	ed93 7a04 	vldr	s14, [r3, #16]
 800662e:	4b63      	ldr	r3, [pc, #396]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006630:	edd3 7a05 	vldr	s15, [r3, #20]
 8006634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006638:	ee17 0a90 	vmov	r0, s15
 800663c:	f7f9 ff94 	bl	8000568 <__aeabi_f2d>
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	4b5e      	ldr	r3, [pc, #376]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8006646:	f7f9 ffe7 	bl	8000618 <__aeabi_dmul>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
			((calibrated_channel.nm460 + calibrated_channel.nm485)*12.5) + ((calibrated_channel.nm485 + calibrated_channel.nm510)*12.5) +
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7f9 fe2b 	bl	80002ac <__adddf3>
 8006656:	4603      	mov	r3, r0
 8006658:	460c      	mov	r4, r1
 800665a:	4625      	mov	r5, r4
 800665c:	461c      	mov	r4, r3
			((calibrated_channel.nm510 + calibrated_channel.nm535)*12.5) + ((calibrated_channel.nm535 + calibrated_channel.nm560)*12.5) +
 800665e:	4b57      	ldr	r3, [pc, #348]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006660:	ed93 7a05 	vldr	s14, [r3, #20]
 8006664:	4b55      	ldr	r3, [pc, #340]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006666:	edd3 7a06 	vldr	s15, [r3, #24]
 800666a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800666e:	ee17 0a90 	vmov	r0, s15
 8006672:	f7f9 ff79 	bl	8000568 <__aeabi_f2d>
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	4b51      	ldr	r3, [pc, #324]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800667c:	f7f9 ffcc 	bl	8000618 <__aeabi_dmul>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7f9 fe10 	bl	80002ac <__adddf3>
 800668c:	4603      	mov	r3, r0
 800668e:	460c      	mov	r4, r1
 8006690:	4625      	mov	r5, r4
 8006692:	461c      	mov	r4, r3
			((calibrated_channel.nm560 + calibrated_channel.nm585)*12.5) + ((calibrated_channel.nm585 + calibrated_channel.nm610)*12.5) +
 8006694:	4b49      	ldr	r3, [pc, #292]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006696:	ed93 7a06 	vldr	s14, [r3, #24]
 800669a:	4b48      	ldr	r3, [pc, #288]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800669c:	edd3 7a07 	vldr	s15, [r3, #28]
 80066a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066a4:	ee17 0a90 	vmov	r0, s15
 80066a8:	f7f9 ff5e 	bl	8000568 <__aeabi_f2d>
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	4b43      	ldr	r3, [pc, #268]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80066b2:	f7f9 ffb1 	bl	8000618 <__aeabi_dmul>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
			((calibrated_channel.nm510 + calibrated_channel.nm535)*12.5) + ((calibrated_channel.nm535 + calibrated_channel.nm560)*12.5) +
 80066ba:	4620      	mov	r0, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	f7f9 fdf5 	bl	80002ac <__adddf3>
 80066c2:	4603      	mov	r3, r0
 80066c4:	460c      	mov	r4, r1
 80066c6:	4625      	mov	r5, r4
 80066c8:	461c      	mov	r4, r3
			((calibrated_channel.nm560 + calibrated_channel.nm585)*12.5) + ((calibrated_channel.nm585 + calibrated_channel.nm610)*12.5) +
 80066ca:	4b3c      	ldr	r3, [pc, #240]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80066cc:	ed93 7a07 	vldr	s14, [r3, #28]
 80066d0:	4b3a      	ldr	r3, [pc, #232]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80066d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80066d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066da:	ee17 0a90 	vmov	r0, s15
 80066de:	f7f9 ff43 	bl	8000568 <__aeabi_f2d>
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	4b36      	ldr	r3, [pc, #216]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80066e8:	f7f9 ff96 	bl	8000618 <__aeabi_dmul>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4620      	mov	r0, r4
 80066f2:	4629      	mov	r1, r5
 80066f4:	f7f9 fdda 	bl	80002ac <__adddf3>
 80066f8:	4603      	mov	r3, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	4625      	mov	r5, r4
 80066fe:	461c      	mov	r4, r3
			((calibrated_channel.nm610 + calibrated_channel.nm645)*12.5) + ((calibrated_channel.nm645 + calibrated_channel.nm680)*12.5) +
 8006700:	4b2e      	ldr	r3, [pc, #184]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006702:	ed93 7a08 	vldr	s14, [r3, #32]
 8006706:	4b2d      	ldr	r3, [pc, #180]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006708:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800670c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006710:	ee17 0a90 	vmov	r0, s15
 8006714:	f7f9 ff28 	bl	8000568 <__aeabi_f2d>
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	4b28      	ldr	r3, [pc, #160]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800671e:	f7f9 ff7b 	bl	8000618 <__aeabi_dmul>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
			((calibrated_channel.nm560 + calibrated_channel.nm585)*12.5) + ((calibrated_channel.nm585 + calibrated_channel.nm610)*12.5) +
 8006726:	4620      	mov	r0, r4
 8006728:	4629      	mov	r1, r5
 800672a:	f7f9 fdbf 	bl	80002ac <__adddf3>
 800672e:	4603      	mov	r3, r0
 8006730:	460c      	mov	r4, r1
 8006732:	4625      	mov	r5, r4
 8006734:	461c      	mov	r4, r3
			((calibrated_channel.nm610 + calibrated_channel.nm645)*12.5) + ((calibrated_channel.nm645 + calibrated_channel.nm680)*12.5) +
 8006736:	4b21      	ldr	r3, [pc, #132]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006738:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800673c:	4b1f      	ldr	r3, [pc, #124]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800673e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006746:	ee17 0a90 	vmov	r0, s15
 800674a:	f7f9 ff0d 	bl	8000568 <__aeabi_f2d>
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	4b1b      	ldr	r3, [pc, #108]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8006754:	f7f9 ff60 	bl	8000618 <__aeabi_dmul>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4620      	mov	r0, r4
 800675e:	4629      	mov	r1, r5
 8006760:	f7f9 fda4 	bl	80002ac <__adddf3>
 8006764:	4603      	mov	r3, r0
 8006766:	460c      	mov	r4, r1
 8006768:	4625      	mov	r5, r4
 800676a:	461c      	mov	r4, r3
			((calibrated_channel.nm680 + calibrated_channel.nm705)*12.5) + ((calibrated_channel.nm705 + calibrated_channel.nm730)*12.5) +
 800676c:	4b13      	ldr	r3, [pc, #76]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800676e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006772:	4b12      	ldr	r3, [pc, #72]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8006774:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800677c:	ee17 0a90 	vmov	r0, s15
 8006780:	f7f9 fef2 	bl	8000568 <__aeabi_f2d>
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800678a:	f7f9 ff45 	bl	8000618 <__aeabi_dmul>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
			((calibrated_channel.nm610 + calibrated_channel.nm645)*12.5) + ((calibrated_channel.nm645 + calibrated_channel.nm680)*12.5) +
 8006792:	4620      	mov	r0, r4
 8006794:	4629      	mov	r1, r5
 8006796:	f7f9 fd89 	bl	80002ac <__adddf3>
 800679a:	4603      	mov	r3, r0
 800679c:	460c      	mov	r4, r1
 800679e:	4625      	mov	r5, r4
 80067a0:	461c      	mov	r4, r3
			((calibrated_channel.nm680 + calibrated_channel.nm705)*12.5) + ((calibrated_channel.nm705 + calibrated_channel.nm730)*12.5) +
 80067a2:	4b06      	ldr	r3, [pc, #24]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80067a4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80067a8:	e00c      	b.n	80067c4 <HAL_TIM_PeriodElapsedCallback+0x334>
 80067aa:	bf00      	nop
 80067ac:	40001400 	.word	0x40001400
 80067b0:	200003fc 	.word	0x200003fc
 80067b4:	40021800 	.word	0x40021800
 80067b8:	20000498 	.word	0x20000498
 80067bc:	200006a8 	.word	0x200006a8
 80067c0:	40290000 	.word	0x40290000
 80067c4:	4b78      	ldr	r3, [pc, #480]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80067c6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80067ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067ce:	ee17 0a90 	vmov	r0, s15
 80067d2:	f7f9 fec9 	bl	8000568 <__aeabi_f2d>
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	4b74      	ldr	r3, [pc, #464]	; (80069ac <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80067dc:	f7f9 ff1c 	bl	8000618 <__aeabi_dmul>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7f9 fd60 	bl	80002ac <__adddf3>
 80067ec:	4603      	mov	r3, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	4625      	mov	r5, r4
 80067f2:	461c      	mov	r4, r3
			((calibrated_channel.nm730 + calibrated_channel.nm760)*12.5) + ((calibrated_channel.nm760 + calibrated_channel.nm810)*12.5) +
 80067f4:	4b6c      	ldr	r3, [pc, #432]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80067f6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80067fa:	4b6b      	ldr	r3, [pc, #428]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80067fc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006804:	ee17 0a90 	vmov	r0, s15
 8006808:	f7f9 feae 	bl	8000568 <__aeabi_f2d>
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	4b66      	ldr	r3, [pc, #408]	; (80069ac <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8006812:	f7f9 ff01 	bl	8000618 <__aeabi_dmul>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
			((calibrated_channel.nm680 + calibrated_channel.nm705)*12.5) + ((calibrated_channel.nm705 + calibrated_channel.nm730)*12.5) +
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7f9 fd45 	bl	80002ac <__adddf3>
 8006822:	4603      	mov	r3, r0
 8006824:	460c      	mov	r4, r1
 8006826:	4625      	mov	r5, r4
 8006828:	461c      	mov	r4, r3
			((calibrated_channel.nm730 + calibrated_channel.nm760)*12.5) + ((calibrated_channel.nm760 + calibrated_channel.nm810)*12.5) +
 800682a:	4b5f      	ldr	r3, [pc, #380]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800682c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006830:	4b5d      	ldr	r3, [pc, #372]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8006832:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800683a:	ee17 0a90 	vmov	r0, s15
 800683e:	f7f9 fe93 	bl	8000568 <__aeabi_f2d>
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	4b59      	ldr	r3, [pc, #356]	; (80069ac <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8006848:	f7f9 fee6 	bl	8000618 <__aeabi_dmul>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4620      	mov	r0, r4
 8006852:	4629      	mov	r1, r5
 8006854:	f7f9 fd2a 	bl	80002ac <__adddf3>
 8006858:	4603      	mov	r3, r0
 800685a:	460c      	mov	r4, r1
 800685c:	4625      	mov	r5, r4
 800685e:	461c      	mov	r4, r3
			((calibrated_channel.nm810 + calibrated_channel.nm860)*12.5) + ((calibrated_channel.nm860 + calibrated_channel.nm900)*12.5) +
 8006860:	4b51      	ldr	r3, [pc, #324]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8006862:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8006866:	4b50      	ldr	r3, [pc, #320]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8006868:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800686c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006870:	ee17 0a90 	vmov	r0, s15
 8006874:	f7f9 fe78 	bl	8000568 <__aeabi_f2d>
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	4b4b      	ldr	r3, [pc, #300]	; (80069ac <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800687e:	f7f9 fecb 	bl	8000618 <__aeabi_dmul>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
			((calibrated_channel.nm730 + calibrated_channel.nm760)*12.5) + ((calibrated_channel.nm760 + calibrated_channel.nm810)*12.5) +
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	f7f9 fd0f 	bl	80002ac <__adddf3>
 800688e:	4603      	mov	r3, r0
 8006890:	460c      	mov	r4, r1
 8006892:	4625      	mov	r5, r4
 8006894:	461c      	mov	r4, r3
			((calibrated_channel.nm810 + calibrated_channel.nm860)*12.5) + ((calibrated_channel.nm860 + calibrated_channel.nm900)*12.5) +
 8006896:	4b44      	ldr	r3, [pc, #272]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8006898:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800689c:	4b42      	ldr	r3, [pc, #264]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800689e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80068a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068a6:	ee17 0a90 	vmov	r0, s15
 80068aa:	f7f9 fe5d 	bl	8000568 <__aeabi_f2d>
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	4b3e      	ldr	r3, [pc, #248]	; (80069ac <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80068b4:	f7f9 feb0 	bl	8000618 <__aeabi_dmul>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4620      	mov	r0, r4
 80068be:	4629      	mov	r1, r5
 80068c0:	f7f9 fcf4 	bl	80002ac <__adddf3>
 80068c4:	4603      	mov	r3, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	4625      	mov	r5, r4
 80068ca:	461c      	mov	r4, r3
			((calibrated_channel.nm900 + calibrated_channel.nm940)*12.5);
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80068ce:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80068d2:	4b35      	ldr	r3, [pc, #212]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80068d4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80068d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068dc:	ee17 0a90 	vmov	r0, s15
 80068e0:	f7f9 fe42 	bl	8000568 <__aeabi_f2d>
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	4b30      	ldr	r3, [pc, #192]	; (80069ac <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80068ea:	f7f9 fe95 	bl	8000618 <__aeabi_dmul>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
			((calibrated_channel.nm810 + calibrated_channel.nm860)*12.5) + ((calibrated_channel.nm860 + calibrated_channel.nm900)*12.5) +
 80068f2:	4620      	mov	r0, r4
 80068f4:	4629      	mov	r1, r5
 80068f6:	f7f9 fcd9 	bl	80002ac <__adddf3>
 80068fa:	4603      	mov	r3, r0
 80068fc:	460c      	mov	r4, r1
 80068fe:	4618      	mov	r0, r3
 8006900:	4621      	mov	r1, r4
 8006902:	f7fa f961 	bl	8000bc8 <__aeabi_d2f>
 8006906:	4602      	mov	r2, r0
		calibrated_channel.intensity = ((calibrated_channel.nm410 + calibrated_channel.nm435)*12.5) + ((calibrated_channel.nm435 + calibrated_channel.nm460)*12.5) +
 8006908:	4b27      	ldr	r3, [pc, #156]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800690a:	649a      	str	r2, [r3, #72]	; 0x48

		calibrated_channel.intensity /= GAIN;
 800690c:	4b26      	ldr	r3, [pc, #152]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800690e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8006912:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8006916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800691a:	4b23      	ldr	r3, [pc, #140]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800691c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		calibrated_channel.intensity /=SURFACE_DIFFUSER;
 8006920:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8006922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006924:	4618      	mov	r0, r3
 8006926:	f7f9 fe1f 	bl	8000568 <__aeabi_f2d>
 800692a:	a31d      	add	r3, pc, #116	; (adr r3, 80069a0 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 ff9c 	bl	800086c <__aeabi_ddiv>
 8006934:	4603      	mov	r3, r0
 8006936:	460c      	mov	r4, r1
 8006938:	4618      	mov	r0, r3
 800693a:	4621      	mov	r1, r4
 800693c:	f7fa f944 	bl	8000bc8 <__aeabi_d2f>
 8006940:	4602      	mov	r2, r0
 8006942:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8006944:	649a      	str	r2, [r3, #72]	; 0x48

		calibrated_channel.intensity_per_bw = calibrated_channel.intensity / lambda_50nm;
 8006946:	4b18      	ldr	r3, [pc, #96]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8006948:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800694c:	eddf 6a18 	vldr	s13, [pc, #96]	; 80069b0 <HAL_TIM_PeriodElapsedCallback+0x520>
 8006950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006954:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8006956:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		     sprintf(buffer_lcd,"I:%3.2f",calibrated_channel.intensity_per_bw);
 800695a:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800695c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695e:	4618      	mov	r0, r3
 8006960:	f7f9 fe02 	bl	8000568 <__aeabi_f2d>
 8006964:	4603      	mov	r3, r0
 8006966:	460c      	mov	r4, r1
 8006968:	461a      	mov	r2, r3
 800696a:	4623      	mov	r3, r4
 800696c:	4911      	ldr	r1, [pc, #68]	; (80069b4 <HAL_TIM_PeriodElapsedCallback+0x524>)
 800696e:	4812      	ldr	r0, [pc, #72]	; (80069b8 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8006970:	f002 fae2 	bl	8008f38 <siprintf>
		     BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	f000 fd7a 	bl	8007470 <BSP_LCD_Clear>

		     BSP_LCD_DisplayStringAt(0, 80, buffer_lcd , CENTER_MODE);
 800697c:	2301      	movs	r3, #1
 800697e:	4a0e      	ldr	r2, [pc, #56]	; (80069b8 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8006980:	2150      	movs	r1, #80	; 0x50
 8006982:	2000      	movs	r0, #0
 8006984:	f000 fde0 	bl	8007548 <BSP_LCD_DisplayStringAt>

//		as7265x_order_calibrated_channels(&hi2c2, &calibrated_channels);
//
//		as7265x_get_all_raw_values(&hi2c2, &raw_channels);
//
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8006988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800698c:	480b      	ldr	r0, [pc, #44]	; (80069bc <HAL_TIM_PeriodElapsedCallback+0x52c>)
 800698e:	f7fb fe40 	bl	8002612 <HAL_GPIO_TogglePin>
	    }
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bdb0      	pop	{r4, r5, r7, pc}
 800699a:	bf00      	nop
 800699c:	f3af 8000 	nop.w
 80069a0:	f5c28f5c 	.word	0xf5c28f5c
 80069a4:	40185c28 	.word	0x40185c28
 80069a8:	200006a8 	.word	0x200006a8
 80069ac:	40290000 	.word	0x40290000
 80069b0:	42480000 	.word	0x42480000
 80069b4:	0800a700 	.word	0x0800a700
 80069b8:	2000072c 	.word	0x2000072c
 80069bc:	40021800 	.word	0x40021800

080069c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80069c4:	f7fa fad0 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069c8:	f000 f866 	bl	8006a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069cc:	f000 f964 	bl	8006c98 <MX_GPIO_Init>
//  MX_DMA_Init();
//  MX_FMC_Init();
  MX_I2C3_Init();
 80069d0:	f000 f8ec 	bl	8006bac <MX_I2C3_Init>
//  MX_LTDC_Init();
//  MX_SPI5_Init();
  MX_TIM7_Init();
 80069d4:	f000 f92a 	bl	8006c2c <MX_TIM7_Init>
//  MX_DMA2D_Init();
  /* USER CODE BEGIN 2 */
  as7265x_init();
 80069d8:	f7ff fd48 	bl	800646c <as7265x_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_LCD_Init();
 80069dc:	f000 fbb4 	bl	8007148 <BSP_LCD_Init>

   /* Layer2 Init */
   BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80069e0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80069e4:	2001      	movs	r0, #1
 80069e6:	f000 fc31 	bl	800724c <BSP_LCD_LayerDefaultInit>
   /* Set Foreground Layer */
   BSP_LCD_SelectLayer(1);
 80069ea:	2001      	movs	r0, #1
 80069ec:	f000 fc92 	bl	8007314 <BSP_LCD_SelectLayer>
   /* Clear the LCD */
   BSP_LCD_Clear(LCD_COLOR_WHITE);
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	f000 fd3c 	bl	8007470 <BSP_LCD_Clear>
   BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 80069f8:	f04f 31ff 	mov.w	r1, #4294967295
 80069fc:	2001      	movs	r0, #1
 80069fe:	f000 fcd7 	bl	80073b0 <BSP_LCD_SetColorKeying>
   BSP_LCD_SetLayerVisible(1, DISABLE);
 8006a02:	2100      	movs	r1, #0
 8006a04:	2001      	movs	r0, #1
 8006a06:	f000 fc95 	bl	8007334 <BSP_LCD_SetLayerVisible>

   /* Layer1 Init */
   BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8006a0a:	491f      	ldr	r1, [pc, #124]	; (8006a88 <main+0xc8>)
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f000 fc1d 	bl	800724c <BSP_LCD_LayerDefaultInit>

   /* Set Foreground Layer */
   BSP_LCD_SelectLayer(0);
 8006a12:	2000      	movs	r0, #0
 8006a14:	f000 fc7e 	bl	8007314 <BSP_LCD_SelectLayer>

   /* Enable The LCD */
   BSP_LCD_DisplayOn();
 8006a18:	f000 fe50 	bl	80076bc <BSP_LCD_DisplayOn>

   /* Clear the LCD */
   BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a20:	f000 fd26 	bl	8007470 <BSP_LCD_Clear>

   BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8006a24:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006a28:	f000 fcee 	bl	8007408 <BSP_LCD_SetBackColor>
   BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8006a2c:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8006a30:	f000 fcd2 	bl	80073d8 <BSP_LCD_SetTextColor>

   BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"Loading...", CENTER_MODE);
 8006a34:	f000 fbfe 	bl	8007234 <BSP_LCD_GetYSize>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b5f      	subs	r3, #95	; 0x5f
 8006a3e:	b299      	uxth	r1, r3
 8006a40:	2301      	movs	r3, #1
 8006a42:	4a12      	ldr	r2, [pc, #72]	; (8006a8c <main+0xcc>)
 8006a44:	2000      	movs	r0, #0
 8006a46:	f000 fd7f 	bl	8007548 <BSP_LCD_DisplayStringAt>

   HAL_Delay(2000);
 8006a4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006a4e:	f7fa fafd 	bl	800104c <HAL_Delay>

   BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006a52:	f04f 30ff 	mov.w	r0, #4294967295
 8006a56:	f000 fd0b 	bl	8007470 <BSP_LCD_Clear>

   BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"START", CENTER_MODE);
 8006a5a:	f000 fbeb 	bl	8007234 <BSP_LCD_GetYSize>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b5f      	subs	r3, #95	; 0x5f
 8006a64:	b299      	uxth	r1, r3
 8006a66:	2301      	movs	r3, #1
 8006a68:	4a09      	ldr	r2, [pc, #36]	; (8006a90 <main+0xd0>)
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	f000 fd6c 	bl	8007548 <BSP_LCD_DisplayStringAt>


   HAL_Delay(1000);
 8006a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a74:	f7fa faea 	bl	800104c <HAL_Delay>

   BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	f000 fcf8 	bl	8007470 <BSP_LCD_Clear>


   HAL_TIM_Base_Start_IT(&htim7);
 8006a80:	4804      	ldr	r0, [pc, #16]	; (8006a94 <main+0xd4>)
 8006a82:	f7fe fe30 	bl	80056e6 <HAL_TIM_Base_Start_IT>


  while (1)
 8006a86:	e7fe      	b.n	8006a86 <main+0xc6>
 8006a88:	d0130000 	.word	0xd0130000
 8006a8c:	0800a708 	.word	0x0800a708
 8006a90:	0800a714 	.word	0x0800a714
 8006a94:	20000734 	.word	0x20000734

08006a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b0a0      	sub	sp, #128	; 0x80
 8006a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006aa2:	2230      	movs	r2, #48	; 0x30
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 fde1 	bl	800866e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006aac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	605a      	str	r2, [r3, #4]
 8006ab6:	609a      	str	r2, [r3, #8]
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	2230      	movs	r2, #48	; 0x30
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 fdd2 	bl	800866e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	4b35      	ldr	r3, [pc, #212]	; (8006ba4 <SystemClock_Config+0x10c>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	4a34      	ldr	r2, [pc, #208]	; (8006ba4 <SystemClock_Config+0x10c>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8006ada:	4b32      	ldr	r3, [pc, #200]	; (8006ba4 <SystemClock_Config+0x10c>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	60bb      	str	r3, [r7, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	607b      	str	r3, [r7, #4]
 8006aea:	4b2f      	ldr	r3, [pc, #188]	; (8006ba8 <SystemClock_Config+0x110>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a2e      	ldr	r2, [pc, #184]	; (8006ba8 <SystemClock_Config+0x110>)
 8006af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	4b2c      	ldr	r3, [pc, #176]	; (8006ba8 <SystemClock_Config+0x110>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006b02:	2301      	movs	r3, #1
 8006b04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b14:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006b16:	2304      	movs	r3, #4
 8006b18:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006b1a:	23b4      	movs	r3, #180	; 0xb4
 8006b1c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006b22:	2304      	movs	r3, #4
 8006b24:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fd f9e6 	bl	8003efc <HAL_RCC_OscConfig>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8006b36:	f000 f947 	bl	8006dc8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006b3a:	f7fd f98f 	bl	8003e5c <HAL_PWREx_EnableOverDrive>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8006b44:	f000 f940 	bl	8006dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006b48:	230f      	movs	r3, #15
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b50:	2300      	movs	r3, #0
 8006b52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006b54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006b58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006b60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b64:	2105      	movs	r1, #5
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fd fc0a 	bl	8004380 <HAL_RCC_ClockConfig>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8006b72:	f000 f929 	bl	8006dc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006b76:	2308      	movs	r3, #8
 8006b78:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8006b7a:	233c      	movs	r3, #60	; 0x3c
 8006b7c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8006b7e:	2305      	movs	r3, #5
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b86:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b88:	f107 030c 	add.w	r3, r7, #12
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fd fdd1 	bl	8004734 <HAL_RCCEx_PeriphCLKConfig>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <SystemClock_Config+0x104>
  {
    Error_Handler();
 8006b98:	f000 f916 	bl	8006dc8 <Error_Handler>
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3780      	adds	r7, #128	; 0x80
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	40007000 	.word	0x40007000

08006bac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006bb0:	4b1b      	ldr	r3, [pc, #108]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bb2:	4a1c      	ldr	r2, [pc, #112]	; (8006c24 <MX_I2C3_Init+0x78>)
 8006bb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8006bb6:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bb8:	4a1b      	ldr	r2, [pc, #108]	; (8006c28 <MX_I2C3_Init+0x7c>)
 8006bba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006bbc:	4b18      	ldr	r3, [pc, #96]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006bc2:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006bc8:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006bce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006bd0:	4b13      	ldr	r3, [pc, #76]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006bd6:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006bdc:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006be2:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006be8:	480d      	ldr	r0, [pc, #52]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bea:	f7fb fd2d 	bl	8002648 <HAL_I2C_Init>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006bf4:	f000 f8e8 	bl	8006dc8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4809      	ldr	r0, [pc, #36]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006bfc:	f7fc fca3 	bl	8003546 <HAL_I2CEx_ConfigAnalogFilter>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8006c06:	f000 f8df 	bl	8006dc8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4804      	ldr	r0, [pc, #16]	; (8006c20 <MX_I2C3_Init+0x74>)
 8006c0e:	f7fc fcd6 	bl	80035be <HAL_I2CEx_ConfigDigitalFilter>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8006c18:	f000 f8d6 	bl	8006dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006c1c:	bf00      	nop
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	200003fc 	.word	0x200003fc
 8006c24:	40005c00 	.word	0x40005c00
 8006c28:	000186a0 	.word	0x000186a0

08006c2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c32:	463b      	mov	r3, r7
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006c3a:	4b15      	ldr	r3, [pc, #84]	; (8006c90 <MX_TIM7_Init+0x64>)
 8006c3c:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <MX_TIM7_Init+0x68>)
 8006c3e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 749;
 8006c40:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <MX_TIM7_Init+0x64>)
 8006c42:	f240 22ed 	movw	r2, #749	; 0x2ed
 8006c46:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c48:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <MX_TIM7_Init+0x64>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000;
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <MX_TIM7_Init+0x64>)
 8006c50:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006c54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c56:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <MX_TIM7_Init+0x64>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006c5c:	480c      	ldr	r0, [pc, #48]	; (8006c90 <MX_TIM7_Init+0x64>)
 8006c5e:	f7fe fd17 	bl	8005690 <HAL_TIM_Base_Init>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8006c68:	f000 f8ae 	bl	8006dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006c74:	463b      	mov	r3, r7
 8006c76:	4619      	mov	r1, r3
 8006c78:	4805      	ldr	r0, [pc, #20]	; (8006c90 <MX_TIM7_Init+0x64>)
 8006c7a:	f7fe ff29 	bl	8005ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8006c84:	f000 f8a0 	bl	8006dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000734 	.word	0x20000734
 8006c94:	40001400 	.word	0x40001400

08006c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08e      	sub	sp, #56	; 0x38
 8006c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	605a      	str	r2, [r3, #4]
 8006ca8:	609a      	str	r2, [r3, #8]
 8006caa:	60da      	str	r2, [r3, #12]
 8006cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	623b      	str	r3, [r7, #32]
 8006cb2:	4b43      	ldr	r3, [pc, #268]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	4a42      	ldr	r2, [pc, #264]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006cb8:	f043 0320 	orr.w	r3, r3, #32
 8006cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cbe:	4b40      	ldr	r3, [pc, #256]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	623b      	str	r3, [r7, #32]
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	4b3c      	ldr	r3, [pc, #240]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	4a3b      	ldr	r2, [pc, #236]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cda:	4b39      	ldr	r3, [pc, #228]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	4b35      	ldr	r3, [pc, #212]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	4a34      	ldr	r2, [pc, #208]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006cf0:	f043 0304 	orr.w	r3, r3, #4
 8006cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf6:	4b32      	ldr	r3, [pc, #200]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	4b2e      	ldr	r3, [pc, #184]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	4a2d      	ldr	r2, [pc, #180]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	6313      	str	r3, [r2, #48]	; 0x30
 8006d12:	4b2b      	ldr	r3, [pc, #172]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	4b27      	ldr	r3, [pc, #156]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d28:	f043 0302 	orr.w	r3, r3, #2
 8006d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2e:	4b24      	ldr	r3, [pc, #144]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d48:	6313      	str	r3, [r2, #48]	; 0x30
 8006d4a:	4b1d      	ldr	r3, [pc, #116]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	4b19      	ldr	r3, [pc, #100]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	4a18      	ldr	r2, [pc, #96]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d60:	f043 0310 	orr.w	r3, r3, #16
 8006d64:	6313      	str	r3, [r2, #48]	; 0x30
 8006d66:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	60bb      	str	r3, [r7, #8]
 8006d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d72:	2300      	movs	r3, #0
 8006d74:	607b      	str	r3, [r7, #4]
 8006d76:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	4a11      	ldr	r2, [pc, #68]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d7c:	f043 0308 	orr.w	r3, r3, #8
 8006d80:	6313      	str	r3, [r2, #48]	; 0x30
 8006d82:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <MX_GPIO_Init+0x128>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	607b      	str	r3, [r7, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8006d94:	480b      	ldr	r0, [pc, #44]	; (8006dc4 <MX_GPIO_Init+0x12c>)
 8006d96:	f7fb fc23 	bl	80025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8006d9a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006da0:	2301      	movs	r3, #1
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006da8:	2300      	movs	r3, #0
 8006daa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db0:	4619      	mov	r1, r3
 8006db2:	4804      	ldr	r0, [pc, #16]	; (8006dc4 <MX_GPIO_Init+0x12c>)
 8006db4:	f7fb f960 	bl	8002078 <HAL_GPIO_Init>

}
 8006db8:	bf00      	nop
 8006dba:	3738      	adds	r7, #56	; 0x38
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	40021800 	.word	0x40021800

08006dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006dcc:	bf00      	nop
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8006ddc:	4819      	ldr	r0, [pc, #100]	; (8006e44 <SPIx_Init+0x6c>)
 8006dde:	f7fe fb37 	bl	8005450 <HAL_SPI_GetState>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d12b      	bne.n	8006e40 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8006de8:	4b16      	ldr	r3, [pc, #88]	; (8006e44 <SPIx_Init+0x6c>)
 8006dea:	4a17      	ldr	r2, [pc, #92]	; (8006e48 <SPIx_Init+0x70>)
 8006dec:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006dee:	4b15      	ldr	r3, [pc, #84]	; (8006e44 <SPIx_Init+0x6c>)
 8006df0:	2218      	movs	r2, #24
 8006df2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8006df4:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <SPIx_Init+0x6c>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <SPIx_Init+0x6c>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8006e00:	4b10      	ldr	r3, [pc, #64]	; (8006e44 <SPIx_Init+0x6c>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8006e06:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <SPIx_Init+0x6c>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <SPIx_Init+0x6c>)
 8006e0e:	2207      	movs	r2, #7
 8006e10:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <SPIx_Init+0x6c>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <SPIx_Init+0x6c>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <SPIx_Init+0x6c>)
 8006e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e24:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8006e26:	4b07      	ldr	r3, [pc, #28]	; (8006e44 <SPIx_Init+0x6c>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <SPIx_Init+0x6c>)
 8006e2e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006e32:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8006e34:	4803      	ldr	r0, [pc, #12]	; (8006e44 <SPIx_Init+0x6c>)
 8006e36:	f000 f853 	bl	8006ee0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8006e3a:	4802      	ldr	r0, [pc, #8]	; (8006e44 <SPIx_Init+0x6c>)
 8006e3c:	f7fd fe9d 	bl	8004b7a <HAL_SPI_Init>
  } 
}
 8006e40:	bf00      	nop
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000240 	.word	0x20000240
 8006e48:	40015000 	.word	0x40015000

08006e4c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <SPIx_Read+0x38>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f107 0108 	add.w	r1, r7, #8
 8006e66:	4808      	ldr	r0, [pc, #32]	; (8006e88 <SPIx_Read+0x3c>)
 8006e68:	f7fe f847 	bl	8004efa <HAL_SPI_Receive>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8006e76:	f000 f827 	bl	8006ec8 <SPIx_Error>
  }
  
  return readvalue;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000048 	.word	0x20000048
 8006e88:	20000240 	.word	0x20000240

08006e8c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <SPIx_Write+0x34>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	1db9      	adds	r1, r7, #6
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	4808      	ldr	r0, [pc, #32]	; (8006ec4 <SPIx_Write+0x38>)
 8006ea4:	f7fd fef5 	bl	8004c92 <HAL_SPI_Transmit>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8006eb2:	f000 f809 	bl	8006ec8 <SPIx_Error>
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000048 	.word	0x20000048
 8006ec4:	20000240 	.word	0x20000240

08006ec8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8006ecc:	4803      	ldr	r0, [pc, #12]	; (8006edc <SPIx_Error+0x14>)
 8006ece:	f7fd feb8 	bl	8004c42 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8006ed2:	f7ff ff81 	bl	8006dd8 <SPIx_Init>
}
 8006ed6:	bf00      	nop
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20000240 	.word	0x20000240

08006ee0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	; 0x28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	4b17      	ldr	r3, [pc, #92]	; (8006f4c <SPIx_MspInit+0x6c>)
 8006eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef0:	4a16      	ldr	r2, [pc, #88]	; (8006f4c <SPIx_MspInit+0x6c>)
 8006ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8006ef8:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <SPIx_MspInit+0x6c>)
 8006efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	4b10      	ldr	r3, [pc, #64]	; (8006f4c <SPIx_MspInit+0x6c>)
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0c:	4a0f      	ldr	r2, [pc, #60]	; (8006f4c <SPIx_MspInit+0x6c>)
 8006f0e:	f043 0320 	orr.w	r3, r3, #32
 8006f12:	6313      	str	r3, [r2, #48]	; 0x30
 8006f14:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <SPIx_MspInit+0x6c>)
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8006f20:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8006f26:	2302      	movs	r3, #2
 8006f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8006f32:	2305      	movs	r3, #5
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8006f36:	f107 0314 	add.w	r3, r7, #20
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4804      	ldr	r0, [pc, #16]	; (8006f50 <SPIx_MspInit+0x70>)
 8006f3e:	f7fb f89b 	bl	8002078 <HAL_GPIO_Init>
}
 8006f42:	bf00      	nop
 8006f44:	3728      	adds	r7, #40	; 0x28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40021400 	.word	0x40021400

08006f54 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8006f5a:	4b36      	ldr	r3, [pc, #216]	; (8007034 <LCD_IO_Init+0xe0>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d164      	bne.n	800702c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8006f62:	4b34      	ldr	r3, [pc, #208]	; (8007034 <LCD_IO_Init+0xe0>)
 8006f64:	2201      	movs	r2, #1
 8006f66:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60bb      	str	r3, [r7, #8]
 8006f6c:	4b32      	ldr	r3, [pc, #200]	; (8007038 <LCD_IO_Init+0xe4>)
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	4a31      	ldr	r2, [pc, #196]	; (8007038 <LCD_IO_Init+0xe4>)
 8006f72:	f043 0308 	orr.w	r3, r3, #8
 8006f76:	6313      	str	r3, [r2, #48]	; 0x30
 8006f78:	4b2f      	ldr	r3, [pc, #188]	; (8007038 <LCD_IO_Init+0xe4>)
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	60bb      	str	r3, [r7, #8]
 8006f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8006f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8006f92:	2302      	movs	r3, #2
 8006f94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8006f96:	f107 030c 	add.w	r3, r7, #12
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4827      	ldr	r0, [pc, #156]	; (800703c <LCD_IO_Init+0xe8>)
 8006f9e:	f7fb f86b 	bl	8002078 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	4b24      	ldr	r3, [pc, #144]	; (8007038 <LCD_IO_Init+0xe4>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	4a23      	ldr	r2, [pc, #140]	; (8007038 <LCD_IO_Init+0xe4>)
 8006fac:	f043 0308 	orr.w	r3, r3, #8
 8006fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fb2:	4b21      	ldr	r3, [pc, #132]	; (8007038 <LCD_IO_Init+0xe4>)
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	607b      	str	r3, [r7, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8006fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8006fd0:	f107 030c 	add.w	r3, r7, #12
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	4819      	ldr	r0, [pc, #100]	; (800703c <LCD_IO_Init+0xe8>)
 8006fd8:	f7fb f84e 	bl	8002078 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8006fdc:	2300      	movs	r3, #0
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	4b15      	ldr	r3, [pc, #84]	; (8007038 <LCD_IO_Init+0xe4>)
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	4a14      	ldr	r2, [pc, #80]	; (8007038 <LCD_IO_Init+0xe4>)
 8006fe6:	f043 0304 	orr.w	r3, r3, #4
 8006fea:	6313      	str	r3, [r2, #48]	; 0x30
 8006fec:	4b12      	ldr	r3, [pc, #72]	; (8007038 <LCD_IO_Init+0xe4>)
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	603b      	str	r3, [r7, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8007004:	2302      	movs	r3, #2
 8007006:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8007008:	f107 030c 	add.w	r3, r7, #12
 800700c:	4619      	mov	r1, r3
 800700e:	480c      	ldr	r0, [pc, #48]	; (8007040 <LCD_IO_Init+0xec>)
 8007010:	f7fb f832 	bl	8002078 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8007014:	2200      	movs	r2, #0
 8007016:	2104      	movs	r1, #4
 8007018:	4809      	ldr	r0, [pc, #36]	; (8007040 <LCD_IO_Init+0xec>)
 800701a:	f7fb fae1 	bl	80025e0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800701e:	2201      	movs	r2, #1
 8007020:	2104      	movs	r1, #4
 8007022:	4807      	ldr	r0, [pc, #28]	; (8007040 <LCD_IO_Init+0xec>)
 8007024:	f7fb fadc 	bl	80025e0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8007028:	f7ff fed6 	bl	8006dd8 <SPIx_Init>
  }
}
 800702c:	bf00      	nop
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20000298 	.word	0x20000298
 8007038:	40023800 	.word	0x40023800
 800703c:	40020c00 	.word	0x40020c00
 8007040:	40020800 	.word	0x40020800

08007044 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800704e:	2201      	movs	r2, #1
 8007050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007054:	480a      	ldr	r0, [pc, #40]	; (8007080 <LCD_IO_WriteData+0x3c>)
 8007056:	f7fb fac3 	bl	80025e0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800705a:	2200      	movs	r2, #0
 800705c:	2104      	movs	r1, #4
 800705e:	4809      	ldr	r0, [pc, #36]	; (8007084 <LCD_IO_WriteData+0x40>)
 8007060:	f7fb fabe 	bl	80025e0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff ff10 	bl	8006e8c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800706c:	2201      	movs	r2, #1
 800706e:	2104      	movs	r1, #4
 8007070:	4804      	ldr	r0, [pc, #16]	; (8007084 <LCD_IO_WriteData+0x40>)
 8007072:	f7fb fab5 	bl	80025e0 <HAL_GPIO_WritePin>
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40020c00 	.word	0x40020c00
 8007084:	40020800 	.word	0x40020800

08007088 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8007092:	2200      	movs	r2, #0
 8007094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007098:	480a      	ldr	r0, [pc, #40]	; (80070c4 <LCD_IO_WriteReg+0x3c>)
 800709a:	f7fb faa1 	bl	80025e0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800709e:	2200      	movs	r2, #0
 80070a0:	2104      	movs	r1, #4
 80070a2:	4809      	ldr	r0, [pc, #36]	; (80070c8 <LCD_IO_WriteReg+0x40>)
 80070a4:	f7fb fa9c 	bl	80025e0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff feed 	bl	8006e8c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80070b2:	2201      	movs	r2, #1
 80070b4:	2104      	movs	r1, #4
 80070b6:	4804      	ldr	r0, [pc, #16]	; (80070c8 <LCD_IO_WriteReg+0x40>)
 80070b8:	f7fb fa92 	bl	80025e0 <HAL_GPIO_WritePin>
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40020c00 	.word	0x40020c00
 80070c8:	40020800 	.word	0x40020800

080070cc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	460a      	mov	r2, r1
 80070d6:	80fb      	strh	r3, [r7, #6]
 80070d8:	4613      	mov	r3, r2
 80070da:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80070e0:	2200      	movs	r2, #0
 80070e2:	2104      	movs	r1, #4
 80070e4:	4810      	ldr	r0, [pc, #64]	; (8007128 <LCD_IO_ReadData+0x5c>)
 80070e6:	f7fb fa7b 	bl	80025e0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80070ea:	2200      	movs	r2, #0
 80070ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070f0:	480e      	ldr	r0, [pc, #56]	; (800712c <LCD_IO_ReadData+0x60>)
 80070f2:	f7fb fa75 	bl	80025e0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80070f6:	88fb      	ldrh	r3, [r7, #6]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff fec7 	bl	8006e8c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80070fe:	797b      	ldrb	r3, [r7, #5]
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fea3 	bl	8006e4c <SPIx_Read>
 8007106:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8007108:	2201      	movs	r2, #1
 800710a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800710e:	4807      	ldr	r0, [pc, #28]	; (800712c <LCD_IO_ReadData+0x60>)
 8007110:	f7fb fa66 	bl	80025e0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8007114:	2201      	movs	r2, #1
 8007116:	2104      	movs	r1, #4
 8007118:	4803      	ldr	r0, [pc, #12]	; (8007128 <LCD_IO_ReadData+0x5c>)
 800711a:	f7fb fa61 	bl	80025e0 <HAL_GPIO_WritePin>
  
  return readvalue;
 800711e:	68fb      	ldr	r3, [r7, #12]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40020800 	.word	0x40020800
 800712c:	40020c00 	.word	0x40020c00

08007130 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7f9 ff87 	bl	800104c <HAL_Delay>
}
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800714c:	4b2d      	ldr	r3, [pc, #180]	; (8007204 <BSP_LCD_Init+0xbc>)
 800714e:	4a2e      	ldr	r2, [pc, #184]	; (8007208 <BSP_LCD_Init+0xc0>)
 8007150:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8007152:	4b2c      	ldr	r3, [pc, #176]	; (8007204 <BSP_LCD_Init+0xbc>)
 8007154:	2209      	movs	r2, #9
 8007156:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8007158:	4b2a      	ldr	r3, [pc, #168]	; (8007204 <BSP_LCD_Init+0xbc>)
 800715a:	2201      	movs	r2, #1
 800715c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800715e:	4b29      	ldr	r3, [pc, #164]	; (8007204 <BSP_LCD_Init+0xbc>)
 8007160:	221d      	movs	r2, #29
 8007162:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8007164:	4b27      	ldr	r3, [pc, #156]	; (8007204 <BSP_LCD_Init+0xbc>)
 8007166:	2203      	movs	r2, #3
 8007168:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800716a:	4b26      	ldr	r3, [pc, #152]	; (8007204 <BSP_LCD_Init+0xbc>)
 800716c:	f240 120d 	movw	r2, #269	; 0x10d
 8007170:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8007172:	4b24      	ldr	r3, [pc, #144]	; (8007204 <BSP_LCD_Init+0xbc>)
 8007174:	f240 1243 	movw	r2, #323	; 0x143
 8007178:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800717a:	4b22      	ldr	r3, [pc, #136]	; (8007204 <BSP_LCD_Init+0xbc>)
 800717c:	f240 1217 	movw	r2, #279	; 0x117
 8007180:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8007182:	4b20      	ldr	r3, [pc, #128]	; (8007204 <BSP_LCD_Init+0xbc>)
 8007184:	f240 1247 	movw	r2, #327	; 0x147
 8007188:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800718a:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <BSP_LCD_Init+0xbc>)
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8007192:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <BSP_LCD_Init+0xbc>)
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800719a:	4b1a      	ldr	r3, [pc, #104]	; (8007204 <BSP_LCD_Init+0xbc>)
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80071a2:	4b1a      	ldr	r3, [pc, #104]	; (800720c <BSP_LCD_Init+0xc4>)
 80071a4:	2208      	movs	r2, #8
 80071a6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80071a8:	4b18      	ldr	r3, [pc, #96]	; (800720c <BSP_LCD_Init+0xc4>)
 80071aa:	22c0      	movs	r2, #192	; 0xc0
 80071ac:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80071ae:	4b17      	ldr	r3, [pc, #92]	; (800720c <BSP_LCD_Init+0xc4>)
 80071b0:	2204      	movs	r2, #4
 80071b2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80071b4:	4b15      	ldr	r3, [pc, #84]	; (800720c <BSP_LCD_Init+0xc4>)
 80071b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071ba:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80071bc:	4813      	ldr	r0, [pc, #76]	; (800720c <BSP_LCD_Init+0xc4>)
 80071be:	f7fd fab9 	bl	8004734 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80071c2:	4b10      	ldr	r3, [pc, #64]	; (8007204 <BSP_LCD_Init+0xbc>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80071c8:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <BSP_LCD_Init+0xbc>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80071ce:	4b0d      	ldr	r3, [pc, #52]	; (8007204 <BSP_LCD_Init+0xbc>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80071d4:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <BSP_LCD_Init+0xbc>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80071da:	f000 fa7f 	bl	80076dc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80071de:	4809      	ldr	r0, [pc, #36]	; (8007204 <BSP_LCD_Init+0xbc>)
 80071e0:	f7fc fa2c 	bl	800363c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80071e4:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <BSP_LCD_Init+0xc8>)
 80071e6:	4a0b      	ldr	r2, [pc, #44]	; (8007214 <BSP_LCD_Init+0xcc>)
 80071e8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80071ea:	4b09      	ldr	r3, [pc, #36]	; (8007210 <BSP_LCD_Init+0xc8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80071f2:	f000 fc61 	bl	8007ab8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80071f6:	4808      	ldr	r0, [pc, #32]	; (8007218 <BSP_LCD_Init+0xd0>)
 80071f8:	f000 f920 	bl	800743c <BSP_LCD_SetFont>

  return LCD_OK;
 80071fc:	2300      	movs	r3, #0
}  
 80071fe:	4618      	mov	r0, r3
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	200007bc 	.word	0x200007bc
 8007208:	40016800 	.word	0x40016800
 800720c:	200002dc 	.word	0x200002dc
 8007210:	20000864 	.word	0x20000864
 8007214:	20000010 	.word	0x20000010
 8007218:	20000008 	.word	0x20000008

0800721c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8007220:	4b03      	ldr	r3, [pc, #12]	; (8007230 <BSP_LCD_GetXSize+0x14>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	4798      	blx	r3
 8007228:	4603      	mov	r3, r0
}
 800722a:	4618      	mov	r0, r3
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000864 	.word	0x20000864

08007234 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8007238:	4b03      	ldr	r3, [pc, #12]	; (8007248 <BSP_LCD_GetYSize+0x14>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723e:	4798      	blx	r3
 8007240:	4603      	mov	r3, r0
}
 8007242:	4618      	mov	r0, r3
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000864 	.word	0x20000864

0800724c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800724c:	b580      	push	{r7, lr}
 800724e:	b090      	sub	sp, #64	; 0x40
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	6039      	str	r1, [r7, #0]
 8007256:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800725c:	f7ff ffde 	bl	800721c <BSP_LCD_GetXSize>
 8007260:	4603      	mov	r3, r0
 8007262:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8007268:	f7ff ffe4 	bl	8007234 <BSP_LCD_GetYSize>
 800726c:	4603      	mov	r3, r0
 800726e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007270:	2300      	movs	r3, #0
 8007272:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8007278:	23ff      	movs	r3, #255	; 0xff
 800727a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007298:	2307      	movs	r3, #7
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800729c:	f7ff ffbe 	bl	800721c <BSP_LCD_GetXSize>
 80072a0:	4603      	mov	r3, r0
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80072a4:	f7ff ffc6 	bl	8007234 <BSP_LCD_GetYSize>
 80072a8:	4603      	mov	r3, r0
 80072aa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80072ac:	88fa      	ldrh	r2, [r7, #6]
 80072ae:	f107 030c 	add.w	r3, r7, #12
 80072b2:	4619      	mov	r1, r3
 80072b4:	4814      	ldr	r0, [pc, #80]	; (8007308 <BSP_LCD_LayerDefaultInit+0xbc>)
 80072b6:	f7fc fb53 	bl	8003960 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	4913      	ldr	r1, [pc, #76]	; (800730c <BSP_LCD_LayerDefaultInit+0xc0>)
 80072be:	4613      	mov	r3, r2
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	3304      	adds	r3, #4
 80072ca:	f04f 32ff 	mov.w	r2, #4294967295
 80072ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80072d0:	88fa      	ldrh	r2, [r7, #6]
 80072d2:	490e      	ldr	r1, [pc, #56]	; (800730c <BSP_LCD_LayerDefaultInit+0xc0>)
 80072d4:	4613      	mov	r3, r2
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	3308      	adds	r3, #8
 80072e0:	4a0b      	ldr	r2, [pc, #44]	; (8007310 <BSP_LCD_LayerDefaultInit+0xc4>)
 80072e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80072e4:	88fa      	ldrh	r2, [r7, #6]
 80072e6:	4909      	ldr	r1, [pc, #36]	; (800730c <BSP_LCD_LayerDefaultInit+0xc0>)
 80072e8:	4613      	mov	r3, r2
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80072f6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80072f8:	4803      	ldr	r0, [pc, #12]	; (8007308 <BSP_LCD_LayerDefaultInit+0xbc>)
 80072fa:	f7fc fbed 	bl	8003ad8 <HAL_LTDC_EnableDither>
}
 80072fe:	bf00      	nop
 8007300:	3740      	adds	r7, #64	; 0x40
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	200007bc 	.word	0x200007bc
 800730c:	20000310 	.word	0x20000310
 8007310:	20000008 	.word	0x20000008

08007314 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800731c:	4a04      	ldr	r2, [pc, #16]	; (8007330 <BSP_LCD_SelectLayer+0x1c>)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6013      	str	r3, [r2, #0]
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	2000030c 	.word	0x2000030c

08007334 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d112      	bne.n	800736c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8007346:	4b19      	ldr	r3, [pc, #100]	; (80073ac <BSP_LCD_SetLayerVisible+0x78>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	01db      	lsls	r3, r3, #7
 8007350:	4413      	add	r3, r2
 8007352:	3384      	adds	r3, #132	; 0x84
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a15      	ldr	r2, [pc, #84]	; (80073ac <BSP_LCD_SetLayerVisible+0x78>)
 8007358:	6812      	ldr	r2, [r2, #0]
 800735a:	4611      	mov	r1, r2
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	01d2      	lsls	r2, r2, #7
 8007360:	440a      	add	r2, r1
 8007362:	3284      	adds	r2, #132	; 0x84
 8007364:	f043 0301 	orr.w	r3, r3, #1
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	e011      	b.n	8007390 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 800736c:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <BSP_LCD_SetLayerVisible+0x78>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	01db      	lsls	r3, r3, #7
 8007376:	4413      	add	r3, r2
 8007378:	3384      	adds	r3, #132	; 0x84
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a0b      	ldr	r2, [pc, #44]	; (80073ac <BSP_LCD_SetLayerVisible+0x78>)
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	4611      	mov	r1, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	01d2      	lsls	r2, r2, #7
 8007386:	440a      	add	r2, r1
 8007388:	3284      	adds	r2, #132	; 0x84
 800738a:	f023 0301 	bic.w	r3, r3, #1
 800738e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8007390:	4b06      	ldr	r3, [pc, #24]	; (80073ac <BSP_LCD_SetLayerVisible+0x78>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <BSP_LCD_SetLayerVisible+0x78>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	200007bc 	.word	0x200007bc

080073b0 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	4805      	ldr	r0, [pc, #20]	; (80073d4 <BSP_LCD_SetColorKeying+0x24>)
 80073c0:	f7fc fb0c 	bl	80039dc <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4803      	ldr	r0, [pc, #12]	; (80073d4 <BSP_LCD_SetColorKeying+0x24>)
 80073c8:	f7fc fb4c 	bl	8003a64 <HAL_LTDC_EnableColorKeying>
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	200007bc 	.word	0x200007bc

080073d8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <BSP_LCD_SetTextColor+0x28>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	4907      	ldr	r1, [pc, #28]	; (8007404 <BSP_LCD_SetTextColor+0x2c>)
 80073e6:	4613      	mov	r3, r2
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	601a      	str	r2, [r3, #0]
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	2000030c 	.word	0x2000030c
 8007404:	20000310 	.word	0x20000310

08007408 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8007410:	4b08      	ldr	r3, [pc, #32]	; (8007434 <BSP_LCD_SetBackColor+0x2c>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4908      	ldr	r1, [pc, #32]	; (8007438 <BSP_LCD_SetBackColor+0x30>)
 8007416:	4613      	mov	r3, r2
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	440b      	add	r3, r1
 8007420:	3304      	adds	r3, #4
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	601a      	str	r2, [r3, #0]
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	2000030c 	.word	0x2000030c
 8007438:	20000310 	.word	0x20000310

0800743c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8007444:	4b08      	ldr	r3, [pc, #32]	; (8007468 <BSP_LCD_SetFont+0x2c>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	4908      	ldr	r1, [pc, #32]	; (800746c <BSP_LCD_SetFont+0x30>)
 800744a:	4613      	mov	r3, r2
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	3308      	adds	r3, #8
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	2000030c 	.word	0x2000030c
 800746c:	20000310 	.word	0x20000310

08007470 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8007470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007472:	b085      	sub	sp, #20
 8007474:	af02      	add	r7, sp, #8
 8007476:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8007478:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <BSP_LCD_Clear+0x48>)
 800747a:	681c      	ldr	r4, [r3, #0]
 800747c:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <BSP_LCD_Clear+0x48>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0e      	ldr	r2, [pc, #56]	; (80074bc <BSP_LCD_Clear+0x4c>)
 8007482:	2134      	movs	r1, #52	; 0x34
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	4413      	add	r3, r2
 800748a:	335c      	adds	r3, #92	; 0x5c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461d      	mov	r5, r3
 8007490:	f7ff fec4 	bl	800721c <BSP_LCD_GetXSize>
 8007494:	4606      	mov	r6, r0
 8007496:	f7ff fecd 	bl	8007234 <BSP_LCD_GetYSize>
 800749a:	4602      	mov	r2, r0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	2300      	movs	r3, #0
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	4632      	mov	r2, r6
 80074a8:	4629      	mov	r1, r5
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 facc 	bl	8007a48 <FillBuffer>
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b8:	2000030c 	.word	0x2000030c
 80074bc:	200007bc 	.word	0x200007bc

080074c0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80074c0:	b590      	push	{r4, r7, lr}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	80fb      	strh	r3, [r7, #6]
 80074ca:	460b      	mov	r3, r1
 80074cc:	80bb      	strh	r3, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80074d2:	4b1b      	ldr	r3, [pc, #108]	; (8007540 <BSP_LCD_DisplayChar+0x80>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	491b      	ldr	r1, [pc, #108]	; (8007544 <BSP_LCD_DisplayChar+0x84>)
 80074d8:	4613      	mov	r3, r2
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	3308      	adds	r3, #8
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6819      	ldr	r1, [r3, #0]
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80074ee:	4b14      	ldr	r3, [pc, #80]	; (8007540 <BSP_LCD_DisplayChar+0x80>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4c14      	ldr	r4, [pc, #80]	; (8007544 <BSP_LCD_DisplayChar+0x84>)
 80074f4:	4613      	mov	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4423      	add	r3, r4
 80074fe:	3308      	adds	r3, #8
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8007504:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8007508:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <BSP_LCD_DisplayChar+0x80>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	4c0d      	ldr	r4, [pc, #52]	; (8007544 <BSP_LCD_DisplayChar+0x84>)
 800750e:	4613      	mov	r3, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4423      	add	r3, r4
 8007518:	3308      	adds	r3, #8
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	889b      	ldrh	r3, [r3, #4]
 800751e:	3307      	adds	r3, #7
 8007520:	2b00      	cmp	r3, #0
 8007522:	da00      	bge.n	8007526 <BSP_LCD_DisplayChar+0x66>
 8007524:	3307      	adds	r3, #7
 8007526:	10db      	asrs	r3, r3, #3
 8007528:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800752c:	18ca      	adds	r2, r1, r3
 800752e:	88b9      	ldrh	r1, [r7, #4]
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f9ce 	bl	80078d4 <DrawChar>
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	bd90      	pop	{r4, r7, pc}
 8007540:	2000030c 	.word	0x2000030c
 8007544:	20000310 	.word	0x20000310

08007548 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8007548:	b5b0      	push	{r4, r5, r7, lr}
 800754a:	b088      	sub	sp, #32
 800754c:	af00      	add	r7, sp, #0
 800754e:	60ba      	str	r2, [r7, #8]
 8007550:	461a      	mov	r2, r3
 8007552:	4603      	mov	r3, r0
 8007554:	81fb      	strh	r3, [r7, #14]
 8007556:	460b      	mov	r3, r1
 8007558:	81bb      	strh	r3, [r7, #12]
 800755a:	4613      	mov	r3, r2
 800755c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800755e:	2301      	movs	r3, #1
 8007560:	83fb      	strh	r3, [r7, #30]
 8007562:	2300      	movs	r3, #0
 8007564:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	2300      	movs	r3, #0
 800756c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8007572:	e002      	b.n	800757a <BSP_LCD_DisplayStringAt+0x32>
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	3301      	adds	r3, #1
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	617a      	str	r2, [r7, #20]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f6      	bne.n	8007574 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8007586:	f7ff fe49 	bl	800721c <BSP_LCD_GetXSize>
 800758a:	4b4a      	ldr	r3, [pc, #296]	; (80076b4 <BSP_LCD_DisplayStringAt+0x16c>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	494a      	ldr	r1, [pc, #296]	; (80076b8 <BSP_LCD_DisplayStringAt+0x170>)
 8007590:	4613      	mov	r3, r2
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	3308      	adds	r3, #8
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	889b      	ldrh	r3, [r3, #4]
 80075a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80075a4:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d01c      	beq.n	80075e6 <BSP_LCD_DisplayStringAt+0x9e>
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d017      	beq.n	80075e0 <BSP_LCD_DisplayStringAt+0x98>
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d12e      	bne.n	8007612 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	1ad1      	subs	r1, r2, r3
 80075ba:	4b3e      	ldr	r3, [pc, #248]	; (80076b4 <BSP_LCD_DisplayStringAt+0x16c>)
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	483e      	ldr	r0, [pc, #248]	; (80076b8 <BSP_LCD_DisplayStringAt+0x170>)
 80075c0:	4613      	mov	r3, r2
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4403      	add	r3, r0
 80075ca:	3308      	adds	r3, #8
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	889b      	ldrh	r3, [r3, #4]
 80075d0:	fb03 f301 	mul.w	r3, r3, r1
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	89fb      	ldrh	r3, [r7, #14]
 80075da:	4413      	add	r3, r2
 80075dc:	83fb      	strh	r3, [r7, #30]
      break;
 80075de:	e01b      	b.n	8007618 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80075e0:	89fb      	ldrh	r3, [r7, #14]
 80075e2:	83fb      	strh	r3, [r7, #30]
      break;
 80075e4:	e018      	b.n	8007618 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	b299      	uxth	r1, r3
 80075ee:	4b31      	ldr	r3, [pc, #196]	; (80076b4 <BSP_LCD_DisplayStringAt+0x16c>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4831      	ldr	r0, [pc, #196]	; (80076b8 <BSP_LCD_DisplayStringAt+0x170>)
 80075f4:	4613      	mov	r3, r2
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4403      	add	r3, r0
 80075fe:	3308      	adds	r3, #8
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	889b      	ldrh	r3, [r3, #4]
 8007604:	fb11 f303 	smulbb	r3, r1, r3
 8007608:	b29a      	uxth	r2, r3
 800760a:	89fb      	ldrh	r3, [r7, #14]
 800760c:	4413      	add	r3, r2
 800760e:	83fb      	strh	r3, [r7, #30]
      break;
 8007610:	e002      	b.n	8007618 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8007612:	89fb      	ldrh	r3, [r7, #14]
 8007614:	83fb      	strh	r3, [r7, #30]
      break;
 8007616:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8007618:	e01a      	b.n	8007650 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	781a      	ldrb	r2, [r3, #0]
 800761e:	89b9      	ldrh	r1, [r7, #12]
 8007620:	8bfb      	ldrh	r3, [r7, #30]
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff ff4c 	bl	80074c0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8007628:	4b22      	ldr	r3, [pc, #136]	; (80076b4 <BSP_LCD_DisplayStringAt+0x16c>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	4922      	ldr	r1, [pc, #136]	; (80076b8 <BSP_LCD_DisplayStringAt+0x170>)
 800762e:	4613      	mov	r3, r2
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	440b      	add	r3, r1
 8007638:	3308      	adds	r3, #8
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	889a      	ldrh	r2, [r3, #4]
 800763e:	8bfb      	ldrh	r3, [r7, #30]
 8007640:	4413      	add	r3, r2
 8007642:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3301      	adds	r3, #1
 8007648:	60bb      	str	r3, [r7, #8]
    i++;
 800764a:	8bbb      	ldrh	r3, [r7, #28]
 800764c:	3301      	adds	r3, #1
 800764e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2dc      	uxtb	r4, r3
 800765e:	f7ff fddd 	bl	800721c <BSP_LCD_GetXSize>
 8007662:	4605      	mov	r5, r0
 8007664:	8bb9      	ldrh	r1, [r7, #28]
 8007666:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <BSP_LCD_DisplayStringAt+0x16c>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4813      	ldr	r0, [pc, #76]	; (80076b8 <BSP_LCD_DisplayStringAt+0x170>)
 800766c:	4613      	mov	r3, r2
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4403      	add	r3, r0
 8007676:	3308      	adds	r3, #8
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	889b      	ldrh	r3, [r3, #4]
 800767c:	fb03 f301 	mul.w	r3, r3, r1
 8007680:	1aeb      	subs	r3, r5, r3
 8007682:	b299      	uxth	r1, r3
 8007684:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <BSP_LCD_DisplayStringAt+0x16c>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	480b      	ldr	r0, [pc, #44]	; (80076b8 <BSP_LCD_DisplayStringAt+0x170>)
 800768a:	4613      	mov	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4403      	add	r3, r0
 8007694:	3308      	adds	r3, #8
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	889b      	ldrh	r3, [r3, #4]
 800769a:	4299      	cmp	r1, r3
 800769c:	bf2c      	ite	cs
 800769e:	2301      	movcs	r3, #1
 80076a0:	2300      	movcc	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	4023      	ands	r3, r4
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1b6      	bne.n	800761a <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80076ac:	bf00      	nop
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bdb0      	pop	{r4, r5, r7, pc}
 80076b4:	2000030c 	.word	0x2000030c
 80076b8:	20000310 	.word	0x20000310

080076bc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80076c0:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <BSP_LCD_DisplayOn+0x1c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80076ca:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <BSP_LCD_DisplayOn+0x1c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	4798      	blx	r3
  }
}
 80076d2:	bf00      	nop
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000864 	.word	0x20000864

080076dc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08e      	sub	sp, #56	; 0x38
 80076e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80076e2:	2300      	movs	r3, #0
 80076e4:	623b      	str	r3, [r7, #32]
 80076e6:	4b61      	ldr	r3, [pc, #388]	; (800786c <BSP_LCD_MspInit+0x190>)
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	4a60      	ldr	r2, [pc, #384]	; (800786c <BSP_LCD_MspInit+0x190>)
 80076ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076f0:	6453      	str	r3, [r2, #68]	; 0x44
 80076f2:	4b5e      	ldr	r3, [pc, #376]	; (800786c <BSP_LCD_MspInit+0x190>)
 80076f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076fa:	623b      	str	r3, [r7, #32]
 80076fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	4b5a      	ldr	r3, [pc, #360]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	4a59      	ldr	r2, [pc, #356]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007708:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800770c:	6313      	str	r3, [r2, #48]	; 0x30
 800770e:	4b57      	ldr	r3, [pc, #348]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007716:	61fb      	str	r3, [r7, #28]
 8007718:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800771a:	2300      	movs	r3, #0
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	4b53      	ldr	r3, [pc, #332]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	4a52      	ldr	r2, [pc, #328]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	6313      	str	r3, [r2, #48]	; 0x30
 800772a:	4b50      	ldr	r3, [pc, #320]	; (800786c <BSP_LCD_MspInit+0x190>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	4b4c      	ldr	r3, [pc, #304]	; (800786c <BSP_LCD_MspInit+0x190>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4a4b      	ldr	r2, [pc, #300]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007740:	f043 0302 	orr.w	r3, r3, #2
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b49      	ldr	r3, [pc, #292]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007752:	2300      	movs	r3, #0
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	4b45      	ldr	r3, [pc, #276]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	4a44      	ldr	r2, [pc, #272]	; (800786c <BSP_LCD_MspInit+0x190>)
 800775c:	f043 0304 	orr.w	r3, r3, #4
 8007760:	6313      	str	r3, [r2, #48]	; 0x30
 8007762:	4b42      	ldr	r3, [pc, #264]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	4b3e      	ldr	r3, [pc, #248]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	4a3d      	ldr	r2, [pc, #244]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007778:	f043 0308 	orr.w	r3, r3, #8
 800777c:	6313      	str	r3, [r2, #48]	; 0x30
 800777e:	4b3b      	ldr	r3, [pc, #236]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	60bb      	str	r3, [r7, #8]
 800778e:	4b37      	ldr	r3, [pc, #220]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	4a36      	ldr	r2, [pc, #216]	; (800786c <BSP_LCD_MspInit+0x190>)
 8007794:	f043 0320 	orr.w	r3, r3, #32
 8007798:	6313      	str	r3, [r2, #48]	; 0x30
 800779a:	4b34      	ldr	r3, [pc, #208]	; (800786c <BSP_LCD_MspInit+0x190>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80077a6:	2300      	movs	r3, #0
 80077a8:	607b      	str	r3, [r7, #4]
 80077aa:	4b30      	ldr	r3, [pc, #192]	; (800786c <BSP_LCD_MspInit+0x190>)
 80077ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ae:	4a2f      	ldr	r2, [pc, #188]	; (800786c <BSP_LCD_MspInit+0x190>)
 80077b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b4:	6313      	str	r3, [r2, #48]	; 0x30
 80077b6:	4b2d      	ldr	r3, [pc, #180]	; (800786c <BSP_LCD_MspInit+0x190>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	607b      	str	r3, [r7, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80077c2:	f641 0358 	movw	r3, #6232	; 0x1858
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80077c8:	2302      	movs	r3, #2
 80077ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80077d0:	2302      	movs	r3, #2
 80077d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80077d4:	230e      	movs	r3, #14
 80077d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80077d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077dc:	4619      	mov	r1, r3
 80077de:	4824      	ldr	r0, [pc, #144]	; (8007870 <BSP_LCD_MspInit+0x194>)
 80077e0:	f7fa fc4a 	bl	8002078 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80077e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80077ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ee:	4619      	mov	r1, r3
 80077f0:	4820      	ldr	r0, [pc, #128]	; (8007874 <BSP_LCD_MspInit+0x198>)
 80077f2:	f7fa fc41 	bl	8002078 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80077f6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80077fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007800:	4619      	mov	r1, r3
 8007802:	481d      	ldr	r0, [pc, #116]	; (8007878 <BSP_LCD_MspInit+0x19c>)
 8007804:	f7fa fc38 	bl	8002078 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8007808:	2348      	movs	r3, #72	; 0x48
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800780c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007810:	4619      	mov	r1, r3
 8007812:	481a      	ldr	r0, [pc, #104]	; (800787c <BSP_LCD_MspInit+0x1a0>)
 8007814:	f7fa fc30 	bl	8002078 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8007818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800781e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007822:	4619      	mov	r1, r3
 8007824:	4816      	ldr	r0, [pc, #88]	; (8007880 <BSP_LCD_MspInit+0x1a4>)
 8007826:	f7fa fc27 	bl	8002078 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800782a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8007830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007834:	4619      	mov	r1, r3
 8007836:	4813      	ldr	r0, [pc, #76]	; (8007884 <BSP_LCD_MspInit+0x1a8>)
 8007838:	f7fa fc1e 	bl	8002078 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800783c:	2303      	movs	r3, #3
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8007840:	2309      	movs	r3, #9
 8007842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007848:	4619      	mov	r1, r3
 800784a:	480a      	ldr	r0, [pc, #40]	; (8007874 <BSP_LCD_MspInit+0x198>)
 800784c:	f7fa fc14 	bl	8002078 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8007850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8007856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800785a:	4619      	mov	r1, r3
 800785c:	4809      	ldr	r0, [pc, #36]	; (8007884 <BSP_LCD_MspInit+0x1a8>)
 800785e:	f7fa fc0b 	bl	8002078 <HAL_GPIO_Init>
}
 8007862:	bf00      	nop
 8007864:	3738      	adds	r7, #56	; 0x38
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40023800 	.word	0x40023800
 8007870:	40020000 	.word	0x40020000
 8007874:	40020400 	.word	0x40020400
 8007878:	40020800 	.word	0x40020800
 800787c:	40020c00 	.word	0x40020c00
 8007880:	40021400 	.word	0x40021400
 8007884:	40021800 	.word	0x40021800

08007888 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8007888:	b5b0      	push	{r4, r5, r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	603a      	str	r2, [r7, #0]
 8007892:	80fb      	strh	r3, [r7, #6]
 8007894:	460b      	mov	r3, r1
 8007896:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <BSP_LCD_DrawPixel+0x44>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a0c      	ldr	r2, [pc, #48]	; (80078d0 <BSP_LCD_DrawPixel+0x48>)
 800789e:	2134      	movs	r1, #52	; 0x34
 80078a0:	fb01 f303 	mul.w	r3, r1, r3
 80078a4:	4413      	add	r3, r2
 80078a6:	335c      	adds	r3, #92	; 0x5c
 80078a8:	681c      	ldr	r4, [r3, #0]
 80078aa:	88bd      	ldrh	r5, [r7, #4]
 80078ac:	f7ff fcb6 	bl	800721c <BSP_LCD_GetXSize>
 80078b0:	4603      	mov	r3, r0
 80078b2:	fb03 f205 	mul.w	r2, r3, r5
 80078b6:	88fb      	ldrh	r3, [r7, #6]
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4423      	add	r3, r4
 80078be:	461a      	mov	r2, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	6013      	str	r3, [r2, #0]
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bdb0      	pop	{r4, r5, r7, pc}
 80078cc:	2000030c 	.word	0x2000030c
 80078d0:	200007bc 	.word	0x200007bc

080078d4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	603a      	str	r2, [r7, #0]
 80078de:	80fb      	strh	r3, [r7, #6]
 80078e0:	460b      	mov	r3, r1
 80078e2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80078f0:	4b53      	ldr	r3, [pc, #332]	; (8007a40 <DrawChar+0x16c>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	4953      	ldr	r1, [pc, #332]	; (8007a44 <DrawChar+0x170>)
 80078f6:	4613      	mov	r3, r2
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	440b      	add	r3, r1
 8007900:	3308      	adds	r3, #8
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8007908:	4b4d      	ldr	r3, [pc, #308]	; (8007a40 <DrawChar+0x16c>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	494d      	ldr	r1, [pc, #308]	; (8007a44 <DrawChar+0x170>)
 800790e:	4613      	mov	r3, r2
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	440b      	add	r3, r1
 8007918:	3308      	adds	r3, #8
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	889b      	ldrh	r3, [r3, #4]
 800791e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8007920:	8a3b      	ldrh	r3, [r7, #16]
 8007922:	3307      	adds	r3, #7
 8007924:	2b00      	cmp	r3, #0
 8007926:	da00      	bge.n	800792a <DrawChar+0x56>
 8007928:	3307      	adds	r3, #7
 800792a:	10db      	asrs	r3, r3, #3
 800792c:	b2db      	uxtb	r3, r3
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	b2da      	uxtb	r2, r3
 8007932:	8a3b      	ldrh	r3, [r7, #16]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800793a:	2300      	movs	r3, #0
 800793c:	61fb      	str	r3, [r7, #28]
 800793e:	e076      	b.n	8007a2e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8007940:	8a3b      	ldrh	r3, [r7, #16]
 8007942:	3307      	adds	r3, #7
 8007944:	2b00      	cmp	r3, #0
 8007946:	da00      	bge.n	800794a <DrawChar+0x76>
 8007948:	3307      	adds	r3, #7
 800794a:	10db      	asrs	r3, r3, #3
 800794c:	461a      	mov	r2, r3
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	fb03 f302 	mul.w	r3, r3, r2
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	4413      	add	r3, r2
 8007958:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800795a:	8a3b      	ldrh	r3, [r7, #16]
 800795c:	3307      	adds	r3, #7
 800795e:	2b00      	cmp	r3, #0
 8007960:	da00      	bge.n	8007964 <DrawChar+0x90>
 8007962:	3307      	adds	r3, #7
 8007964:	10db      	asrs	r3, r3, #3
 8007966:	2b01      	cmp	r3, #1
 8007968:	d002      	beq.n	8007970 <DrawChar+0x9c>
 800796a:	2b02      	cmp	r3, #2
 800796c:	d004      	beq.n	8007978 <DrawChar+0xa4>
 800796e:	e00c      	b.n	800798a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	617b      	str	r3, [r7, #20]
      break;
 8007976:	e016      	b.n	80079a6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	3201      	adds	r2, #1
 8007982:	7812      	ldrb	r2, [r2, #0]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
      break;
 8007988:	e00d      	b.n	80079a6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	041a      	lsls	r2, r3, #16
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3301      	adds	r3, #1
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	4313      	orrs	r3, r2
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	3202      	adds	r2, #2
 800799e:	7812      	ldrb	r2, [r2, #0]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]
      break;
 80079a4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	e036      	b.n	8007a1a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80079ac:	8a3a      	ldrh	r2, [r7, #16]
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	1ad2      	subs	r2, r2, r3
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	4413      	add	r3, r2
 80079b6:	3b01      	subs	r3, #1
 80079b8:	2201      	movs	r2, #1
 80079ba:	fa02 f303 	lsl.w	r3, r2, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	88fb      	ldrh	r3, [r7, #6]
 80079ce:	4413      	add	r3, r2
 80079d0:	b298      	uxth	r0, r3
 80079d2:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <DrawChar+0x16c>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	491b      	ldr	r1, [pc, #108]	; (8007a44 <DrawChar+0x170>)
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	440b      	add	r3, r1
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	88bb      	ldrh	r3, [r7, #4]
 80079e6:	4619      	mov	r1, r3
 80079e8:	f7ff ff4e 	bl	8007888 <BSP_LCD_DrawPixel>
 80079ec:	e012      	b.n	8007a14 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	4413      	add	r3, r2
 80079f6:	b298      	uxth	r0, r3
 80079f8:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <DrawChar+0x16c>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	4911      	ldr	r1, [pc, #68]	; (8007a44 <DrawChar+0x170>)
 80079fe:	4613      	mov	r3, r2
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	3304      	adds	r3, #4
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	88bb      	ldrh	r3, [r7, #4]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f7ff ff3a 	bl	8007888 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	3301      	adds	r3, #1
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	8a3b      	ldrh	r3, [r7, #16]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d3c4      	bcc.n	80079ac <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8007a22:	88bb      	ldrh	r3, [r7, #4]
 8007a24:	3301      	adds	r3, #1
 8007a26:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	61fb      	str	r3, [r7, #28]
 8007a2e:	8a7b      	ldrh	r3, [r7, #18]
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d384      	bcc.n	8007940 <DrawChar+0x6c>
  }
}
 8007a36:	bf00      	nop
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	2000030c 	.word	0x2000030c
 8007a44:	20000310 	.word	0x20000310

08007a48 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8007a56:	4b16      	ldr	r3, [pc, #88]	; (8007ab0 <FillBuffer+0x68>)
 8007a58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007a5c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8007a5e:	4b14      	ldr	r3, [pc, #80]	; (8007ab0 <FillBuffer+0x68>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8007a64:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <FillBuffer+0x68>)
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8007a6a:	4b11      	ldr	r3, [pc, #68]	; (8007ab0 <FillBuffer+0x68>)
 8007a6c:	4a11      	ldr	r2, [pc, #68]	; (8007ab4 <FillBuffer+0x6c>)
 8007a6e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8007a70:	480f      	ldr	r0, [pc, #60]	; (8007ab0 <FillBuffer+0x68>)
 8007a72:	f7f9 ff65 	bl	8001940 <HAL_DMA2D_Init>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d115      	bne.n	8007aa8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8007a7c:	68f9      	ldr	r1, [r7, #12]
 8007a7e:	480c      	ldr	r0, [pc, #48]	; (8007ab0 <FillBuffer+0x68>)
 8007a80:	f7fa f9cc 	bl	8001e1c <HAL_DMA2D_ConfigLayer>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10e      	bne.n	8007aa8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	69f9      	ldr	r1, [r7, #28]
 8007a94:	4806      	ldr	r0, [pc, #24]	; (8007ab0 <FillBuffer+0x68>)
 8007a96:	f7f9 ff9c 	bl	80019d2 <HAL_DMA2D_Start>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d103      	bne.n	8007aa8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8007aa0:	210a      	movs	r1, #10
 8007aa2:	4803      	ldr	r0, [pc, #12]	; (8007ab0 <FillBuffer+0x68>)
 8007aa4:	f7f9 ffc0 	bl	8001a28 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8007aa8:	bf00      	nop
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	2000029c 	.word	0x2000029c
 8007ab4:	4002b000 	.word	0x4002b000

08007ab8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007abc:	4b29      	ldr	r3, [pc, #164]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007abe:	4a2a      	ldr	r2, [pc, #168]	; (8007b68 <BSP_SDRAM_Init+0xb0>)
 8007ac0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8007ac2:	4b2a      	ldr	r3, [pc, #168]	; (8007b6c <BSP_SDRAM_Init+0xb4>)
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8007ac8:	4b28      	ldr	r3, [pc, #160]	; (8007b6c <BSP_SDRAM_Init+0xb4>)
 8007aca:	2207      	movs	r2, #7
 8007acc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8007ace:	4b27      	ldr	r3, [pc, #156]	; (8007b6c <BSP_SDRAM_Init+0xb4>)
 8007ad0:	2204      	movs	r2, #4
 8007ad2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8007ad4:	4b25      	ldr	r3, [pc, #148]	; (8007b6c <BSP_SDRAM_Init+0xb4>)
 8007ad6:	2207      	movs	r2, #7
 8007ad8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8007ada:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <BSP_SDRAM_Init+0xb4>)
 8007adc:	2202      	movs	r2, #2
 8007ade:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8007ae0:	4b22      	ldr	r3, [pc, #136]	; (8007b6c <BSP_SDRAM_Init+0xb4>)
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8007ae6:	4b21      	ldr	r3, [pc, #132]	; (8007b6c <BSP_SDRAM_Init+0xb4>)
 8007ae8:	2202      	movs	r2, #2
 8007aea:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8007aec:	4b1d      	ldr	r3, [pc, #116]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007af2:	4b1c      	ldr	r3, [pc, #112]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007af8:	4b1a      	ldr	r3, [pc, #104]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007afa:	2204      	movs	r2, #4
 8007afc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007afe:	4b19      	ldr	r3, [pc, #100]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007b00:	2210      	movs	r2, #16
 8007b02:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007b04:	4b17      	ldr	r3, [pc, #92]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007b06:	2240      	movs	r2, #64	; 0x40
 8007b08:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8007b0a:	4b16      	ldr	r3, [pc, #88]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007b0c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007b10:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007b12:	4b14      	ldr	r3, [pc, #80]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8007b18:	4b12      	ldr	r3, [pc, #72]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b1e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8007b20:	4b10      	ldr	r3, [pc, #64]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8007b26:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b2c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8007b2e:	2100      	movs	r1, #0
 8007b30:	480c      	ldr	r0, [pc, #48]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007b32:	f000 f87f 	bl	8007c34 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8007b36:	490d      	ldr	r1, [pc, #52]	; (8007b6c <BSP_SDRAM_Init+0xb4>)
 8007b38:	480a      	ldr	r0, [pc, #40]	; (8007b64 <BSP_SDRAM_Init+0xac>)
 8007b3a:	f7fc ff9f 	bl	8004a7c <HAL_SDRAM_Init>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <BSP_SDRAM_Init+0xb8>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	e002      	b.n	8007b52 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8007b4c:	4b08      	ldr	r3, [pc, #32]	; (8007b70 <BSP_SDRAM_Init+0xb8>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8007b52:	f240 506a 	movw	r0, #1386	; 0x56a
 8007b56:	f000 f80d 	bl	8007b74 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8007b5a:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <BSP_SDRAM_Init+0xb8>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000328 	.word	0x20000328
 8007b68:	a0000140 	.word	0xa0000140
 8007b6c:	2000035c 	.word	0x2000035c
 8007b70:	2000004c 	.word	0x2000004c

08007b74 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8007b80:	4b2a      	ldr	r3, [pc, #168]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8007b86:	4b29      	ldr	r3, [pc, #164]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007b88:	2208      	movs	r2, #8
 8007b8a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8007b8c:	4b27      	ldr	r3, [pc, #156]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8007b92:	4b26      	ldr	r3, [pc, #152]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8007b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b9c:	4923      	ldr	r1, [pc, #140]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007b9e:	4824      	ldr	r0, [pc, #144]	; (8007c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007ba0:	f7fc ffa0 	bl	8004ae4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	f7f9 fa51 	bl	800104c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8007baa:	4b20      	ldr	r3, [pc, #128]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bac:	2202      	movs	r2, #2
 8007bae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8007bb0:	4b1e      	ldr	r3, [pc, #120]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bb2:	2208      	movs	r2, #8
 8007bb4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8007bb6:	4b1d      	ldr	r3, [pc, #116]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8007bbc:	4b1b      	ldr	r3, [pc, #108]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8007bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bc6:	4919      	ldr	r1, [pc, #100]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bc8:	4819      	ldr	r0, [pc, #100]	; (8007c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007bca:	f7fc ff8b 	bl	8004ae4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8007bce:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8007bd4:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8007bda:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bdc:	2204      	movs	r2, #4
 8007bde:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8007be0:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8007be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bea:	4910      	ldr	r1, [pc, #64]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bec:	4810      	ldr	r0, [pc, #64]	; (8007c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007bee:	f7fc ff79 	bl	8004ae4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8007bf2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8007bf6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c00:	2208      	movs	r2, #8
 8007c02:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8007c04:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c06:	2201      	movs	r2, #1
 8007c08:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4a07      	ldr	r2, [pc, #28]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c0e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8007c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c14:	4905      	ldr	r1, [pc, #20]	; (8007c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c16:	4806      	ldr	r0, [pc, #24]	; (8007c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007c18:	f7fc ff64 	bl	8004ae4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4804      	ldr	r0, [pc, #16]	; (8007c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007c20:	f7fc ff8b 	bl	8004b3a <HAL_SDRAM_ProgramRefreshRate>
}
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000378 	.word	0x20000378
 8007c30:	20000328 	.word	0x20000328

08007c34 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b090      	sub	sp, #64	; 0x40
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80ec 	beq.w	8007e1e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007c46:	2300      	movs	r3, #0
 8007c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c4a:	4b77      	ldr	r3, [pc, #476]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	4a76      	ldr	r2, [pc, #472]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007c50:	f043 0301 	orr.w	r3, r3, #1
 8007c54:	6393      	str	r3, [r2, #56]	; 0x38
 8007c56:	4b74      	ldr	r3, [pc, #464]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
 8007c66:	4b70      	ldr	r3, [pc, #448]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	4a6f      	ldr	r2, [pc, #444]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007c6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c70:	6313      	str	r3, [r2, #48]	; 0x30
 8007c72:	4b6d      	ldr	r3, [pc, #436]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c7e:	2300      	movs	r3, #0
 8007c80:	623b      	str	r3, [r7, #32]
 8007c82:	4b69      	ldr	r3, [pc, #420]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	4a68      	ldr	r2, [pc, #416]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007c88:	f043 0302 	orr.w	r3, r3, #2
 8007c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c8e:	4b66      	ldr	r3, [pc, #408]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	623b      	str	r3, [r7, #32]
 8007c98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61fb      	str	r3, [r7, #28]
 8007c9e:	4b62      	ldr	r3, [pc, #392]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca2:	4a61      	ldr	r2, [pc, #388]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007ca4:	f043 0304 	orr.w	r3, r3, #4
 8007ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8007caa:	4b5f      	ldr	r3, [pc, #380]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	4b5b      	ldr	r3, [pc, #364]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	4a5a      	ldr	r2, [pc, #360]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007cc0:	f043 0308 	orr.w	r3, r3, #8
 8007cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8007cc6:	4b58      	ldr	r3, [pc, #352]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	61bb      	str	r3, [r7, #24]
 8007cd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	4b54      	ldr	r3, [pc, #336]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cda:	4a53      	ldr	r2, [pc, #332]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007cdc:	f043 0310 	orr.w	r3, r3, #16
 8007ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ce2:	4b51      	ldr	r3, [pc, #324]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce6:	f003 0310 	and.w	r3, r3, #16
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007cee:	2300      	movs	r3, #0
 8007cf0:	613b      	str	r3, [r7, #16]
 8007cf2:	4b4d      	ldr	r3, [pc, #308]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	4a4c      	ldr	r2, [pc, #304]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007cf8:	f043 0320 	orr.w	r3, r3, #32
 8007cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8007cfe:	4b4a      	ldr	r3, [pc, #296]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	4b46      	ldr	r3, [pc, #280]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	4a45      	ldr	r2, [pc, #276]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d18:	6313      	str	r3, [r2, #48]	; 0x30
 8007d1a:	4b43      	ldr	r3, [pc, #268]	; (8007e28 <BSP_SDRAM_MspInit+0x1f4>)
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8007d26:	2302      	movs	r3, #2
 8007d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8007d32:	230c      	movs	r3, #12
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8007d36:	2360      	movs	r3, #96	; 0x60
 8007d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8007d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d3e:	4619      	mov	r1, r3
 8007d40:	483a      	ldr	r0, [pc, #232]	; (8007e2c <BSP_SDRAM_MspInit+0x1f8>)
 8007d42:	f7fa f999 	bl	8002078 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8007d46:	2301      	movs	r3, #1
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8007d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4837      	ldr	r0, [pc, #220]	; (8007e30 <BSP_SDRAM_MspInit+0x1fc>)
 8007d52:	f7fa f991 	bl	8002078 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8007d56:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8007d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d60:	4619      	mov	r1, r3
 8007d62:	4834      	ldr	r0, [pc, #208]	; (8007e34 <BSP_SDRAM_MspInit+0x200>)
 8007d64:	f7fa f988 	bl	8002078 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8007d68:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8007d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d72:	4619      	mov	r1, r3
 8007d74:	4830      	ldr	r0, [pc, #192]	; (8007e38 <BSP_SDRAM_MspInit+0x204>)
 8007d76:	f7fa f97f 	bl	8002078 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8007d7a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8007d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d84:	4619      	mov	r1, r3
 8007d86:	482d      	ldr	r0, [pc, #180]	; (8007e3c <BSP_SDRAM_MspInit+0x208>)
 8007d88:	f7fa f976 	bl	8002078 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8007d8c:	f248 1333 	movw	r3, #33075	; 0x8133
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8007d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d96:	4619      	mov	r1, r3
 8007d98:	4829      	ldr	r0, [pc, #164]	; (8007e40 <BSP_SDRAM_MspInit+0x20c>)
 8007d9a:	f7fa f96d 	bl	8002078 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007d9e:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007da4:	4b27      	ldr	r3, [pc, #156]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007da6:	2280      	movs	r2, #128	; 0x80
 8007da8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007daa:	4b26      	ldr	r3, [pc, #152]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8007db2:	4b24      	ldr	r3, [pc, #144]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007db8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007dba:	4b22      	ldr	r3, [pc, #136]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007dc0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007dc2:	4b20      	ldr	r3, [pc, #128]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007dc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007dc8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8007dca:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007dd0:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007dd6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8007dd8:	4b1a      	ldr	r3, [pc, #104]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007dde:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007de0:	2203      	movs	r2, #3
 8007de2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007de4:	4b17      	ldr	r3, [pc, #92]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007dea:	4b16      	ldr	r3, [pc, #88]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8007df0:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007df2:	4a15      	ldr	r2, [pc, #84]	; (8007e48 <BSP_SDRAM_MspInit+0x214>)
 8007df4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a12      	ldr	r2, [pc, #72]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8007dfc:	4a11      	ldr	r2, [pc, #68]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8007e02:	4810      	ldr	r0, [pc, #64]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007e04:	f7f9 fb04 	bl	8001410 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8007e08:	480e      	ldr	r0, [pc, #56]	; (8007e44 <BSP_SDRAM_MspInit+0x210>)
 8007e0a:	f7f9 fa53 	bl	80012b4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007e0e:	2200      	movs	r2, #0
 8007e10:	210f      	movs	r1, #15
 8007e12:	2038      	movs	r0, #56	; 0x38
 8007e14:	f7f9 fa17 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007e18:	2038      	movs	r0, #56	; 0x38
 8007e1a:	f7f9 fa30 	bl	800127e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8007e1e:	bf00      	nop
 8007e20:	3740      	adds	r7, #64	; 0x40
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	40020400 	.word	0x40020400
 8007e30:	40020800 	.word	0x40020800
 8007e34:	40020c00 	.word	0x40020c00
 8007e38:	40021000 	.word	0x40021000
 8007e3c:	40021400 	.word	0x40021400
 8007e40:	40021800 	.word	0x40021800
 8007e44:	20000388 	.word	0x20000388
 8007e48:	40026410 	.word	0x40026410

08007e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e52:	2300      	movs	r3, #0
 8007e54:	607b      	str	r3, [r7, #4]
 8007e56:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <HAL_MspInit+0x4c>)
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	4a0f      	ldr	r2, [pc, #60]	; (8007e98 <HAL_MspInit+0x4c>)
 8007e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e60:	6453      	str	r3, [r2, #68]	; 0x44
 8007e62:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <HAL_MspInit+0x4c>)
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e6a:	607b      	str	r3, [r7, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e6e:	2300      	movs	r3, #0
 8007e70:	603b      	str	r3, [r7, #0]
 8007e72:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <HAL_MspInit+0x4c>)
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	4a08      	ldr	r2, [pc, #32]	; (8007e98 <HAL_MspInit+0x4c>)
 8007e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <HAL_MspInit+0x4c>)
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40023800 	.word	0x40023800

08007e9c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a0e      	ldr	r2, [pc, #56]	; (8007ee4 <HAL_DMA2D_MspInit+0x48>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d115      	bne.n	8007eda <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <HAL_DMA2D_MspInit+0x4c>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	4a0c      	ldr	r2, [pc, #48]	; (8007ee8 <HAL_DMA2D_MspInit+0x4c>)
 8007eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ebe:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <HAL_DMA2D_MspInit+0x4c>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2100      	movs	r1, #0
 8007ece:	205a      	movs	r0, #90	; 0x5a
 8007ed0:	f7f9 f9b9 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8007ed4:	205a      	movs	r0, #90	; 0x5a
 8007ed6:	f7f9 f9d2 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	4002b000 	.word	0x4002b000
 8007ee8:	40023800 	.word	0x40023800

08007eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	; 0x28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef4:	f107 0314 	add.w	r3, r7, #20
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	609a      	str	r2, [r3, #8]
 8007f00:	60da      	str	r2, [r3, #12]
 8007f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a29      	ldr	r2, [pc, #164]	; (8007fb0 <HAL_I2C_MspInit+0xc4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d14b      	bne.n	8007fa6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f0e:	2300      	movs	r3, #0
 8007f10:	613b      	str	r3, [r7, #16]
 8007f12:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <HAL_I2C_MspInit+0xc8>)
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f16:	4a27      	ldr	r2, [pc, #156]	; (8007fb4 <HAL_I2C_MspInit+0xc8>)
 8007f18:	f043 0304 	orr.w	r3, r3, #4
 8007f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f1e:	4b25      	ldr	r3, [pc, #148]	; (8007fb4 <HAL_I2C_MspInit+0xc8>)
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	4b21      	ldr	r3, [pc, #132]	; (8007fb4 <HAL_I2C_MspInit+0xc8>)
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	4a20      	ldr	r2, [pc, #128]	; (8007fb4 <HAL_I2C_MspInit+0xc8>)
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	6313      	str	r3, [r2, #48]	; 0x30
 8007f3a:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <HAL_I2C_MspInit+0xc8>)
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f4c:	2312      	movs	r3, #18
 8007f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f50:	2301      	movs	r3, #1
 8007f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f54:	2303      	movs	r3, #3
 8007f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007f58:	2304      	movs	r3, #4
 8007f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f5c:	f107 0314 	add.w	r3, r7, #20
 8007f60:	4619      	mov	r1, r3
 8007f62:	4815      	ldr	r0, [pc, #84]	; (8007fb8 <HAL_I2C_MspInit+0xcc>)
 8007f64:	f7fa f888 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f6e:	2312      	movs	r3, #18
 8007f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f72:	2301      	movs	r3, #1
 8007f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f76:	2303      	movs	r3, #3
 8007f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007f7a:	2304      	movs	r3, #4
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f7e:	f107 0314 	add.w	r3, r7, #20
 8007f82:	4619      	mov	r1, r3
 8007f84:	480d      	ldr	r0, [pc, #52]	; (8007fbc <HAL_I2C_MspInit+0xd0>)
 8007f86:	f7fa f877 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60bb      	str	r3, [r7, #8]
 8007f8e:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <HAL_I2C_MspInit+0xc8>)
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	4a08      	ldr	r2, [pc, #32]	; (8007fb4 <HAL_I2C_MspInit+0xc8>)
 8007f94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f98:	6413      	str	r3, [r2, #64]	; 0x40
 8007f9a:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <HAL_I2C_MspInit+0xc8>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fa2:	60bb      	str	r3, [r7, #8]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007fa6:	bf00      	nop
 8007fa8:	3728      	adds	r7, #40	; 0x28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	40005c00 	.word	0x40005c00
 8007fb4:	40023800 	.word	0x40023800
 8007fb8:	40020800 	.word	0x40020800
 8007fbc:	40020000 	.word	0x40020000

08007fc0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	; 0x38
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fcc:	2200      	movs	r2, #0
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	605a      	str	r2, [r3, #4]
 8007fd2:	609a      	str	r2, [r3, #8]
 8007fd4:	60da      	str	r2, [r3, #12]
 8007fd6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a7b      	ldr	r2, [pc, #492]	; (80081cc <HAL_LTDC_MspInit+0x20c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	f040 80ef 	bne.w	80081c2 <HAL_LTDC_MspInit+0x202>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	623b      	str	r3, [r7, #32]
 8007fe8:	4b79      	ldr	r3, [pc, #484]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8007fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fec:	4a78      	ldr	r2, [pc, #480]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8007fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8007ff4:	4b76      	ldr	r3, [pc, #472]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8007ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ffc:	623b      	str	r3, [r7, #32]
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008000:	2300      	movs	r3, #0
 8008002:	61fb      	str	r3, [r7, #28]
 8008004:	4b72      	ldr	r3, [pc, #456]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008008:	4a71      	ldr	r2, [pc, #452]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 800800a:	f043 0320 	orr.w	r3, r3, #32
 800800e:	6313      	str	r3, [r2, #48]	; 0x30
 8008010:	4b6f      	ldr	r3, [pc, #444]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800801c:	2300      	movs	r3, #0
 800801e:	61bb      	str	r3, [r7, #24]
 8008020:	4b6b      	ldr	r3, [pc, #428]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	4a6a      	ldr	r2, [pc, #424]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008026:	f043 0301 	orr.w	r3, r3, #1
 800802a:	6313      	str	r3, [r2, #48]	; 0x30
 800802c:	4b68      	ldr	r3, [pc, #416]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	61bb      	str	r3, [r7, #24]
 8008036:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	4b64      	ldr	r3, [pc, #400]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 800803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008040:	4a63      	ldr	r2, [pc, #396]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008042:	f043 0302 	orr.w	r3, r3, #2
 8008046:	6313      	str	r3, [r2, #48]	; 0x30
 8008048:	4b61      	ldr	r3, [pc, #388]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	617b      	str	r3, [r7, #20]
 8008052:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008054:	2300      	movs	r3, #0
 8008056:	613b      	str	r3, [r7, #16]
 8008058:	4b5d      	ldr	r3, [pc, #372]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 800805a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805c:	4a5c      	ldr	r2, [pc, #368]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 800805e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008062:	6313      	str	r3, [r2, #48]	; 0x30
 8008064:	4b5a      	ldr	r3, [pc, #360]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	4b56      	ldr	r3, [pc, #344]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008078:	4a55      	ldr	r2, [pc, #340]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 800807a:	f043 0304 	orr.w	r3, r3, #4
 800807e:	6313      	str	r3, [r2, #48]	; 0x30
 8008080:	4b53      	ldr	r3, [pc, #332]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800808c:	2300      	movs	r3, #0
 800808e:	60bb      	str	r3, [r7, #8]
 8008090:	4b4f      	ldr	r3, [pc, #316]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	4a4e      	ldr	r2, [pc, #312]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 8008096:	f043 0308 	orr.w	r3, r3, #8
 800809a:	6313      	str	r3, [r2, #48]	; 0x30
 800809c:	4b4c      	ldr	r3, [pc, #304]	; (80081d0 <HAL_LTDC_MspInit+0x210>)
 800809e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80080a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ae:	2302      	movs	r3, #2
 80080b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080b6:	2300      	movs	r3, #0
 80080b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80080ba:	230e      	movs	r3, #14
 80080bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80080be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080c2:	4619      	mov	r1, r3
 80080c4:	4843      	ldr	r0, [pc, #268]	; (80081d4 <HAL_LTDC_MspInit+0x214>)
 80080c6:	f7f9 ffd7 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 80080ca:	f641 0358 	movw	r3, #6232	; 0x1858
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d0:	2302      	movs	r3, #2
 80080d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d4:	2300      	movs	r3, #0
 80080d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080d8:	2300      	movs	r3, #0
 80080da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80080dc:	230e      	movs	r3, #14
 80080de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080e4:	4619      	mov	r1, r3
 80080e6:	483c      	ldr	r0, [pc, #240]	; (80081d8 <HAL_LTDC_MspInit+0x218>)
 80080e8:	f7f9 ffc6 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80080ec:	2303      	movs	r3, #3
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f0:	2302      	movs	r3, #2
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f4:	2300      	movs	r3, #0
 80080f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080f8:	2300      	movs	r3, #0
 80080fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80080fc:	2309      	movs	r3, #9
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008104:	4619      	mov	r1, r3
 8008106:	4835      	ldr	r0, [pc, #212]	; (80081dc <HAL_LTDC_MspInit+0x21c>)
 8008108:	f7f9 ffb6 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800810c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008112:	2302      	movs	r3, #2
 8008114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008116:	2300      	movs	r3, #0
 8008118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800811a:	2300      	movs	r3, #0
 800811c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800811e:	230e      	movs	r3, #14
 8008120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008126:	4619      	mov	r1, r3
 8008128:	482c      	ldr	r0, [pc, #176]	; (80081dc <HAL_LTDC_MspInit+0x21c>)
 800812a:	f7f9 ffa5 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800812e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008134:	2302      	movs	r3, #2
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008138:	2300      	movs	r3, #0
 800813a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800813c:	2300      	movs	r3, #0
 800813e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008140:	230e      	movs	r3, #14
 8008142:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008148:	4619      	mov	r1, r3
 800814a:	4825      	ldr	r0, [pc, #148]	; (80081e0 <HAL_LTDC_MspInit+0x220>)
 800814c:	f7f9 ff94 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8008150:	23c0      	movs	r3, #192	; 0xc0
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008154:	2302      	movs	r3, #2
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008158:	2300      	movs	r3, #0
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800815c:	2300      	movs	r3, #0
 800815e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008160:	230e      	movs	r3, #14
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008168:	4619      	mov	r1, r3
 800816a:	481e      	ldr	r0, [pc, #120]	; (80081e4 <HAL_LTDC_MspInit+0x224>)
 800816c:	f7f9 ff84 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin;
 8008170:	2308      	movs	r3, #8
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008174:	2302      	movs	r3, #2
 8008176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008178:	2300      	movs	r3, #0
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800817c:	2300      	movs	r3, #0
 800817e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008180:	230e      	movs	r3, #14
 8008182:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8008184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008188:	4619      	mov	r1, r3
 800818a:	4817      	ldr	r0, [pc, #92]	; (80081e8 <HAL_LTDC_MspInit+0x228>)
 800818c:	f7f9 ff74 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8008190:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008196:	2302      	movs	r3, #2
 8008198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819a:	2300      	movs	r3, #0
 800819c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800819e:	2300      	movs	r3, #0
 80081a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80081a2:	2309      	movs	r3, #9
 80081a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80081a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081aa:	4619      	mov	r1, r3
 80081ac:	480c      	ldr	r0, [pc, #48]	; (80081e0 <HAL_LTDC_MspInit+0x220>)
 80081ae:	f7f9 ff63 	bl	8002078 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80081b2:	2200      	movs	r2, #0
 80081b4:	2100      	movs	r1, #0
 80081b6:	2058      	movs	r0, #88	; 0x58
 80081b8:	f7f9 f845 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80081bc:	2058      	movs	r0, #88	; 0x58
 80081be:	f7f9 f85e 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80081c2:	bf00      	nop
 80081c4:	3738      	adds	r7, #56	; 0x38
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	40016800 	.word	0x40016800
 80081d0:	40023800 	.word	0x40023800
 80081d4:	40021400 	.word	0x40021400
 80081d8:	40020000 	.word	0x40020000
 80081dc:	40020400 	.word	0x40020400
 80081e0:	40021800 	.word	0x40021800
 80081e4:	40020800 	.word	0x40020800
 80081e8:	40020c00 	.word	0x40020c00

080081ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f4:	f107 0314 	add.w	r3, r7, #20
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	605a      	str	r2, [r3, #4]
 80081fe:	609a      	str	r2, [r3, #8]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a19      	ldr	r2, [pc, #100]	; (8008270 <HAL_SPI_MspInit+0x84>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d12c      	bne.n	8008268 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800820e:	2300      	movs	r3, #0
 8008210:	613b      	str	r3, [r7, #16]
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <HAL_SPI_MspInit+0x88>)
 8008214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008216:	4a17      	ldr	r2, [pc, #92]	; (8008274 <HAL_SPI_MspInit+0x88>)
 8008218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800821c:	6453      	str	r3, [r2, #68]	; 0x44
 800821e:	4b15      	ldr	r3, [pc, #84]	; (8008274 <HAL_SPI_MspInit+0x88>)
 8008220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008226:	613b      	str	r3, [r7, #16]
 8008228:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	4b11      	ldr	r3, [pc, #68]	; (8008274 <HAL_SPI_MspInit+0x88>)
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	4a10      	ldr	r2, [pc, #64]	; (8008274 <HAL_SPI_MspInit+0x88>)
 8008234:	f043 0320 	orr.w	r3, r3, #32
 8008238:	6313      	str	r3, [r2, #48]	; 0x30
 800823a:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <HAL_SPI_MspInit+0x88>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8008246:	f44f 7360 	mov.w	r3, #896	; 0x380
 800824a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824c:	2302      	movs	r3, #2
 800824e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008250:	2300      	movs	r3, #0
 8008252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008254:	2303      	movs	r3, #3
 8008256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008258:	2305      	movs	r3, #5
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800825c:	f107 0314 	add.w	r3, r7, #20
 8008260:	4619      	mov	r1, r3
 8008262:	4805      	ldr	r0, [pc, #20]	; (8008278 <HAL_SPI_MspInit+0x8c>)
 8008264:	f7f9 ff08 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8008268:	bf00      	nop
 800826a:	3728      	adds	r7, #40	; 0x28
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	40015000 	.word	0x40015000
 8008274:	40023800 	.word	0x40023800
 8008278:	40021400 	.word	0x40021400

0800827c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a08      	ldr	r2, [pc, #32]	; (80082ac <HAL_SPI_MspDeInit+0x30>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d10a      	bne.n	80082a4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800828e:	4b08      	ldr	r3, [pc, #32]	; (80082b0 <HAL_SPI_MspDeInit+0x34>)
 8008290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008292:	4a07      	ldr	r2, [pc, #28]	; (80082b0 <HAL_SPI_MspDeInit+0x34>)
 8008294:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008298:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800829a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800829e:	4805      	ldr	r0, [pc, #20]	; (80082b4 <HAL_SPI_MspDeInit+0x38>)
 80082a0:	f7fa f894 	bl	80023cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40015000 	.word	0x40015000
 80082b0:	40023800 	.word	0x40023800
 80082b4:	40021400 	.word	0x40021400

080082b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a0e      	ldr	r2, [pc, #56]	; (8008300 <HAL_TIM_Base_MspInit+0x48>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d115      	bne.n	80082f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80082ca:	2300      	movs	r3, #0
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <HAL_TIM_Base_MspInit+0x4c>)
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	4a0c      	ldr	r2, [pc, #48]	; (8008304 <HAL_TIM_Base_MspInit+0x4c>)
 80082d4:	f043 0320 	orr.w	r3, r3, #32
 80082d8:	6413      	str	r3, [r2, #64]	; 0x40
 80082da:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <HAL_TIM_Base_MspInit+0x4c>)
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80082e6:	2200      	movs	r2, #0
 80082e8:	2100      	movs	r1, #0
 80082ea:	2037      	movs	r0, #55	; 0x37
 80082ec:	f7f8 ffab 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80082f0:	2037      	movs	r0, #55	; 0x37
 80082f2:	f7f8 ffc4 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	40001400 	.word	0x40001400
 8008304:	40023800 	.word	0x40023800

08008308 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800830e:	1d3b      	adds	r3, r7, #4
 8008310:	2200      	movs	r2, #0
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	605a      	str	r2, [r3, #4]
 8008316:	609a      	str	r2, [r3, #8]
 8008318:	60da      	str	r2, [r3, #12]
 800831a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800831c:	4b3b      	ldr	r3, [pc, #236]	; (800840c <HAL_FMC_MspInit+0x104>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d16f      	bne.n	8008404 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8008324:	4b39      	ldr	r3, [pc, #228]	; (800840c <HAL_FMC_MspInit+0x104>)
 8008326:	2201      	movs	r2, #1
 8008328:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800832a:	2300      	movs	r3, #0
 800832c:	603b      	str	r3, [r7, #0]
 800832e:	4b38      	ldr	r3, [pc, #224]	; (8008410 <HAL_FMC_MspInit+0x108>)
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	4a37      	ldr	r2, [pc, #220]	; (8008410 <HAL_FMC_MspInit+0x108>)
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	6393      	str	r3, [r2, #56]	; 0x38
 800833a:	4b35      	ldr	r3, [pc, #212]	; (8008410 <HAL_FMC_MspInit+0x108>)
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8008346:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800834a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800834c:	2302      	movs	r3, #2
 800834e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008354:	2303      	movs	r3, #3
 8008356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008358:	230c      	movs	r3, #12
 800835a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800835c:	1d3b      	adds	r3, r7, #4
 800835e:	4619      	mov	r1, r3
 8008360:	482c      	ldr	r0, [pc, #176]	; (8008414 <HAL_FMC_MspInit+0x10c>)
 8008362:	f7f9 fe89 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8008366:	2301      	movs	r3, #1
 8008368:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800836a:	2302      	movs	r3, #2
 800836c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008372:	2303      	movs	r3, #3
 8008374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008376:	230c      	movs	r3, #12
 8008378:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800837a:	1d3b      	adds	r3, r7, #4
 800837c:	4619      	mov	r1, r3
 800837e:	4826      	ldr	r0, [pc, #152]	; (8008418 <HAL_FMC_MspInit+0x110>)
 8008380:	f7f9 fe7a 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8008384:	f248 1333 	movw	r3, #33075	; 0x8133
 8008388:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800838a:	2302      	movs	r3, #2
 800838c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008392:	2303      	movs	r3, #3
 8008394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008396:	230c      	movs	r3, #12
 8008398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800839a:	1d3b      	adds	r3, r7, #4
 800839c:	4619      	mov	r1, r3
 800839e:	481f      	ldr	r0, [pc, #124]	; (800841c <HAL_FMC_MspInit+0x114>)
 80083a0:	f7f9 fe6a 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80083a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80083a8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083aa:	2302      	movs	r3, #2
 80083ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083b2:	2303      	movs	r3, #3
 80083b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80083b6:	230c      	movs	r3, #12
 80083b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80083ba:	1d3b      	adds	r3, r7, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4818      	ldr	r0, [pc, #96]	; (8008420 <HAL_FMC_MspInit+0x118>)
 80083c0:	f7f9 fe5a 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80083c4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80083c8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ca:	2302      	movs	r3, #2
 80083cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083d2:	2303      	movs	r3, #3
 80083d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80083d6:	230c      	movs	r3, #12
 80083d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083da:	1d3b      	adds	r3, r7, #4
 80083dc:	4619      	mov	r1, r3
 80083de:	4811      	ldr	r0, [pc, #68]	; (8008424 <HAL_FMC_MspInit+0x11c>)
 80083e0:	f7f9 fe4a 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80083e4:	2360      	movs	r3, #96	; 0x60
 80083e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e8:	2302      	movs	r3, #2
 80083ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083f0:	2303      	movs	r3, #3
 80083f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80083f4:	230c      	movs	r3, #12
 80083f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083f8:	1d3b      	adds	r3, r7, #4
 80083fa:	4619      	mov	r1, r3
 80083fc:	480a      	ldr	r0, [pc, #40]	; (8008428 <HAL_FMC_MspInit+0x120>)
 80083fe:	f7f9 fe3b 	bl	8002078 <HAL_GPIO_Init>
 8008402:	e000      	b.n	8008406 <HAL_FMC_MspInit+0xfe>
    return;
 8008404:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	200003e8 	.word	0x200003e8
 8008410:	40023800 	.word	0x40023800
 8008414:	40021400 	.word	0x40021400
 8008418:	40020800 	.word	0x40020800
 800841c:	40021800 	.word	0x40021800
 8008420:	40021000 	.word	0x40021000
 8008424:	40020c00 	.word	0x40020c00
 8008428:	40020400 	.word	0x40020400

0800842c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008434:	f7ff ff68 	bl	8008308 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008444:	bf00      	nop
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800844e:	b480      	push	{r7}
 8008450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008452:	e7fe      	b.n	8008452 <HardFault_Handler+0x4>

08008454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008458:	e7fe      	b.n	8008458 <MemManage_Handler+0x4>

0800845a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800845a:	b480      	push	{r7}
 800845c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800845e:	e7fe      	b.n	800845e <BusFault_Handler+0x4>

08008460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008464:	e7fe      	b.n	8008464 <UsageFault_Handler+0x4>

08008466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008466:	b480      	push	{r7}
 8008468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800846a:	bf00      	nop
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008478:	bf00      	nop
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008482:	b480      	push	{r7}
 8008484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008486:	bf00      	nop
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008494:	f7f8 fdba 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008498:	bf00      	nop
 800849a:	bd80      	pop	{r7, pc}

0800849c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80084a0:	4802      	ldr	r0, [pc, #8]	; (80084ac <TIM7_IRQHandler+0x10>)
 80084a2:	f7fd f944 	bl	800572e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80084a6:	bf00      	nop
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000734 	.word	0x20000734

080084b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80084b4:	4802      	ldr	r0, [pc, #8]	; (80084c0 <DMA2_Stream0_IRQHandler+0x10>)
 80084b6:	f7f9 f809 	bl	80014cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80084ba:	bf00      	nop
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	200004e0 	.word	0x200004e0

080084c4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80084c8:	4802      	ldr	r0, [pc, #8]	; (80084d4 <LTDC_IRQHandler+0x10>)
 80084ca:	f7fb f987 	bl	80037dc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80084ce:	bf00      	nop
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000598 	.word	0x20000598

080084d8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80084dc:	4802      	ldr	r0, [pc, #8]	; (80084e8 <DMA2D_IRQHandler+0x10>)
 80084de:	f7f9 fb8c 	bl	8001bfa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80084e2:	bf00      	nop
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000668 	.word	0x20000668

080084ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80084f4:	4b11      	ldr	r3, [pc, #68]	; (800853c <_sbrk+0x50>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d102      	bne.n	8008502 <_sbrk+0x16>
		heap_end = &end;
 80084fc:	4b0f      	ldr	r3, [pc, #60]	; (800853c <_sbrk+0x50>)
 80084fe:	4a10      	ldr	r2, [pc, #64]	; (8008540 <_sbrk+0x54>)
 8008500:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008502:	4b0e      	ldr	r3, [pc, #56]	; (800853c <_sbrk+0x50>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <_sbrk+0x50>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4413      	add	r3, r2
 8008510:	466a      	mov	r2, sp
 8008512:	4293      	cmp	r3, r2
 8008514:	d907      	bls.n	8008526 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008516:	f000 f875 	bl	8008604 <__errno>
 800851a:	4602      	mov	r2, r0
 800851c:	230c      	movs	r3, #12
 800851e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008520:	f04f 33ff 	mov.w	r3, #4294967295
 8008524:	e006      	b.n	8008534 <_sbrk+0x48>
	}

	heap_end += incr;
 8008526:	4b05      	ldr	r3, [pc, #20]	; (800853c <_sbrk+0x50>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	4a03      	ldr	r2, [pc, #12]	; (800853c <_sbrk+0x50>)
 8008530:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	200003ec 	.word	0x200003ec
 8008540:	20000870 	.word	0x20000870

08008544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008548:	4b16      	ldr	r3, [pc, #88]	; (80085a4 <SystemInit+0x60>)
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854e:	4a15      	ldr	r2, [pc, #84]	; (80085a4 <SystemInit+0x60>)
 8008550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008558:	4b13      	ldr	r3, [pc, #76]	; (80085a8 <SystemInit+0x64>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a12      	ldr	r2, [pc, #72]	; (80085a8 <SystemInit+0x64>)
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008564:	4b10      	ldr	r3, [pc, #64]	; (80085a8 <SystemInit+0x64>)
 8008566:	2200      	movs	r2, #0
 8008568:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800856a:	4b0f      	ldr	r3, [pc, #60]	; (80085a8 <SystemInit+0x64>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a0e      	ldr	r2, [pc, #56]	; (80085a8 <SystemInit+0x64>)
 8008570:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008578:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800857a:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <SystemInit+0x64>)
 800857c:	4a0b      	ldr	r2, [pc, #44]	; (80085ac <SystemInit+0x68>)
 800857e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <SystemInit+0x64>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <SystemInit+0x64>)
 8008586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800858a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800858c:	4b06      	ldr	r3, [pc, #24]	; (80085a8 <SystemInit+0x64>)
 800858e:	2200      	movs	r2, #0
 8008590:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008592:	4b04      	ldr	r3, [pc, #16]	; (80085a4 <SystemInit+0x60>)
 8008594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008598:	609a      	str	r2, [r3, #8]
#endif
}
 800859a:	bf00      	nop
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	e000ed00 	.word	0xe000ed00
 80085a8:	40023800 	.word	0x40023800
 80085ac:	24003010 	.word	0x24003010

080085b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80085b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80085e8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80085b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80085b6:	e003      	b.n	80085c0 <LoopCopyDataInit>

080085b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80085b8:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80085ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80085bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80085be:	3104      	adds	r1, #4

080085c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80085c0:	480b      	ldr	r0, [pc, #44]	; (80085f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80085c2:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80085c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80085c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80085c8:	d3f6      	bcc.n	80085b8 <CopyDataInit>
  ldr  r2, =_sbss
 80085ca:	4a0b      	ldr	r2, [pc, #44]	; (80085f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80085cc:	e002      	b.n	80085d4 <LoopFillZerobss>

080085ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80085ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80085d0:	f842 3b04 	str.w	r3, [r2], #4

080085d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80085d4:	4b09      	ldr	r3, [pc, #36]	; (80085fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80085d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80085d8:	d3f9      	bcc.n	80085ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80085da:	f7ff ffb3 	bl	8008544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80085de:	f000 f817 	bl	8008610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80085e2:	f7fe f9ed 	bl	80069c0 <main>
  bx  lr    
 80085e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80085e8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80085ec:	0800c460 	.word	0x0800c460
  ldr  r0, =_sdata
 80085f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80085f4:	20000224 	.word	0x20000224
  ldr  r2, =_sbss
 80085f8:	20000224 	.word	0x20000224
  ldr  r3, = _ebss
 80085fc:	2000086c 	.word	0x2000086c

08008600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008600:	e7fe      	b.n	8008600 <ADC_IRQHandler>
	...

08008604 <__errno>:
 8008604:	4b01      	ldr	r3, [pc, #4]	; (800860c <__errno+0x8>)
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000054 	.word	0x20000054

08008610 <__libc_init_array>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	4e0d      	ldr	r6, [pc, #52]	; (8008648 <__libc_init_array+0x38>)
 8008614:	4c0d      	ldr	r4, [pc, #52]	; (800864c <__libc_init_array+0x3c>)
 8008616:	1ba4      	subs	r4, r4, r6
 8008618:	10a4      	asrs	r4, r4, #2
 800861a:	2500      	movs	r5, #0
 800861c:	42a5      	cmp	r5, r4
 800861e:	d109      	bne.n	8008634 <__libc_init_array+0x24>
 8008620:	4e0b      	ldr	r6, [pc, #44]	; (8008650 <__libc_init_array+0x40>)
 8008622:	4c0c      	ldr	r4, [pc, #48]	; (8008654 <__libc_init_array+0x44>)
 8008624:	f002 f85e 	bl	800a6e4 <_init>
 8008628:	1ba4      	subs	r4, r4, r6
 800862a:	10a4      	asrs	r4, r4, #2
 800862c:	2500      	movs	r5, #0
 800862e:	42a5      	cmp	r5, r4
 8008630:	d105      	bne.n	800863e <__libc_init_array+0x2e>
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008638:	4798      	blx	r3
 800863a:	3501      	adds	r5, #1
 800863c:	e7ee      	b.n	800861c <__libc_init_array+0xc>
 800863e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008642:	4798      	blx	r3
 8008644:	3501      	adds	r5, #1
 8008646:	e7f2      	b.n	800862e <__libc_init_array+0x1e>
 8008648:	0800c458 	.word	0x0800c458
 800864c:	0800c458 	.word	0x0800c458
 8008650:	0800c458 	.word	0x0800c458
 8008654:	0800c45c 	.word	0x0800c45c

08008658 <memcpy>:
 8008658:	b510      	push	{r4, lr}
 800865a:	1e43      	subs	r3, r0, #1
 800865c:	440a      	add	r2, r1
 800865e:	4291      	cmp	r1, r2
 8008660:	d100      	bne.n	8008664 <memcpy+0xc>
 8008662:	bd10      	pop	{r4, pc}
 8008664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800866c:	e7f7      	b.n	800865e <memcpy+0x6>

0800866e <memset>:
 800866e:	4402      	add	r2, r0
 8008670:	4603      	mov	r3, r0
 8008672:	4293      	cmp	r3, r2
 8008674:	d100      	bne.n	8008678 <memset+0xa>
 8008676:	4770      	bx	lr
 8008678:	f803 1b01 	strb.w	r1, [r3], #1
 800867c:	e7f9      	b.n	8008672 <memset+0x4>

0800867e <__cvt>:
 800867e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008682:	ec55 4b10 	vmov	r4, r5, d0
 8008686:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008688:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800868c:	2d00      	cmp	r5, #0
 800868e:	460e      	mov	r6, r1
 8008690:	4691      	mov	r9, r2
 8008692:	4619      	mov	r1, r3
 8008694:	bfb8      	it	lt
 8008696:	4622      	movlt	r2, r4
 8008698:	462b      	mov	r3, r5
 800869a:	f027 0720 	bic.w	r7, r7, #32
 800869e:	bfbb      	ittet	lt
 80086a0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80086a4:	461d      	movlt	r5, r3
 80086a6:	2300      	movge	r3, #0
 80086a8:	232d      	movlt	r3, #45	; 0x2d
 80086aa:	bfb8      	it	lt
 80086ac:	4614      	movlt	r4, r2
 80086ae:	2f46      	cmp	r7, #70	; 0x46
 80086b0:	700b      	strb	r3, [r1, #0]
 80086b2:	d004      	beq.n	80086be <__cvt+0x40>
 80086b4:	2f45      	cmp	r7, #69	; 0x45
 80086b6:	d100      	bne.n	80086ba <__cvt+0x3c>
 80086b8:	3601      	adds	r6, #1
 80086ba:	2102      	movs	r1, #2
 80086bc:	e000      	b.n	80086c0 <__cvt+0x42>
 80086be:	2103      	movs	r1, #3
 80086c0:	ab03      	add	r3, sp, #12
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	ab02      	add	r3, sp, #8
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	4632      	mov	r2, r6
 80086ca:	4653      	mov	r3, sl
 80086cc:	ec45 4b10 	vmov	d0, r4, r5
 80086d0:	f000 fcde 	bl	8009090 <_dtoa_r>
 80086d4:	2f47      	cmp	r7, #71	; 0x47
 80086d6:	4680      	mov	r8, r0
 80086d8:	d102      	bne.n	80086e0 <__cvt+0x62>
 80086da:	f019 0f01 	tst.w	r9, #1
 80086de:	d026      	beq.n	800872e <__cvt+0xb0>
 80086e0:	2f46      	cmp	r7, #70	; 0x46
 80086e2:	eb08 0906 	add.w	r9, r8, r6
 80086e6:	d111      	bne.n	800870c <__cvt+0x8e>
 80086e8:	f898 3000 	ldrb.w	r3, [r8]
 80086ec:	2b30      	cmp	r3, #48	; 0x30
 80086ee:	d10a      	bne.n	8008706 <__cvt+0x88>
 80086f0:	2200      	movs	r2, #0
 80086f2:	2300      	movs	r3, #0
 80086f4:	4620      	mov	r0, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	f7f8 f9f6 	bl	8000ae8 <__aeabi_dcmpeq>
 80086fc:	b918      	cbnz	r0, 8008706 <__cvt+0x88>
 80086fe:	f1c6 0601 	rsb	r6, r6, #1
 8008702:	f8ca 6000 	str.w	r6, [sl]
 8008706:	f8da 3000 	ldr.w	r3, [sl]
 800870a:	4499      	add	r9, r3
 800870c:	2200      	movs	r2, #0
 800870e:	2300      	movs	r3, #0
 8008710:	4620      	mov	r0, r4
 8008712:	4629      	mov	r1, r5
 8008714:	f7f8 f9e8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008718:	b938      	cbnz	r0, 800872a <__cvt+0xac>
 800871a:	2230      	movs	r2, #48	; 0x30
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	454b      	cmp	r3, r9
 8008720:	d205      	bcs.n	800872e <__cvt+0xb0>
 8008722:	1c59      	adds	r1, r3, #1
 8008724:	9103      	str	r1, [sp, #12]
 8008726:	701a      	strb	r2, [r3, #0]
 8008728:	e7f8      	b.n	800871c <__cvt+0x9e>
 800872a:	f8cd 900c 	str.w	r9, [sp, #12]
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008732:	eba3 0308 	sub.w	r3, r3, r8
 8008736:	4640      	mov	r0, r8
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	b004      	add	sp, #16
 800873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008740 <__exponent>:
 8008740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008742:	2900      	cmp	r1, #0
 8008744:	4604      	mov	r4, r0
 8008746:	bfba      	itte	lt
 8008748:	4249      	neglt	r1, r1
 800874a:	232d      	movlt	r3, #45	; 0x2d
 800874c:	232b      	movge	r3, #43	; 0x2b
 800874e:	2909      	cmp	r1, #9
 8008750:	f804 2b02 	strb.w	r2, [r4], #2
 8008754:	7043      	strb	r3, [r0, #1]
 8008756:	dd20      	ble.n	800879a <__exponent+0x5a>
 8008758:	f10d 0307 	add.w	r3, sp, #7
 800875c:	461f      	mov	r7, r3
 800875e:	260a      	movs	r6, #10
 8008760:	fb91 f5f6 	sdiv	r5, r1, r6
 8008764:	fb06 1115 	mls	r1, r6, r5, r1
 8008768:	3130      	adds	r1, #48	; 0x30
 800876a:	2d09      	cmp	r5, #9
 800876c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008770:	f103 32ff 	add.w	r2, r3, #4294967295
 8008774:	4629      	mov	r1, r5
 8008776:	dc09      	bgt.n	800878c <__exponent+0x4c>
 8008778:	3130      	adds	r1, #48	; 0x30
 800877a:	3b02      	subs	r3, #2
 800877c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008780:	42bb      	cmp	r3, r7
 8008782:	4622      	mov	r2, r4
 8008784:	d304      	bcc.n	8008790 <__exponent+0x50>
 8008786:	1a10      	subs	r0, r2, r0
 8008788:	b003      	add	sp, #12
 800878a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800878c:	4613      	mov	r3, r2
 800878e:	e7e7      	b.n	8008760 <__exponent+0x20>
 8008790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008794:	f804 2b01 	strb.w	r2, [r4], #1
 8008798:	e7f2      	b.n	8008780 <__exponent+0x40>
 800879a:	2330      	movs	r3, #48	; 0x30
 800879c:	4419      	add	r1, r3
 800879e:	7083      	strb	r3, [r0, #2]
 80087a0:	1d02      	adds	r2, r0, #4
 80087a2:	70c1      	strb	r1, [r0, #3]
 80087a4:	e7ef      	b.n	8008786 <__exponent+0x46>
	...

080087a8 <_printf_float>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	b08d      	sub	sp, #52	; 0x34
 80087ae:	460c      	mov	r4, r1
 80087b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80087b4:	4616      	mov	r6, r2
 80087b6:	461f      	mov	r7, r3
 80087b8:	4605      	mov	r5, r0
 80087ba:	f001 fa21 	bl	8009c00 <_localeconv_r>
 80087be:	6803      	ldr	r3, [r0, #0]
 80087c0:	9304      	str	r3, [sp, #16]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f7 fd14 	bl	80001f0 <strlen>
 80087c8:	2300      	movs	r3, #0
 80087ca:	930a      	str	r3, [sp, #40]	; 0x28
 80087cc:	f8d8 3000 	ldr.w	r3, [r8]
 80087d0:	9005      	str	r0, [sp, #20]
 80087d2:	3307      	adds	r3, #7
 80087d4:	f023 0307 	bic.w	r3, r3, #7
 80087d8:	f103 0208 	add.w	r2, r3, #8
 80087dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80087e0:	f8d4 b000 	ldr.w	fp, [r4]
 80087e4:	f8c8 2000 	str.w	r2, [r8]
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087f8:	9307      	str	r3, [sp, #28]
 80087fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80087fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008802:	4ba7      	ldr	r3, [pc, #668]	; (8008aa0 <_printf_float+0x2f8>)
 8008804:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008808:	f7f8 f9a0 	bl	8000b4c <__aeabi_dcmpun>
 800880c:	bb70      	cbnz	r0, 800886c <_printf_float+0xc4>
 800880e:	f04f 32ff 	mov.w	r2, #4294967295
 8008812:	4ba3      	ldr	r3, [pc, #652]	; (8008aa0 <_printf_float+0x2f8>)
 8008814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008818:	f7f8 f97a 	bl	8000b10 <__aeabi_dcmple>
 800881c:	bb30      	cbnz	r0, 800886c <_printf_float+0xc4>
 800881e:	2200      	movs	r2, #0
 8008820:	2300      	movs	r3, #0
 8008822:	4640      	mov	r0, r8
 8008824:	4649      	mov	r1, r9
 8008826:	f7f8 f969 	bl	8000afc <__aeabi_dcmplt>
 800882a:	b110      	cbz	r0, 8008832 <_printf_float+0x8a>
 800882c:	232d      	movs	r3, #45	; 0x2d
 800882e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008832:	4a9c      	ldr	r2, [pc, #624]	; (8008aa4 <_printf_float+0x2fc>)
 8008834:	4b9c      	ldr	r3, [pc, #624]	; (8008aa8 <_printf_float+0x300>)
 8008836:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800883a:	bf8c      	ite	hi
 800883c:	4690      	movhi	r8, r2
 800883e:	4698      	movls	r8, r3
 8008840:	2303      	movs	r3, #3
 8008842:	f02b 0204 	bic.w	r2, fp, #4
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	6022      	str	r2, [r4, #0]
 800884a:	f04f 0900 	mov.w	r9, #0
 800884e:	9700      	str	r7, [sp, #0]
 8008850:	4633      	mov	r3, r6
 8008852:	aa0b      	add	r2, sp, #44	; 0x2c
 8008854:	4621      	mov	r1, r4
 8008856:	4628      	mov	r0, r5
 8008858:	f000 f9e6 	bl	8008c28 <_printf_common>
 800885c:	3001      	adds	r0, #1
 800885e:	f040 808d 	bne.w	800897c <_printf_float+0x1d4>
 8008862:	f04f 30ff 	mov.w	r0, #4294967295
 8008866:	b00d      	add	sp, #52	; 0x34
 8008868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886c:	4642      	mov	r2, r8
 800886e:	464b      	mov	r3, r9
 8008870:	4640      	mov	r0, r8
 8008872:	4649      	mov	r1, r9
 8008874:	f7f8 f96a 	bl	8000b4c <__aeabi_dcmpun>
 8008878:	b110      	cbz	r0, 8008880 <_printf_float+0xd8>
 800887a:	4a8c      	ldr	r2, [pc, #560]	; (8008aac <_printf_float+0x304>)
 800887c:	4b8c      	ldr	r3, [pc, #560]	; (8008ab0 <_printf_float+0x308>)
 800887e:	e7da      	b.n	8008836 <_printf_float+0x8e>
 8008880:	6861      	ldr	r1, [r4, #4]
 8008882:	1c4b      	adds	r3, r1, #1
 8008884:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008888:	a80a      	add	r0, sp, #40	; 0x28
 800888a:	d13e      	bne.n	800890a <_printf_float+0x162>
 800888c:	2306      	movs	r3, #6
 800888e:	6063      	str	r3, [r4, #4]
 8008890:	2300      	movs	r3, #0
 8008892:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008896:	ab09      	add	r3, sp, #36	; 0x24
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	ec49 8b10 	vmov	d0, r8, r9
 800889e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088a2:	6022      	str	r2, [r4, #0]
 80088a4:	f8cd a004 	str.w	sl, [sp, #4]
 80088a8:	6861      	ldr	r1, [r4, #4]
 80088aa:	4628      	mov	r0, r5
 80088ac:	f7ff fee7 	bl	800867e <__cvt>
 80088b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80088b4:	2b47      	cmp	r3, #71	; 0x47
 80088b6:	4680      	mov	r8, r0
 80088b8:	d109      	bne.n	80088ce <_printf_float+0x126>
 80088ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088bc:	1cd8      	adds	r0, r3, #3
 80088be:	db02      	blt.n	80088c6 <_printf_float+0x11e>
 80088c0:	6862      	ldr	r2, [r4, #4]
 80088c2:	4293      	cmp	r3, r2
 80088c4:	dd47      	ble.n	8008956 <_printf_float+0x1ae>
 80088c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80088ca:	fa5f fa8a 	uxtb.w	sl, sl
 80088ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80088d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088d4:	d824      	bhi.n	8008920 <_printf_float+0x178>
 80088d6:	3901      	subs	r1, #1
 80088d8:	4652      	mov	r2, sl
 80088da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088de:	9109      	str	r1, [sp, #36]	; 0x24
 80088e0:	f7ff ff2e 	bl	8008740 <__exponent>
 80088e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088e6:	1813      	adds	r3, r2, r0
 80088e8:	2a01      	cmp	r2, #1
 80088ea:	4681      	mov	r9, r0
 80088ec:	6123      	str	r3, [r4, #16]
 80088ee:	dc02      	bgt.n	80088f6 <_printf_float+0x14e>
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	07d1      	lsls	r1, r2, #31
 80088f4:	d501      	bpl.n	80088fa <_printf_float+0x152>
 80088f6:	3301      	adds	r3, #1
 80088f8:	6123      	str	r3, [r4, #16]
 80088fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0a5      	beq.n	800884e <_printf_float+0xa6>
 8008902:	232d      	movs	r3, #45	; 0x2d
 8008904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008908:	e7a1      	b.n	800884e <_printf_float+0xa6>
 800890a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800890e:	f000 8177 	beq.w	8008c00 <_printf_float+0x458>
 8008912:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008916:	d1bb      	bne.n	8008890 <_printf_float+0xe8>
 8008918:	2900      	cmp	r1, #0
 800891a:	d1b9      	bne.n	8008890 <_printf_float+0xe8>
 800891c:	2301      	movs	r3, #1
 800891e:	e7b6      	b.n	800888e <_printf_float+0xe6>
 8008920:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008924:	d119      	bne.n	800895a <_printf_float+0x1b2>
 8008926:	2900      	cmp	r1, #0
 8008928:	6863      	ldr	r3, [r4, #4]
 800892a:	dd0c      	ble.n	8008946 <_printf_float+0x19e>
 800892c:	6121      	str	r1, [r4, #16]
 800892e:	b913      	cbnz	r3, 8008936 <_printf_float+0x18e>
 8008930:	6822      	ldr	r2, [r4, #0]
 8008932:	07d2      	lsls	r2, r2, #31
 8008934:	d502      	bpl.n	800893c <_printf_float+0x194>
 8008936:	3301      	adds	r3, #1
 8008938:	440b      	add	r3, r1
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008940:	f04f 0900 	mov.w	r9, #0
 8008944:	e7d9      	b.n	80088fa <_printf_float+0x152>
 8008946:	b913      	cbnz	r3, 800894e <_printf_float+0x1a6>
 8008948:	6822      	ldr	r2, [r4, #0]
 800894a:	07d0      	lsls	r0, r2, #31
 800894c:	d501      	bpl.n	8008952 <_printf_float+0x1aa>
 800894e:	3302      	adds	r3, #2
 8008950:	e7f3      	b.n	800893a <_printf_float+0x192>
 8008952:	2301      	movs	r3, #1
 8008954:	e7f1      	b.n	800893a <_printf_float+0x192>
 8008956:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800895a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800895e:	4293      	cmp	r3, r2
 8008960:	db05      	blt.n	800896e <_printf_float+0x1c6>
 8008962:	6822      	ldr	r2, [r4, #0]
 8008964:	6123      	str	r3, [r4, #16]
 8008966:	07d1      	lsls	r1, r2, #31
 8008968:	d5e8      	bpl.n	800893c <_printf_float+0x194>
 800896a:	3301      	adds	r3, #1
 800896c:	e7e5      	b.n	800893a <_printf_float+0x192>
 800896e:	2b00      	cmp	r3, #0
 8008970:	bfd4      	ite	le
 8008972:	f1c3 0302 	rsble	r3, r3, #2
 8008976:	2301      	movgt	r3, #1
 8008978:	4413      	add	r3, r2
 800897a:	e7de      	b.n	800893a <_printf_float+0x192>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	055a      	lsls	r2, r3, #21
 8008980:	d407      	bmi.n	8008992 <_printf_float+0x1ea>
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	4642      	mov	r2, r8
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	d12b      	bne.n	80089e8 <_printf_float+0x240>
 8008990:	e767      	b.n	8008862 <_printf_float+0xba>
 8008992:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008996:	f240 80dc 	bls.w	8008b52 <_printf_float+0x3aa>
 800899a:	2200      	movs	r2, #0
 800899c:	2300      	movs	r3, #0
 800899e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089a2:	f7f8 f8a1 	bl	8000ae8 <__aeabi_dcmpeq>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d033      	beq.n	8008a12 <_printf_float+0x26a>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4a41      	ldr	r2, [pc, #260]	; (8008ab4 <_printf_float+0x30c>)
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	f43f af54 	beq.w	8008862 <_printf_float+0xba>
 80089ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089be:	429a      	cmp	r2, r3
 80089c0:	db02      	blt.n	80089c8 <_printf_float+0x220>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	07d8      	lsls	r0, r3, #31
 80089c6:	d50f      	bpl.n	80089e8 <_printf_float+0x240>
 80089c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089cc:	4631      	mov	r1, r6
 80089ce:	4628      	mov	r0, r5
 80089d0:	47b8      	blx	r7
 80089d2:	3001      	adds	r0, #1
 80089d4:	f43f af45 	beq.w	8008862 <_printf_float+0xba>
 80089d8:	f04f 0800 	mov.w	r8, #0
 80089dc:	f104 091a 	add.w	r9, r4, #26
 80089e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e2:	3b01      	subs	r3, #1
 80089e4:	4543      	cmp	r3, r8
 80089e6:	dc09      	bgt.n	80089fc <_printf_float+0x254>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	079b      	lsls	r3, r3, #30
 80089ec:	f100 8103 	bmi.w	8008bf6 <_printf_float+0x44e>
 80089f0:	68e0      	ldr	r0, [r4, #12]
 80089f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f4:	4298      	cmp	r0, r3
 80089f6:	bfb8      	it	lt
 80089f8:	4618      	movlt	r0, r3
 80089fa:	e734      	b.n	8008866 <_printf_float+0xbe>
 80089fc:	2301      	movs	r3, #1
 80089fe:	464a      	mov	r2, r9
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	f43f af2b 	beq.w	8008862 <_printf_float+0xba>
 8008a0c:	f108 0801 	add.w	r8, r8, #1
 8008a10:	e7e6      	b.n	80089e0 <_printf_float+0x238>
 8008a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dc2b      	bgt.n	8008a70 <_printf_float+0x2c8>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4a26      	ldr	r2, [pc, #152]	; (8008ab4 <_printf_float+0x30c>)
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f43f af1d 	beq.w	8008862 <_printf_float+0xba>
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	b923      	cbnz	r3, 8008a36 <_printf_float+0x28e>
 8008a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a2e:	b913      	cbnz	r3, 8008a36 <_printf_float+0x28e>
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	07d9      	lsls	r1, r3, #31
 8008a34:	d5d8      	bpl.n	80089e8 <_printf_float+0x240>
 8008a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b8      	blx	r7
 8008a40:	3001      	adds	r0, #1
 8008a42:	f43f af0e 	beq.w	8008862 <_printf_float+0xba>
 8008a46:	f04f 0900 	mov.w	r9, #0
 8008a4a:	f104 0a1a 	add.w	sl, r4, #26
 8008a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a50:	425b      	negs	r3, r3
 8008a52:	454b      	cmp	r3, r9
 8008a54:	dc01      	bgt.n	8008a5a <_printf_float+0x2b2>
 8008a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a58:	e794      	b.n	8008984 <_printf_float+0x1dc>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	4652      	mov	r2, sl
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	f43f aefc 	beq.w	8008862 <_printf_float+0xba>
 8008a6a:	f109 0901 	add.w	r9, r9, #1
 8008a6e:	e7ee      	b.n	8008a4e <_printf_float+0x2a6>
 8008a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bfa8      	it	ge
 8008a78:	461a      	movge	r2, r3
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	4691      	mov	r9, r2
 8008a7e:	dd07      	ble.n	8008a90 <_printf_float+0x2e8>
 8008a80:	4613      	mov	r3, r2
 8008a82:	4631      	mov	r1, r6
 8008a84:	4642      	mov	r2, r8
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f43f aee9 	beq.w	8008862 <_printf_float+0xba>
 8008a90:	f104 031a 	add.w	r3, r4, #26
 8008a94:	f04f 0b00 	mov.w	fp, #0
 8008a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a9c:	9306      	str	r3, [sp, #24]
 8008a9e:	e015      	b.n	8008acc <_printf_float+0x324>
 8008aa0:	7fefffff 	.word	0x7fefffff
 8008aa4:	0800c1f8 	.word	0x0800c1f8
 8008aa8:	0800c1f4 	.word	0x0800c1f4
 8008aac:	0800c200 	.word	0x0800c200
 8008ab0:	0800c1fc 	.word	0x0800c1fc
 8008ab4:	0800c204 	.word	0x0800c204
 8008ab8:	2301      	movs	r3, #1
 8008aba:	9a06      	ldr	r2, [sp, #24]
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f43f aecd 	beq.w	8008862 <_printf_float+0xba>
 8008ac8:	f10b 0b01 	add.w	fp, fp, #1
 8008acc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008ad0:	ebaa 0309 	sub.w	r3, sl, r9
 8008ad4:	455b      	cmp	r3, fp
 8008ad6:	dcef      	bgt.n	8008ab8 <_printf_float+0x310>
 8008ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008adc:	429a      	cmp	r2, r3
 8008ade:	44d0      	add	r8, sl
 8008ae0:	db15      	blt.n	8008b0e <_printf_float+0x366>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	07da      	lsls	r2, r3, #31
 8008ae6:	d412      	bmi.n	8008b0e <_printf_float+0x366>
 8008ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aec:	eba3 020a 	sub.w	r2, r3, sl
 8008af0:	eba3 0a01 	sub.w	sl, r3, r1
 8008af4:	4592      	cmp	sl, r2
 8008af6:	bfa8      	it	ge
 8008af8:	4692      	movge	sl, r2
 8008afa:	f1ba 0f00 	cmp.w	sl, #0
 8008afe:	dc0e      	bgt.n	8008b1e <_printf_float+0x376>
 8008b00:	f04f 0800 	mov.w	r8, #0
 8008b04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b08:	f104 091a 	add.w	r9, r4, #26
 8008b0c:	e019      	b.n	8008b42 <_printf_float+0x39a>
 8008b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d1e5      	bne.n	8008ae8 <_printf_float+0x340>
 8008b1c:	e6a1      	b.n	8008862 <_printf_float+0xba>
 8008b1e:	4653      	mov	r3, sl
 8008b20:	4642      	mov	r2, r8
 8008b22:	4631      	mov	r1, r6
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b8      	blx	r7
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d1e9      	bne.n	8008b00 <_printf_float+0x358>
 8008b2c:	e699      	b.n	8008862 <_printf_float+0xba>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	464a      	mov	r2, r9
 8008b32:	4631      	mov	r1, r6
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b8      	blx	r7
 8008b38:	3001      	adds	r0, #1
 8008b3a:	f43f ae92 	beq.w	8008862 <_printf_float+0xba>
 8008b3e:	f108 0801 	add.w	r8, r8, #1
 8008b42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b46:	1a9b      	subs	r3, r3, r2
 8008b48:	eba3 030a 	sub.w	r3, r3, sl
 8008b4c:	4543      	cmp	r3, r8
 8008b4e:	dcee      	bgt.n	8008b2e <_printf_float+0x386>
 8008b50:	e74a      	b.n	80089e8 <_printf_float+0x240>
 8008b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b54:	2a01      	cmp	r2, #1
 8008b56:	dc01      	bgt.n	8008b5c <_printf_float+0x3b4>
 8008b58:	07db      	lsls	r3, r3, #31
 8008b5a:	d53a      	bpl.n	8008bd2 <_printf_float+0x42a>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	4642      	mov	r2, r8
 8008b60:	4631      	mov	r1, r6
 8008b62:	4628      	mov	r0, r5
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	f43f ae7b 	beq.w	8008862 <_printf_float+0xba>
 8008b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f108 0801 	add.w	r8, r8, #1
 8008b7c:	f43f ae71 	beq.w	8008862 <_printf_float+0xba>
 8008b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b82:	2200      	movs	r2, #0
 8008b84:	f103 3aff 	add.w	sl, r3, #4294967295
 8008b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f7f7 ffab 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b92:	b9c8      	cbnz	r0, 8008bc8 <_printf_float+0x420>
 8008b94:	4653      	mov	r3, sl
 8008b96:	4642      	mov	r2, r8
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	47b8      	blx	r7
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	d10e      	bne.n	8008bc0 <_printf_float+0x418>
 8008ba2:	e65e      	b.n	8008862 <_printf_float+0xba>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	4652      	mov	r2, sl
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f43f ae57 	beq.w	8008862 <_printf_float+0xba>
 8008bb4:	f108 0801 	add.w	r8, r8, #1
 8008bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	4543      	cmp	r3, r8
 8008bbe:	dcf1      	bgt.n	8008ba4 <_printf_float+0x3fc>
 8008bc0:	464b      	mov	r3, r9
 8008bc2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bc6:	e6de      	b.n	8008986 <_printf_float+0x1de>
 8008bc8:	f04f 0800 	mov.w	r8, #0
 8008bcc:	f104 0a1a 	add.w	sl, r4, #26
 8008bd0:	e7f2      	b.n	8008bb8 <_printf_float+0x410>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e7df      	b.n	8008b96 <_printf_float+0x3ee>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	464a      	mov	r2, r9
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b8      	blx	r7
 8008be0:	3001      	adds	r0, #1
 8008be2:	f43f ae3e 	beq.w	8008862 <_printf_float+0xba>
 8008be6:	f108 0801 	add.w	r8, r8, #1
 8008bea:	68e3      	ldr	r3, [r4, #12]
 8008bec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	4543      	cmp	r3, r8
 8008bf2:	dcf0      	bgt.n	8008bd6 <_printf_float+0x42e>
 8008bf4:	e6fc      	b.n	80089f0 <_printf_float+0x248>
 8008bf6:	f04f 0800 	mov.w	r8, #0
 8008bfa:	f104 0919 	add.w	r9, r4, #25
 8008bfe:	e7f4      	b.n	8008bea <_printf_float+0x442>
 8008c00:	2900      	cmp	r1, #0
 8008c02:	f43f ae8b 	beq.w	800891c <_printf_float+0x174>
 8008c06:	2300      	movs	r3, #0
 8008c08:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008c0c:	ab09      	add	r3, sp, #36	; 0x24
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	ec49 8b10 	vmov	d0, r8, r9
 8008c14:	6022      	str	r2, [r4, #0]
 8008c16:	f8cd a004 	str.w	sl, [sp, #4]
 8008c1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f7ff fd2d 	bl	800867e <__cvt>
 8008c24:	4680      	mov	r8, r0
 8008c26:	e648      	b.n	80088ba <_printf_float+0x112>

08008c28 <_printf_common>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	4691      	mov	r9, r2
 8008c2e:	461f      	mov	r7, r3
 8008c30:	688a      	ldr	r2, [r1, #8]
 8008c32:	690b      	ldr	r3, [r1, #16]
 8008c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	bfb8      	it	lt
 8008c3c:	4613      	movlt	r3, r2
 8008c3e:	f8c9 3000 	str.w	r3, [r9]
 8008c42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c46:	4606      	mov	r6, r0
 8008c48:	460c      	mov	r4, r1
 8008c4a:	b112      	cbz	r2, 8008c52 <_printf_common+0x2a>
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	f8c9 3000 	str.w	r3, [r9]
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	0699      	lsls	r1, r3, #26
 8008c56:	bf42      	ittt	mi
 8008c58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c5c:	3302      	addmi	r3, #2
 8008c5e:	f8c9 3000 	strmi.w	r3, [r9]
 8008c62:	6825      	ldr	r5, [r4, #0]
 8008c64:	f015 0506 	ands.w	r5, r5, #6
 8008c68:	d107      	bne.n	8008c7a <_printf_common+0x52>
 8008c6a:	f104 0a19 	add.w	sl, r4, #25
 8008c6e:	68e3      	ldr	r3, [r4, #12]
 8008c70:	f8d9 2000 	ldr.w	r2, [r9]
 8008c74:	1a9b      	subs	r3, r3, r2
 8008c76:	42ab      	cmp	r3, r5
 8008c78:	dc28      	bgt.n	8008ccc <_printf_common+0xa4>
 8008c7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c7e:	6822      	ldr	r2, [r4, #0]
 8008c80:	3300      	adds	r3, #0
 8008c82:	bf18      	it	ne
 8008c84:	2301      	movne	r3, #1
 8008c86:	0692      	lsls	r2, r2, #26
 8008c88:	d42d      	bmi.n	8008ce6 <_printf_common+0xbe>
 8008c8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c8e:	4639      	mov	r1, r7
 8008c90:	4630      	mov	r0, r6
 8008c92:	47c0      	blx	r8
 8008c94:	3001      	adds	r0, #1
 8008c96:	d020      	beq.n	8008cda <_printf_common+0xb2>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	68e5      	ldr	r5, [r4, #12]
 8008c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8008ca0:	f003 0306 	and.w	r3, r3, #6
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	bf08      	it	eq
 8008ca8:	1aad      	subeq	r5, r5, r2
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	6922      	ldr	r2, [r4, #16]
 8008cae:	bf0c      	ite	eq
 8008cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cb4:	2500      	movne	r5, #0
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	bfc4      	itt	gt
 8008cba:	1a9b      	subgt	r3, r3, r2
 8008cbc:	18ed      	addgt	r5, r5, r3
 8008cbe:	f04f 0900 	mov.w	r9, #0
 8008cc2:	341a      	adds	r4, #26
 8008cc4:	454d      	cmp	r5, r9
 8008cc6:	d11a      	bne.n	8008cfe <_printf_common+0xd6>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e008      	b.n	8008cde <_printf_common+0xb6>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4652      	mov	r2, sl
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	47c0      	blx	r8
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d103      	bne.n	8008ce2 <_printf_common+0xba>
 8008cda:	f04f 30ff 	mov.w	r0, #4294967295
 8008cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce2:	3501      	adds	r5, #1
 8008ce4:	e7c3      	b.n	8008c6e <_printf_common+0x46>
 8008ce6:	18e1      	adds	r1, r4, r3
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	2030      	movs	r0, #48	; 0x30
 8008cec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cf0:	4422      	add	r2, r4
 8008cf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cfa:	3302      	adds	r3, #2
 8008cfc:	e7c5      	b.n	8008c8a <_printf_common+0x62>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4622      	mov	r2, r4
 8008d02:	4639      	mov	r1, r7
 8008d04:	4630      	mov	r0, r6
 8008d06:	47c0      	blx	r8
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d0e6      	beq.n	8008cda <_printf_common+0xb2>
 8008d0c:	f109 0901 	add.w	r9, r9, #1
 8008d10:	e7d8      	b.n	8008cc4 <_printf_common+0x9c>
	...

08008d14 <_printf_i>:
 8008d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	7e09      	ldrb	r1, [r1, #24]
 8008d20:	b085      	sub	sp, #20
 8008d22:	296e      	cmp	r1, #110	; 0x6e
 8008d24:	4617      	mov	r7, r2
 8008d26:	4606      	mov	r6, r0
 8008d28:	4698      	mov	r8, r3
 8008d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d2c:	f000 80b3 	beq.w	8008e96 <_printf_i+0x182>
 8008d30:	d822      	bhi.n	8008d78 <_printf_i+0x64>
 8008d32:	2963      	cmp	r1, #99	; 0x63
 8008d34:	d036      	beq.n	8008da4 <_printf_i+0x90>
 8008d36:	d80a      	bhi.n	8008d4e <_printf_i+0x3a>
 8008d38:	2900      	cmp	r1, #0
 8008d3a:	f000 80b9 	beq.w	8008eb0 <_printf_i+0x19c>
 8008d3e:	2958      	cmp	r1, #88	; 0x58
 8008d40:	f000 8083 	beq.w	8008e4a <_printf_i+0x136>
 8008d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d4c:	e032      	b.n	8008db4 <_printf_i+0xa0>
 8008d4e:	2964      	cmp	r1, #100	; 0x64
 8008d50:	d001      	beq.n	8008d56 <_printf_i+0x42>
 8008d52:	2969      	cmp	r1, #105	; 0x69
 8008d54:	d1f6      	bne.n	8008d44 <_printf_i+0x30>
 8008d56:	6820      	ldr	r0, [r4, #0]
 8008d58:	6813      	ldr	r3, [r2, #0]
 8008d5a:	0605      	lsls	r5, r0, #24
 8008d5c:	f103 0104 	add.w	r1, r3, #4
 8008d60:	d52a      	bpl.n	8008db8 <_printf_i+0xa4>
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6011      	str	r1, [r2, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	da03      	bge.n	8008d72 <_printf_i+0x5e>
 8008d6a:	222d      	movs	r2, #45	; 0x2d
 8008d6c:	425b      	negs	r3, r3
 8008d6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d72:	486f      	ldr	r0, [pc, #444]	; (8008f30 <_printf_i+0x21c>)
 8008d74:	220a      	movs	r2, #10
 8008d76:	e039      	b.n	8008dec <_printf_i+0xd8>
 8008d78:	2973      	cmp	r1, #115	; 0x73
 8008d7a:	f000 809d 	beq.w	8008eb8 <_printf_i+0x1a4>
 8008d7e:	d808      	bhi.n	8008d92 <_printf_i+0x7e>
 8008d80:	296f      	cmp	r1, #111	; 0x6f
 8008d82:	d020      	beq.n	8008dc6 <_printf_i+0xb2>
 8008d84:	2970      	cmp	r1, #112	; 0x70
 8008d86:	d1dd      	bne.n	8008d44 <_printf_i+0x30>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	f043 0320 	orr.w	r3, r3, #32
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	e003      	b.n	8008d9a <_printf_i+0x86>
 8008d92:	2975      	cmp	r1, #117	; 0x75
 8008d94:	d017      	beq.n	8008dc6 <_printf_i+0xb2>
 8008d96:	2978      	cmp	r1, #120	; 0x78
 8008d98:	d1d4      	bne.n	8008d44 <_printf_i+0x30>
 8008d9a:	2378      	movs	r3, #120	; 0x78
 8008d9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008da0:	4864      	ldr	r0, [pc, #400]	; (8008f34 <_printf_i+0x220>)
 8008da2:	e055      	b.n	8008e50 <_printf_i+0x13c>
 8008da4:	6813      	ldr	r3, [r2, #0]
 8008da6:	1d19      	adds	r1, r3, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6011      	str	r1, [r2, #0]
 8008dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008db4:	2301      	movs	r3, #1
 8008db6:	e08c      	b.n	8008ed2 <_printf_i+0x1be>
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6011      	str	r1, [r2, #0]
 8008dbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dc0:	bf18      	it	ne
 8008dc2:	b21b      	sxthne	r3, r3
 8008dc4:	e7cf      	b.n	8008d66 <_printf_i+0x52>
 8008dc6:	6813      	ldr	r3, [r2, #0]
 8008dc8:	6825      	ldr	r5, [r4, #0]
 8008dca:	1d18      	adds	r0, r3, #4
 8008dcc:	6010      	str	r0, [r2, #0]
 8008dce:	0628      	lsls	r0, r5, #24
 8008dd0:	d501      	bpl.n	8008dd6 <_printf_i+0xc2>
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	e002      	b.n	8008ddc <_printf_i+0xc8>
 8008dd6:	0668      	lsls	r0, r5, #25
 8008dd8:	d5fb      	bpl.n	8008dd2 <_printf_i+0xbe>
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	4854      	ldr	r0, [pc, #336]	; (8008f30 <_printf_i+0x21c>)
 8008dde:	296f      	cmp	r1, #111	; 0x6f
 8008de0:	bf14      	ite	ne
 8008de2:	220a      	movne	r2, #10
 8008de4:	2208      	moveq	r2, #8
 8008de6:	2100      	movs	r1, #0
 8008de8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dec:	6865      	ldr	r5, [r4, #4]
 8008dee:	60a5      	str	r5, [r4, #8]
 8008df0:	2d00      	cmp	r5, #0
 8008df2:	f2c0 8095 	blt.w	8008f20 <_printf_i+0x20c>
 8008df6:	6821      	ldr	r1, [r4, #0]
 8008df8:	f021 0104 	bic.w	r1, r1, #4
 8008dfc:	6021      	str	r1, [r4, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d13d      	bne.n	8008e7e <_printf_i+0x16a>
 8008e02:	2d00      	cmp	r5, #0
 8008e04:	f040 808e 	bne.w	8008f24 <_printf_i+0x210>
 8008e08:	4665      	mov	r5, ip
 8008e0a:	2a08      	cmp	r2, #8
 8008e0c:	d10b      	bne.n	8008e26 <_printf_i+0x112>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	07db      	lsls	r3, r3, #31
 8008e12:	d508      	bpl.n	8008e26 <_printf_i+0x112>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	6862      	ldr	r2, [r4, #4]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	bfde      	ittt	le
 8008e1c:	2330      	movle	r3, #48	; 0x30
 8008e1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e26:	ebac 0305 	sub.w	r3, ip, r5
 8008e2a:	6123      	str	r3, [r4, #16]
 8008e2c:	f8cd 8000 	str.w	r8, [sp]
 8008e30:	463b      	mov	r3, r7
 8008e32:	aa03      	add	r2, sp, #12
 8008e34:	4621      	mov	r1, r4
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7ff fef6 	bl	8008c28 <_printf_common>
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d14d      	bne.n	8008edc <_printf_i+0x1c8>
 8008e40:	f04f 30ff 	mov.w	r0, #4294967295
 8008e44:	b005      	add	sp, #20
 8008e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e4a:	4839      	ldr	r0, [pc, #228]	; (8008f30 <_printf_i+0x21c>)
 8008e4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e50:	6813      	ldr	r3, [r2, #0]
 8008e52:	6821      	ldr	r1, [r4, #0]
 8008e54:	1d1d      	adds	r5, r3, #4
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6015      	str	r5, [r2, #0]
 8008e5a:	060a      	lsls	r2, r1, #24
 8008e5c:	d50b      	bpl.n	8008e76 <_printf_i+0x162>
 8008e5e:	07ca      	lsls	r2, r1, #31
 8008e60:	bf44      	itt	mi
 8008e62:	f041 0120 	orrmi.w	r1, r1, #32
 8008e66:	6021      	strmi	r1, [r4, #0]
 8008e68:	b91b      	cbnz	r3, 8008e72 <_printf_i+0x15e>
 8008e6a:	6822      	ldr	r2, [r4, #0]
 8008e6c:	f022 0220 	bic.w	r2, r2, #32
 8008e70:	6022      	str	r2, [r4, #0]
 8008e72:	2210      	movs	r2, #16
 8008e74:	e7b7      	b.n	8008de6 <_printf_i+0xd2>
 8008e76:	064d      	lsls	r5, r1, #25
 8008e78:	bf48      	it	mi
 8008e7a:	b29b      	uxthmi	r3, r3
 8008e7c:	e7ef      	b.n	8008e5e <_printf_i+0x14a>
 8008e7e:	4665      	mov	r5, ip
 8008e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e84:	fb02 3311 	mls	r3, r2, r1, r3
 8008e88:	5cc3      	ldrb	r3, [r0, r3]
 8008e8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008e8e:	460b      	mov	r3, r1
 8008e90:	2900      	cmp	r1, #0
 8008e92:	d1f5      	bne.n	8008e80 <_printf_i+0x16c>
 8008e94:	e7b9      	b.n	8008e0a <_printf_i+0xf6>
 8008e96:	6813      	ldr	r3, [r2, #0]
 8008e98:	6825      	ldr	r5, [r4, #0]
 8008e9a:	6961      	ldr	r1, [r4, #20]
 8008e9c:	1d18      	adds	r0, r3, #4
 8008e9e:	6010      	str	r0, [r2, #0]
 8008ea0:	0628      	lsls	r0, r5, #24
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	d501      	bpl.n	8008eaa <_printf_i+0x196>
 8008ea6:	6019      	str	r1, [r3, #0]
 8008ea8:	e002      	b.n	8008eb0 <_printf_i+0x19c>
 8008eaa:	066a      	lsls	r2, r5, #25
 8008eac:	d5fb      	bpl.n	8008ea6 <_printf_i+0x192>
 8008eae:	8019      	strh	r1, [r3, #0]
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6123      	str	r3, [r4, #16]
 8008eb4:	4665      	mov	r5, ip
 8008eb6:	e7b9      	b.n	8008e2c <_printf_i+0x118>
 8008eb8:	6813      	ldr	r3, [r2, #0]
 8008eba:	1d19      	adds	r1, r3, #4
 8008ebc:	6011      	str	r1, [r2, #0]
 8008ebe:	681d      	ldr	r5, [r3, #0]
 8008ec0:	6862      	ldr	r2, [r4, #4]
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f7f7 f99b 	bl	8000200 <memchr>
 8008eca:	b108      	cbz	r0, 8008ed0 <_printf_i+0x1bc>
 8008ecc:	1b40      	subs	r0, r0, r5
 8008ece:	6060      	str	r0, [r4, #4]
 8008ed0:	6863      	ldr	r3, [r4, #4]
 8008ed2:	6123      	str	r3, [r4, #16]
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eda:	e7a7      	b.n	8008e2c <_printf_i+0x118>
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	47c0      	blx	r8
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d0aa      	beq.n	8008e40 <_printf_i+0x12c>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	079b      	lsls	r3, r3, #30
 8008eee:	d413      	bmi.n	8008f18 <_printf_i+0x204>
 8008ef0:	68e0      	ldr	r0, [r4, #12]
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	4298      	cmp	r0, r3
 8008ef6:	bfb8      	it	lt
 8008ef8:	4618      	movlt	r0, r3
 8008efa:	e7a3      	b.n	8008e44 <_printf_i+0x130>
 8008efc:	2301      	movs	r3, #1
 8008efe:	464a      	mov	r2, r9
 8008f00:	4639      	mov	r1, r7
 8008f02:	4630      	mov	r0, r6
 8008f04:	47c0      	blx	r8
 8008f06:	3001      	adds	r0, #1
 8008f08:	d09a      	beq.n	8008e40 <_printf_i+0x12c>
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	68e3      	ldr	r3, [r4, #12]
 8008f0e:	9a03      	ldr	r2, [sp, #12]
 8008f10:	1a9b      	subs	r3, r3, r2
 8008f12:	42ab      	cmp	r3, r5
 8008f14:	dcf2      	bgt.n	8008efc <_printf_i+0x1e8>
 8008f16:	e7eb      	b.n	8008ef0 <_printf_i+0x1dc>
 8008f18:	2500      	movs	r5, #0
 8008f1a:	f104 0919 	add.w	r9, r4, #25
 8008f1e:	e7f5      	b.n	8008f0c <_printf_i+0x1f8>
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1ac      	bne.n	8008e7e <_printf_i+0x16a>
 8008f24:	7803      	ldrb	r3, [r0, #0]
 8008f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f2e:	e76c      	b.n	8008e0a <_printf_i+0xf6>
 8008f30:	0800c206 	.word	0x0800c206
 8008f34:	0800c217 	.word	0x0800c217

08008f38 <siprintf>:
 8008f38:	b40e      	push	{r1, r2, r3}
 8008f3a:	b500      	push	{lr}
 8008f3c:	b09c      	sub	sp, #112	; 0x70
 8008f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f40:	9002      	str	r0, [sp, #8]
 8008f42:	9006      	str	r0, [sp, #24]
 8008f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f48:	4809      	ldr	r0, [pc, #36]	; (8008f70 <siprintf+0x38>)
 8008f4a:	9107      	str	r1, [sp, #28]
 8008f4c:	9104      	str	r1, [sp, #16]
 8008f4e:	4909      	ldr	r1, [pc, #36]	; (8008f74 <siprintf+0x3c>)
 8008f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f54:	9105      	str	r1, [sp, #20]
 8008f56:	6800      	ldr	r0, [r0, #0]
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	a902      	add	r1, sp, #8
 8008f5c:	f001 fa52 	bl	800a404 <_svfiprintf_r>
 8008f60:	9b02      	ldr	r3, [sp, #8]
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	b01c      	add	sp, #112	; 0x70
 8008f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f6c:	b003      	add	sp, #12
 8008f6e:	4770      	bx	lr
 8008f70:	20000054 	.word	0x20000054
 8008f74:	ffff0208 	.word	0xffff0208

08008f78 <quorem>:
 8008f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	6903      	ldr	r3, [r0, #16]
 8008f7e:	690c      	ldr	r4, [r1, #16]
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	4680      	mov	r8, r0
 8008f84:	f2c0 8082 	blt.w	800908c <quorem+0x114>
 8008f88:	3c01      	subs	r4, #1
 8008f8a:	f101 0714 	add.w	r7, r1, #20
 8008f8e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008f92:	f100 0614 	add.w	r6, r0, #20
 8008f96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008f9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008f9e:	eb06 030c 	add.w	r3, r6, ip
 8008fa2:	3501      	adds	r5, #1
 8008fa4:	eb07 090c 	add.w	r9, r7, ip
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	fbb0 f5f5 	udiv	r5, r0, r5
 8008fae:	b395      	cbz	r5, 8009016 <quorem+0x9e>
 8008fb0:	f04f 0a00 	mov.w	sl, #0
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	46b6      	mov	lr, r6
 8008fb8:	46d3      	mov	fp, sl
 8008fba:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fbe:	b293      	uxth	r3, r2
 8008fc0:	fb05 a303 	mla	r3, r5, r3, sl
 8008fc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	ebab 0303 	sub.w	r3, fp, r3
 8008fce:	0c12      	lsrs	r2, r2, #16
 8008fd0:	f8de b000 	ldr.w	fp, [lr]
 8008fd4:	fb05 a202 	mla	r2, r5, r2, sl
 8008fd8:	fa13 f38b 	uxtah	r3, r3, fp
 8008fdc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008fe0:	fa1f fb82 	uxth.w	fp, r2
 8008fe4:	f8de 2000 	ldr.w	r2, [lr]
 8008fe8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008fec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ff6:	4581      	cmp	r9, r0
 8008ff8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008ffc:	f84e 3b04 	str.w	r3, [lr], #4
 8009000:	d2db      	bcs.n	8008fba <quorem+0x42>
 8009002:	f856 300c 	ldr.w	r3, [r6, ip]
 8009006:	b933      	cbnz	r3, 8009016 <quorem+0x9e>
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	3b04      	subs	r3, #4
 800900c:	429e      	cmp	r6, r3
 800900e:	461a      	mov	r2, r3
 8009010:	d330      	bcc.n	8009074 <quorem+0xfc>
 8009012:	f8c8 4010 	str.w	r4, [r8, #16]
 8009016:	4640      	mov	r0, r8
 8009018:	f001 f81e 	bl	800a058 <__mcmp>
 800901c:	2800      	cmp	r0, #0
 800901e:	db25      	blt.n	800906c <quorem+0xf4>
 8009020:	3501      	adds	r5, #1
 8009022:	4630      	mov	r0, r6
 8009024:	f04f 0c00 	mov.w	ip, #0
 8009028:	f857 2b04 	ldr.w	r2, [r7], #4
 800902c:	f8d0 e000 	ldr.w	lr, [r0]
 8009030:	b293      	uxth	r3, r2
 8009032:	ebac 0303 	sub.w	r3, ip, r3
 8009036:	0c12      	lsrs	r2, r2, #16
 8009038:	fa13 f38e 	uxtah	r3, r3, lr
 800903c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009044:	b29b      	uxth	r3, r3
 8009046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800904a:	45b9      	cmp	r9, r7
 800904c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009050:	f840 3b04 	str.w	r3, [r0], #4
 8009054:	d2e8      	bcs.n	8009028 <quorem+0xb0>
 8009056:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800905a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800905e:	b92a      	cbnz	r2, 800906c <quorem+0xf4>
 8009060:	3b04      	subs	r3, #4
 8009062:	429e      	cmp	r6, r3
 8009064:	461a      	mov	r2, r3
 8009066:	d30b      	bcc.n	8009080 <quorem+0x108>
 8009068:	f8c8 4010 	str.w	r4, [r8, #16]
 800906c:	4628      	mov	r0, r5
 800906e:	b003      	add	sp, #12
 8009070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	3b04      	subs	r3, #4
 8009078:	2a00      	cmp	r2, #0
 800907a:	d1ca      	bne.n	8009012 <quorem+0x9a>
 800907c:	3c01      	subs	r4, #1
 800907e:	e7c5      	b.n	800900c <quorem+0x94>
 8009080:	6812      	ldr	r2, [r2, #0]
 8009082:	3b04      	subs	r3, #4
 8009084:	2a00      	cmp	r2, #0
 8009086:	d1ef      	bne.n	8009068 <quorem+0xf0>
 8009088:	3c01      	subs	r4, #1
 800908a:	e7ea      	b.n	8009062 <quorem+0xea>
 800908c:	2000      	movs	r0, #0
 800908e:	e7ee      	b.n	800906e <quorem+0xf6>

08009090 <_dtoa_r>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	ec57 6b10 	vmov	r6, r7, d0
 8009098:	b097      	sub	sp, #92	; 0x5c
 800909a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800909c:	9106      	str	r1, [sp, #24]
 800909e:	4604      	mov	r4, r0
 80090a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80090a2:	9312      	str	r3, [sp, #72]	; 0x48
 80090a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090a8:	e9cd 6700 	strd	r6, r7, [sp]
 80090ac:	b93d      	cbnz	r5, 80090be <_dtoa_r+0x2e>
 80090ae:	2010      	movs	r0, #16
 80090b0:	f000 fdb4 	bl	8009c1c <malloc>
 80090b4:	6260      	str	r0, [r4, #36]	; 0x24
 80090b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090ba:	6005      	str	r5, [r0, #0]
 80090bc:	60c5      	str	r5, [r0, #12]
 80090be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090c0:	6819      	ldr	r1, [r3, #0]
 80090c2:	b151      	cbz	r1, 80090da <_dtoa_r+0x4a>
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	604a      	str	r2, [r1, #4]
 80090c8:	2301      	movs	r3, #1
 80090ca:	4093      	lsls	r3, r2
 80090cc:	608b      	str	r3, [r1, #8]
 80090ce:	4620      	mov	r0, r4
 80090d0:	f000 fde0 	bl	8009c94 <_Bfree>
 80090d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	1e3b      	subs	r3, r7, #0
 80090dc:	bfbb      	ittet	lt
 80090de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80090e2:	9301      	strlt	r3, [sp, #4]
 80090e4:	2300      	movge	r3, #0
 80090e6:	2201      	movlt	r2, #1
 80090e8:	bfac      	ite	ge
 80090ea:	f8c8 3000 	strge.w	r3, [r8]
 80090ee:	f8c8 2000 	strlt.w	r2, [r8]
 80090f2:	4baf      	ldr	r3, [pc, #700]	; (80093b0 <_dtoa_r+0x320>)
 80090f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80090f8:	ea33 0308 	bics.w	r3, r3, r8
 80090fc:	d114      	bne.n	8009128 <_dtoa_r+0x98>
 80090fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009100:	f242 730f 	movw	r3, #9999	; 0x270f
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	9b00      	ldr	r3, [sp, #0]
 8009108:	b923      	cbnz	r3, 8009114 <_dtoa_r+0x84>
 800910a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800910e:	2800      	cmp	r0, #0
 8009110:	f000 8542 	beq.w	8009b98 <_dtoa_r+0xb08>
 8009114:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009116:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80093c4 <_dtoa_r+0x334>
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 8544 	beq.w	8009ba8 <_dtoa_r+0xb18>
 8009120:	f10b 0303 	add.w	r3, fp, #3
 8009124:	f000 bd3e 	b.w	8009ba4 <_dtoa_r+0xb14>
 8009128:	e9dd 6700 	ldrd	r6, r7, [sp]
 800912c:	2200      	movs	r2, #0
 800912e:	2300      	movs	r3, #0
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009138:	4681      	mov	r9, r0
 800913a:	b168      	cbz	r0, 8009158 <_dtoa_r+0xc8>
 800913c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800913e:	2301      	movs	r3, #1
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 8524 	beq.w	8009b92 <_dtoa_r+0xb02>
 800914a:	4b9a      	ldr	r3, [pc, #616]	; (80093b4 <_dtoa_r+0x324>)
 800914c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800914e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	f000 bd28 	b.w	8009ba8 <_dtoa_r+0xb18>
 8009158:	aa14      	add	r2, sp, #80	; 0x50
 800915a:	a915      	add	r1, sp, #84	; 0x54
 800915c:	ec47 6b10 	vmov	d0, r6, r7
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fff0 	bl	800a146 <__d2b>
 8009166:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800916a:	9004      	str	r0, [sp, #16]
 800916c:	2d00      	cmp	r5, #0
 800916e:	d07c      	beq.n	800926a <_dtoa_r+0x1da>
 8009170:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009174:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009178:	46b2      	mov	sl, r6
 800917a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800917e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009182:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009186:	2200      	movs	r2, #0
 8009188:	4b8b      	ldr	r3, [pc, #556]	; (80093b8 <_dtoa_r+0x328>)
 800918a:	4650      	mov	r0, sl
 800918c:	4659      	mov	r1, fp
 800918e:	f7f7 f88b 	bl	80002a8 <__aeabi_dsub>
 8009192:	a381      	add	r3, pc, #516	; (adr r3, 8009398 <_dtoa_r+0x308>)
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	f7f7 fa3e 	bl	8000618 <__aeabi_dmul>
 800919c:	a380      	add	r3, pc, #512	; (adr r3, 80093a0 <_dtoa_r+0x310>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f7f7 f883 	bl	80002ac <__adddf3>
 80091a6:	4606      	mov	r6, r0
 80091a8:	4628      	mov	r0, r5
 80091aa:	460f      	mov	r7, r1
 80091ac:	f7f7 f9ca 	bl	8000544 <__aeabi_i2d>
 80091b0:	a37d      	add	r3, pc, #500	; (adr r3, 80093a8 <_dtoa_r+0x318>)
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	f7f7 fa2f 	bl	8000618 <__aeabi_dmul>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4630      	mov	r0, r6
 80091c0:	4639      	mov	r1, r7
 80091c2:	f7f7 f873 	bl	80002ac <__adddf3>
 80091c6:	4606      	mov	r6, r0
 80091c8:	460f      	mov	r7, r1
 80091ca:	f7f7 fcd5 	bl	8000b78 <__aeabi_d2iz>
 80091ce:	2200      	movs	r2, #0
 80091d0:	4682      	mov	sl, r0
 80091d2:	2300      	movs	r3, #0
 80091d4:	4630      	mov	r0, r6
 80091d6:	4639      	mov	r1, r7
 80091d8:	f7f7 fc90 	bl	8000afc <__aeabi_dcmplt>
 80091dc:	b148      	cbz	r0, 80091f2 <_dtoa_r+0x162>
 80091de:	4650      	mov	r0, sl
 80091e0:	f7f7 f9b0 	bl	8000544 <__aeabi_i2d>
 80091e4:	4632      	mov	r2, r6
 80091e6:	463b      	mov	r3, r7
 80091e8:	f7f7 fc7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80091ec:	b908      	cbnz	r0, 80091f2 <_dtoa_r+0x162>
 80091ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091f2:	f1ba 0f16 	cmp.w	sl, #22
 80091f6:	d859      	bhi.n	80092ac <_dtoa_r+0x21c>
 80091f8:	4970      	ldr	r1, [pc, #448]	; (80093bc <_dtoa_r+0x32c>)
 80091fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80091fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009202:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009206:	f7f7 fc97 	bl	8000b38 <__aeabi_dcmpgt>
 800920a:	2800      	cmp	r0, #0
 800920c:	d050      	beq.n	80092b0 <_dtoa_r+0x220>
 800920e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009212:	2300      	movs	r3, #0
 8009214:	930f      	str	r3, [sp, #60]	; 0x3c
 8009216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009218:	1b5d      	subs	r5, r3, r5
 800921a:	f1b5 0801 	subs.w	r8, r5, #1
 800921e:	bf49      	itett	mi
 8009220:	f1c5 0301 	rsbmi	r3, r5, #1
 8009224:	2300      	movpl	r3, #0
 8009226:	9305      	strmi	r3, [sp, #20]
 8009228:	f04f 0800 	movmi.w	r8, #0
 800922c:	bf58      	it	pl
 800922e:	9305      	strpl	r3, [sp, #20]
 8009230:	f1ba 0f00 	cmp.w	sl, #0
 8009234:	db3e      	blt.n	80092b4 <_dtoa_r+0x224>
 8009236:	2300      	movs	r3, #0
 8009238:	44d0      	add	r8, sl
 800923a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800923e:	9307      	str	r3, [sp, #28]
 8009240:	9b06      	ldr	r3, [sp, #24]
 8009242:	2b09      	cmp	r3, #9
 8009244:	f200 8090 	bhi.w	8009368 <_dtoa_r+0x2d8>
 8009248:	2b05      	cmp	r3, #5
 800924a:	bfc4      	itt	gt
 800924c:	3b04      	subgt	r3, #4
 800924e:	9306      	strgt	r3, [sp, #24]
 8009250:	9b06      	ldr	r3, [sp, #24]
 8009252:	f1a3 0302 	sub.w	r3, r3, #2
 8009256:	bfcc      	ite	gt
 8009258:	2500      	movgt	r5, #0
 800925a:	2501      	movle	r5, #1
 800925c:	2b03      	cmp	r3, #3
 800925e:	f200 808f 	bhi.w	8009380 <_dtoa_r+0x2f0>
 8009262:	e8df f003 	tbb	[pc, r3]
 8009266:	7f7d      	.short	0x7f7d
 8009268:	7131      	.short	0x7131
 800926a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800926e:	441d      	add	r5, r3
 8009270:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009274:	2820      	cmp	r0, #32
 8009276:	dd13      	ble.n	80092a0 <_dtoa_r+0x210>
 8009278:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800927c:	9b00      	ldr	r3, [sp, #0]
 800927e:	fa08 f800 	lsl.w	r8, r8, r0
 8009282:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009286:	fa23 f000 	lsr.w	r0, r3, r0
 800928a:	ea48 0000 	orr.w	r0, r8, r0
 800928e:	f7f7 f949 	bl	8000524 <__aeabi_ui2d>
 8009292:	2301      	movs	r3, #1
 8009294:	4682      	mov	sl, r0
 8009296:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800929a:	3d01      	subs	r5, #1
 800929c:	9313      	str	r3, [sp, #76]	; 0x4c
 800929e:	e772      	b.n	8009186 <_dtoa_r+0xf6>
 80092a0:	9b00      	ldr	r3, [sp, #0]
 80092a2:	f1c0 0020 	rsb	r0, r0, #32
 80092a6:	fa03 f000 	lsl.w	r0, r3, r0
 80092aa:	e7f0      	b.n	800928e <_dtoa_r+0x1fe>
 80092ac:	2301      	movs	r3, #1
 80092ae:	e7b1      	b.n	8009214 <_dtoa_r+0x184>
 80092b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80092b2:	e7b0      	b.n	8009216 <_dtoa_r+0x186>
 80092b4:	9b05      	ldr	r3, [sp, #20]
 80092b6:	eba3 030a 	sub.w	r3, r3, sl
 80092ba:	9305      	str	r3, [sp, #20]
 80092bc:	f1ca 0300 	rsb	r3, sl, #0
 80092c0:	9307      	str	r3, [sp, #28]
 80092c2:	2300      	movs	r3, #0
 80092c4:	930e      	str	r3, [sp, #56]	; 0x38
 80092c6:	e7bb      	b.n	8009240 <_dtoa_r+0x1b0>
 80092c8:	2301      	movs	r3, #1
 80092ca:	930a      	str	r3, [sp, #40]	; 0x28
 80092cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	dd59      	ble.n	8009386 <_dtoa_r+0x2f6>
 80092d2:	9302      	str	r3, [sp, #8]
 80092d4:	4699      	mov	r9, r3
 80092d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092d8:	2200      	movs	r2, #0
 80092da:	6072      	str	r2, [r6, #4]
 80092dc:	2204      	movs	r2, #4
 80092de:	f102 0014 	add.w	r0, r2, #20
 80092e2:	4298      	cmp	r0, r3
 80092e4:	6871      	ldr	r1, [r6, #4]
 80092e6:	d953      	bls.n	8009390 <_dtoa_r+0x300>
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 fc9f 	bl	8009c2c <_Balloc>
 80092ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f0:	6030      	str	r0, [r6, #0]
 80092f2:	f1b9 0f0e 	cmp.w	r9, #14
 80092f6:	f8d3 b000 	ldr.w	fp, [r3]
 80092fa:	f200 80e6 	bhi.w	80094ca <_dtoa_r+0x43a>
 80092fe:	2d00      	cmp	r5, #0
 8009300:	f000 80e3 	beq.w	80094ca <_dtoa_r+0x43a>
 8009304:	ed9d 7b00 	vldr	d7, [sp]
 8009308:	f1ba 0f00 	cmp.w	sl, #0
 800930c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009310:	dd74      	ble.n	80093fc <_dtoa_r+0x36c>
 8009312:	4a2a      	ldr	r2, [pc, #168]	; (80093bc <_dtoa_r+0x32c>)
 8009314:	f00a 030f 	and.w	r3, sl, #15
 8009318:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800931c:	ed93 7b00 	vldr	d7, [r3]
 8009320:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009324:	06f0      	lsls	r0, r6, #27
 8009326:	ed8d 7b08 	vstr	d7, [sp, #32]
 800932a:	d565      	bpl.n	80093f8 <_dtoa_r+0x368>
 800932c:	4b24      	ldr	r3, [pc, #144]	; (80093c0 <_dtoa_r+0x330>)
 800932e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009332:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009336:	f7f7 fa99 	bl	800086c <__aeabi_ddiv>
 800933a:	e9cd 0100 	strd	r0, r1, [sp]
 800933e:	f006 060f 	and.w	r6, r6, #15
 8009342:	2503      	movs	r5, #3
 8009344:	4f1e      	ldr	r7, [pc, #120]	; (80093c0 <_dtoa_r+0x330>)
 8009346:	e04c      	b.n	80093e2 <_dtoa_r+0x352>
 8009348:	2301      	movs	r3, #1
 800934a:	930a      	str	r3, [sp, #40]	; 0x28
 800934c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800934e:	4453      	add	r3, sl
 8009350:	f103 0901 	add.w	r9, r3, #1
 8009354:	9302      	str	r3, [sp, #8]
 8009356:	464b      	mov	r3, r9
 8009358:	2b01      	cmp	r3, #1
 800935a:	bfb8      	it	lt
 800935c:	2301      	movlt	r3, #1
 800935e:	e7ba      	b.n	80092d6 <_dtoa_r+0x246>
 8009360:	2300      	movs	r3, #0
 8009362:	e7b2      	b.n	80092ca <_dtoa_r+0x23a>
 8009364:	2300      	movs	r3, #0
 8009366:	e7f0      	b.n	800934a <_dtoa_r+0x2ba>
 8009368:	2501      	movs	r5, #1
 800936a:	2300      	movs	r3, #0
 800936c:	9306      	str	r3, [sp, #24]
 800936e:	950a      	str	r5, [sp, #40]	; 0x28
 8009370:	f04f 33ff 	mov.w	r3, #4294967295
 8009374:	9302      	str	r3, [sp, #8]
 8009376:	4699      	mov	r9, r3
 8009378:	2200      	movs	r2, #0
 800937a:	2312      	movs	r3, #18
 800937c:	920b      	str	r2, [sp, #44]	; 0x2c
 800937e:	e7aa      	b.n	80092d6 <_dtoa_r+0x246>
 8009380:	2301      	movs	r3, #1
 8009382:	930a      	str	r3, [sp, #40]	; 0x28
 8009384:	e7f4      	b.n	8009370 <_dtoa_r+0x2e0>
 8009386:	2301      	movs	r3, #1
 8009388:	9302      	str	r3, [sp, #8]
 800938a:	4699      	mov	r9, r3
 800938c:	461a      	mov	r2, r3
 800938e:	e7f5      	b.n	800937c <_dtoa_r+0x2ec>
 8009390:	3101      	adds	r1, #1
 8009392:	6071      	str	r1, [r6, #4]
 8009394:	0052      	lsls	r2, r2, #1
 8009396:	e7a2      	b.n	80092de <_dtoa_r+0x24e>
 8009398:	636f4361 	.word	0x636f4361
 800939c:	3fd287a7 	.word	0x3fd287a7
 80093a0:	8b60c8b3 	.word	0x8b60c8b3
 80093a4:	3fc68a28 	.word	0x3fc68a28
 80093a8:	509f79fb 	.word	0x509f79fb
 80093ac:	3fd34413 	.word	0x3fd34413
 80093b0:	7ff00000 	.word	0x7ff00000
 80093b4:	0800c205 	.word	0x0800c205
 80093b8:	3ff80000 	.word	0x3ff80000
 80093bc:	0800c260 	.word	0x0800c260
 80093c0:	0800c238 	.word	0x0800c238
 80093c4:	0800c231 	.word	0x0800c231
 80093c8:	07f1      	lsls	r1, r6, #31
 80093ca:	d508      	bpl.n	80093de <_dtoa_r+0x34e>
 80093cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d4:	f7f7 f920 	bl	8000618 <__aeabi_dmul>
 80093d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093dc:	3501      	adds	r5, #1
 80093de:	1076      	asrs	r6, r6, #1
 80093e0:	3708      	adds	r7, #8
 80093e2:	2e00      	cmp	r6, #0
 80093e4:	d1f0      	bne.n	80093c8 <_dtoa_r+0x338>
 80093e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80093ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093ee:	f7f7 fa3d 	bl	800086c <__aeabi_ddiv>
 80093f2:	e9cd 0100 	strd	r0, r1, [sp]
 80093f6:	e01a      	b.n	800942e <_dtoa_r+0x39e>
 80093f8:	2502      	movs	r5, #2
 80093fa:	e7a3      	b.n	8009344 <_dtoa_r+0x2b4>
 80093fc:	f000 80a0 	beq.w	8009540 <_dtoa_r+0x4b0>
 8009400:	f1ca 0600 	rsb	r6, sl, #0
 8009404:	4b9f      	ldr	r3, [pc, #636]	; (8009684 <_dtoa_r+0x5f4>)
 8009406:	4fa0      	ldr	r7, [pc, #640]	; (8009688 <_dtoa_r+0x5f8>)
 8009408:	f006 020f 	and.w	r2, r6, #15
 800940c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009418:	f7f7 f8fe 	bl	8000618 <__aeabi_dmul>
 800941c:	e9cd 0100 	strd	r0, r1, [sp]
 8009420:	1136      	asrs	r6, r6, #4
 8009422:	2300      	movs	r3, #0
 8009424:	2502      	movs	r5, #2
 8009426:	2e00      	cmp	r6, #0
 8009428:	d17f      	bne.n	800952a <_dtoa_r+0x49a>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e1      	bne.n	80093f2 <_dtoa_r+0x362>
 800942e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 8087 	beq.w	8009544 <_dtoa_r+0x4b4>
 8009436:	e9dd 6700 	ldrd	r6, r7, [sp]
 800943a:	2200      	movs	r2, #0
 800943c:	4b93      	ldr	r3, [pc, #588]	; (800968c <_dtoa_r+0x5fc>)
 800943e:	4630      	mov	r0, r6
 8009440:	4639      	mov	r1, r7
 8009442:	f7f7 fb5b 	bl	8000afc <__aeabi_dcmplt>
 8009446:	2800      	cmp	r0, #0
 8009448:	d07c      	beq.n	8009544 <_dtoa_r+0x4b4>
 800944a:	f1b9 0f00 	cmp.w	r9, #0
 800944e:	d079      	beq.n	8009544 <_dtoa_r+0x4b4>
 8009450:	9b02      	ldr	r3, [sp, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	dd35      	ble.n	80094c2 <_dtoa_r+0x432>
 8009456:	f10a 33ff 	add.w	r3, sl, #4294967295
 800945a:	9308      	str	r3, [sp, #32]
 800945c:	4639      	mov	r1, r7
 800945e:	2200      	movs	r2, #0
 8009460:	4b8b      	ldr	r3, [pc, #556]	; (8009690 <_dtoa_r+0x600>)
 8009462:	4630      	mov	r0, r6
 8009464:	f7f7 f8d8 	bl	8000618 <__aeabi_dmul>
 8009468:	e9cd 0100 	strd	r0, r1, [sp]
 800946c:	9f02      	ldr	r7, [sp, #8]
 800946e:	3501      	adds	r5, #1
 8009470:	4628      	mov	r0, r5
 8009472:	f7f7 f867 	bl	8000544 <__aeabi_i2d>
 8009476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800947a:	f7f7 f8cd 	bl	8000618 <__aeabi_dmul>
 800947e:	2200      	movs	r2, #0
 8009480:	4b84      	ldr	r3, [pc, #528]	; (8009694 <_dtoa_r+0x604>)
 8009482:	f7f6 ff13 	bl	80002ac <__adddf3>
 8009486:	4605      	mov	r5, r0
 8009488:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800948c:	2f00      	cmp	r7, #0
 800948e:	d15d      	bne.n	800954c <_dtoa_r+0x4bc>
 8009490:	2200      	movs	r2, #0
 8009492:	4b81      	ldr	r3, [pc, #516]	; (8009698 <_dtoa_r+0x608>)
 8009494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009498:	f7f6 ff06 	bl	80002a8 <__aeabi_dsub>
 800949c:	462a      	mov	r2, r5
 800949e:	4633      	mov	r3, r6
 80094a0:	e9cd 0100 	strd	r0, r1, [sp]
 80094a4:	f7f7 fb48 	bl	8000b38 <__aeabi_dcmpgt>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	f040 8288 	bne.w	80099be <_dtoa_r+0x92e>
 80094ae:	462a      	mov	r2, r5
 80094b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80094b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094b8:	f7f7 fb20 	bl	8000afc <__aeabi_dcmplt>
 80094bc:	2800      	cmp	r0, #0
 80094be:	f040 827c 	bne.w	80099ba <_dtoa_r+0x92a>
 80094c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094c6:	e9cd 2300 	strd	r2, r3, [sp]
 80094ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f2c0 8150 	blt.w	8009772 <_dtoa_r+0x6e2>
 80094d2:	f1ba 0f0e 	cmp.w	sl, #14
 80094d6:	f300 814c 	bgt.w	8009772 <_dtoa_r+0x6e2>
 80094da:	4b6a      	ldr	r3, [pc, #424]	; (8009684 <_dtoa_r+0x5f4>)
 80094dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094e0:	ed93 7b00 	vldr	d7, [r3]
 80094e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094ec:	f280 80d8 	bge.w	80096a0 <_dtoa_r+0x610>
 80094f0:	f1b9 0f00 	cmp.w	r9, #0
 80094f4:	f300 80d4 	bgt.w	80096a0 <_dtoa_r+0x610>
 80094f8:	f040 825e 	bne.w	80099b8 <_dtoa_r+0x928>
 80094fc:	2200      	movs	r2, #0
 80094fe:	4b66      	ldr	r3, [pc, #408]	; (8009698 <_dtoa_r+0x608>)
 8009500:	ec51 0b17 	vmov	r0, r1, d7
 8009504:	f7f7 f888 	bl	8000618 <__aeabi_dmul>
 8009508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800950c:	f7f7 fb0a 	bl	8000b24 <__aeabi_dcmpge>
 8009510:	464f      	mov	r7, r9
 8009512:	464e      	mov	r6, r9
 8009514:	2800      	cmp	r0, #0
 8009516:	f040 8234 	bne.w	8009982 <_dtoa_r+0x8f2>
 800951a:	2331      	movs	r3, #49	; 0x31
 800951c:	f10b 0501 	add.w	r5, fp, #1
 8009520:	f88b 3000 	strb.w	r3, [fp]
 8009524:	f10a 0a01 	add.w	sl, sl, #1
 8009528:	e22f      	b.n	800998a <_dtoa_r+0x8fa>
 800952a:	07f2      	lsls	r2, r6, #31
 800952c:	d505      	bpl.n	800953a <_dtoa_r+0x4aa>
 800952e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009532:	f7f7 f871 	bl	8000618 <__aeabi_dmul>
 8009536:	3501      	adds	r5, #1
 8009538:	2301      	movs	r3, #1
 800953a:	1076      	asrs	r6, r6, #1
 800953c:	3708      	adds	r7, #8
 800953e:	e772      	b.n	8009426 <_dtoa_r+0x396>
 8009540:	2502      	movs	r5, #2
 8009542:	e774      	b.n	800942e <_dtoa_r+0x39e>
 8009544:	f8cd a020 	str.w	sl, [sp, #32]
 8009548:	464f      	mov	r7, r9
 800954a:	e791      	b.n	8009470 <_dtoa_r+0x3e0>
 800954c:	4b4d      	ldr	r3, [pc, #308]	; (8009684 <_dtoa_r+0x5f4>)
 800954e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009552:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009558:	2b00      	cmp	r3, #0
 800955a:	d047      	beq.n	80095ec <_dtoa_r+0x55c>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	2000      	movs	r0, #0
 8009562:	494e      	ldr	r1, [pc, #312]	; (800969c <_dtoa_r+0x60c>)
 8009564:	f7f7 f982 	bl	800086c <__aeabi_ddiv>
 8009568:	462a      	mov	r2, r5
 800956a:	4633      	mov	r3, r6
 800956c:	f7f6 fe9c 	bl	80002a8 <__aeabi_dsub>
 8009570:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009574:	465d      	mov	r5, fp
 8009576:	e9dd 0100 	ldrd	r0, r1, [sp]
 800957a:	f7f7 fafd 	bl	8000b78 <__aeabi_d2iz>
 800957e:	4606      	mov	r6, r0
 8009580:	f7f6 ffe0 	bl	8000544 <__aeabi_i2d>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800958c:	f7f6 fe8c 	bl	80002a8 <__aeabi_dsub>
 8009590:	3630      	adds	r6, #48	; 0x30
 8009592:	f805 6b01 	strb.w	r6, [r5], #1
 8009596:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800959a:	e9cd 0100 	strd	r0, r1, [sp]
 800959e:	f7f7 faad 	bl	8000afc <__aeabi_dcmplt>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d163      	bne.n	800966e <_dtoa_r+0x5de>
 80095a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095aa:	2000      	movs	r0, #0
 80095ac:	4937      	ldr	r1, [pc, #220]	; (800968c <_dtoa_r+0x5fc>)
 80095ae:	f7f6 fe7b 	bl	80002a8 <__aeabi_dsub>
 80095b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80095b6:	f7f7 faa1 	bl	8000afc <__aeabi_dcmplt>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f040 80b7 	bne.w	800972e <_dtoa_r+0x69e>
 80095c0:	eba5 030b 	sub.w	r3, r5, fp
 80095c4:	429f      	cmp	r7, r3
 80095c6:	f77f af7c 	ble.w	80094c2 <_dtoa_r+0x432>
 80095ca:	2200      	movs	r2, #0
 80095cc:	4b30      	ldr	r3, [pc, #192]	; (8009690 <_dtoa_r+0x600>)
 80095ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095d2:	f7f7 f821 	bl	8000618 <__aeabi_dmul>
 80095d6:	2200      	movs	r2, #0
 80095d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80095dc:	4b2c      	ldr	r3, [pc, #176]	; (8009690 <_dtoa_r+0x600>)
 80095de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095e2:	f7f7 f819 	bl	8000618 <__aeabi_dmul>
 80095e6:	e9cd 0100 	strd	r0, r1, [sp]
 80095ea:	e7c4      	b.n	8009576 <_dtoa_r+0x4e6>
 80095ec:	462a      	mov	r2, r5
 80095ee:	4633      	mov	r3, r6
 80095f0:	f7f7 f812 	bl	8000618 <__aeabi_dmul>
 80095f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80095f8:	eb0b 0507 	add.w	r5, fp, r7
 80095fc:	465e      	mov	r6, fp
 80095fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009602:	f7f7 fab9 	bl	8000b78 <__aeabi_d2iz>
 8009606:	4607      	mov	r7, r0
 8009608:	f7f6 ff9c 	bl	8000544 <__aeabi_i2d>
 800960c:	3730      	adds	r7, #48	; 0x30
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009616:	f7f6 fe47 	bl	80002a8 <__aeabi_dsub>
 800961a:	f806 7b01 	strb.w	r7, [r6], #1
 800961e:	42ae      	cmp	r6, r5
 8009620:	e9cd 0100 	strd	r0, r1, [sp]
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	d126      	bne.n	8009678 <_dtoa_r+0x5e8>
 800962a:	4b1c      	ldr	r3, [pc, #112]	; (800969c <_dtoa_r+0x60c>)
 800962c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009630:	f7f6 fe3c 	bl	80002ac <__adddf3>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800963c:	f7f7 fa7c 	bl	8000b38 <__aeabi_dcmpgt>
 8009640:	2800      	cmp	r0, #0
 8009642:	d174      	bne.n	800972e <_dtoa_r+0x69e>
 8009644:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009648:	2000      	movs	r0, #0
 800964a:	4914      	ldr	r1, [pc, #80]	; (800969c <_dtoa_r+0x60c>)
 800964c:	f7f6 fe2c 	bl	80002a8 <__aeabi_dsub>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009658:	f7f7 fa50 	bl	8000afc <__aeabi_dcmplt>
 800965c:	2800      	cmp	r0, #0
 800965e:	f43f af30 	beq.w	80094c2 <_dtoa_r+0x432>
 8009662:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009666:	2b30      	cmp	r3, #48	; 0x30
 8009668:	f105 32ff 	add.w	r2, r5, #4294967295
 800966c:	d002      	beq.n	8009674 <_dtoa_r+0x5e4>
 800966e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009672:	e04a      	b.n	800970a <_dtoa_r+0x67a>
 8009674:	4615      	mov	r5, r2
 8009676:	e7f4      	b.n	8009662 <_dtoa_r+0x5d2>
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <_dtoa_r+0x600>)
 800967a:	f7f6 ffcd 	bl	8000618 <__aeabi_dmul>
 800967e:	e9cd 0100 	strd	r0, r1, [sp]
 8009682:	e7bc      	b.n	80095fe <_dtoa_r+0x56e>
 8009684:	0800c260 	.word	0x0800c260
 8009688:	0800c238 	.word	0x0800c238
 800968c:	3ff00000 	.word	0x3ff00000
 8009690:	40240000 	.word	0x40240000
 8009694:	401c0000 	.word	0x401c0000
 8009698:	40140000 	.word	0x40140000
 800969c:	3fe00000 	.word	0x3fe00000
 80096a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80096a4:	465d      	mov	r5, fp
 80096a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096aa:	4630      	mov	r0, r6
 80096ac:	4639      	mov	r1, r7
 80096ae:	f7f7 f8dd 	bl	800086c <__aeabi_ddiv>
 80096b2:	f7f7 fa61 	bl	8000b78 <__aeabi_d2iz>
 80096b6:	4680      	mov	r8, r0
 80096b8:	f7f6 ff44 	bl	8000544 <__aeabi_i2d>
 80096bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096c0:	f7f6 ffaa 	bl	8000618 <__aeabi_dmul>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4630      	mov	r0, r6
 80096ca:	4639      	mov	r1, r7
 80096cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80096d0:	f7f6 fdea 	bl	80002a8 <__aeabi_dsub>
 80096d4:	f805 6b01 	strb.w	r6, [r5], #1
 80096d8:	eba5 060b 	sub.w	r6, r5, fp
 80096dc:	45b1      	cmp	r9, r6
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	d139      	bne.n	8009758 <_dtoa_r+0x6c8>
 80096e4:	f7f6 fde2 	bl	80002ac <__adddf3>
 80096e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ec:	4606      	mov	r6, r0
 80096ee:	460f      	mov	r7, r1
 80096f0:	f7f7 fa22 	bl	8000b38 <__aeabi_dcmpgt>
 80096f4:	b9c8      	cbnz	r0, 800972a <_dtoa_r+0x69a>
 80096f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096fa:	4630      	mov	r0, r6
 80096fc:	4639      	mov	r1, r7
 80096fe:	f7f7 f9f3 	bl	8000ae8 <__aeabi_dcmpeq>
 8009702:	b110      	cbz	r0, 800970a <_dtoa_r+0x67a>
 8009704:	f018 0f01 	tst.w	r8, #1
 8009708:	d10f      	bne.n	800972a <_dtoa_r+0x69a>
 800970a:	9904      	ldr	r1, [sp, #16]
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fac1 	bl	8009c94 <_Bfree>
 8009712:	2300      	movs	r3, #0
 8009714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009716:	702b      	strb	r3, [r5, #0]
 8009718:	f10a 0301 	add.w	r3, sl, #1
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 8241 	beq.w	8009ba8 <_dtoa_r+0xb18>
 8009726:	601d      	str	r5, [r3, #0]
 8009728:	e23e      	b.n	8009ba8 <_dtoa_r+0xb18>
 800972a:	f8cd a020 	str.w	sl, [sp, #32]
 800972e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009732:	2a39      	cmp	r2, #57	; 0x39
 8009734:	f105 33ff 	add.w	r3, r5, #4294967295
 8009738:	d108      	bne.n	800974c <_dtoa_r+0x6bc>
 800973a:	459b      	cmp	fp, r3
 800973c:	d10a      	bne.n	8009754 <_dtoa_r+0x6c4>
 800973e:	9b08      	ldr	r3, [sp, #32]
 8009740:	3301      	adds	r3, #1
 8009742:	9308      	str	r3, [sp, #32]
 8009744:	2330      	movs	r3, #48	; 0x30
 8009746:	f88b 3000 	strb.w	r3, [fp]
 800974a:	465b      	mov	r3, fp
 800974c:	781a      	ldrb	r2, [r3, #0]
 800974e:	3201      	adds	r2, #1
 8009750:	701a      	strb	r2, [r3, #0]
 8009752:	e78c      	b.n	800966e <_dtoa_r+0x5de>
 8009754:	461d      	mov	r5, r3
 8009756:	e7ea      	b.n	800972e <_dtoa_r+0x69e>
 8009758:	2200      	movs	r2, #0
 800975a:	4b9b      	ldr	r3, [pc, #620]	; (80099c8 <_dtoa_r+0x938>)
 800975c:	f7f6 ff5c 	bl	8000618 <__aeabi_dmul>
 8009760:	2200      	movs	r2, #0
 8009762:	2300      	movs	r3, #0
 8009764:	4606      	mov	r6, r0
 8009766:	460f      	mov	r7, r1
 8009768:	f7f7 f9be 	bl	8000ae8 <__aeabi_dcmpeq>
 800976c:	2800      	cmp	r0, #0
 800976e:	d09a      	beq.n	80096a6 <_dtoa_r+0x616>
 8009770:	e7cb      	b.n	800970a <_dtoa_r+0x67a>
 8009772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009774:	2a00      	cmp	r2, #0
 8009776:	f000 808b 	beq.w	8009890 <_dtoa_r+0x800>
 800977a:	9a06      	ldr	r2, [sp, #24]
 800977c:	2a01      	cmp	r2, #1
 800977e:	dc6e      	bgt.n	800985e <_dtoa_r+0x7ce>
 8009780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009782:	2a00      	cmp	r2, #0
 8009784:	d067      	beq.n	8009856 <_dtoa_r+0x7c6>
 8009786:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800978a:	9f07      	ldr	r7, [sp, #28]
 800978c:	9d05      	ldr	r5, [sp, #20]
 800978e:	9a05      	ldr	r2, [sp, #20]
 8009790:	2101      	movs	r1, #1
 8009792:	441a      	add	r2, r3
 8009794:	4620      	mov	r0, r4
 8009796:	9205      	str	r2, [sp, #20]
 8009798:	4498      	add	r8, r3
 800979a:	f000 fb1b 	bl	8009dd4 <__i2b>
 800979e:	4606      	mov	r6, r0
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	dd0c      	ble.n	80097be <_dtoa_r+0x72e>
 80097a4:	f1b8 0f00 	cmp.w	r8, #0
 80097a8:	dd09      	ble.n	80097be <_dtoa_r+0x72e>
 80097aa:	4545      	cmp	r5, r8
 80097ac:	9a05      	ldr	r2, [sp, #20]
 80097ae:	462b      	mov	r3, r5
 80097b0:	bfa8      	it	ge
 80097b2:	4643      	movge	r3, r8
 80097b4:	1ad2      	subs	r2, r2, r3
 80097b6:	9205      	str	r2, [sp, #20]
 80097b8:	1aed      	subs	r5, r5, r3
 80097ba:	eba8 0803 	sub.w	r8, r8, r3
 80097be:	9b07      	ldr	r3, [sp, #28]
 80097c0:	b1eb      	cbz	r3, 80097fe <_dtoa_r+0x76e>
 80097c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d067      	beq.n	8009898 <_dtoa_r+0x808>
 80097c8:	b18f      	cbz	r7, 80097ee <_dtoa_r+0x75e>
 80097ca:	4631      	mov	r1, r6
 80097cc:	463a      	mov	r2, r7
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 fba0 	bl	8009f14 <__pow5mult>
 80097d4:	9a04      	ldr	r2, [sp, #16]
 80097d6:	4601      	mov	r1, r0
 80097d8:	4606      	mov	r6, r0
 80097da:	4620      	mov	r0, r4
 80097dc:	f000 fb03 	bl	8009de6 <__multiply>
 80097e0:	9904      	ldr	r1, [sp, #16]
 80097e2:	9008      	str	r0, [sp, #32]
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fa55 	bl	8009c94 <_Bfree>
 80097ea:	9b08      	ldr	r3, [sp, #32]
 80097ec:	9304      	str	r3, [sp, #16]
 80097ee:	9b07      	ldr	r3, [sp, #28]
 80097f0:	1bda      	subs	r2, r3, r7
 80097f2:	d004      	beq.n	80097fe <_dtoa_r+0x76e>
 80097f4:	9904      	ldr	r1, [sp, #16]
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 fb8c 	bl	8009f14 <__pow5mult>
 80097fc:	9004      	str	r0, [sp, #16]
 80097fe:	2101      	movs	r1, #1
 8009800:	4620      	mov	r0, r4
 8009802:	f000 fae7 	bl	8009dd4 <__i2b>
 8009806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009808:	4607      	mov	r7, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 81d0 	beq.w	8009bb0 <_dtoa_r+0xb20>
 8009810:	461a      	mov	r2, r3
 8009812:	4601      	mov	r1, r0
 8009814:	4620      	mov	r0, r4
 8009816:	f000 fb7d 	bl	8009f14 <__pow5mult>
 800981a:	9b06      	ldr	r3, [sp, #24]
 800981c:	2b01      	cmp	r3, #1
 800981e:	4607      	mov	r7, r0
 8009820:	dc40      	bgt.n	80098a4 <_dtoa_r+0x814>
 8009822:	9b00      	ldr	r3, [sp, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d139      	bne.n	800989c <_dtoa_r+0x80c>
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800982e:	2b00      	cmp	r3, #0
 8009830:	d136      	bne.n	80098a0 <_dtoa_r+0x810>
 8009832:	9b01      	ldr	r3, [sp, #4]
 8009834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009838:	0d1b      	lsrs	r3, r3, #20
 800983a:	051b      	lsls	r3, r3, #20
 800983c:	b12b      	cbz	r3, 800984a <_dtoa_r+0x7ba>
 800983e:	9b05      	ldr	r3, [sp, #20]
 8009840:	3301      	adds	r3, #1
 8009842:	9305      	str	r3, [sp, #20]
 8009844:	f108 0801 	add.w	r8, r8, #1
 8009848:	2301      	movs	r3, #1
 800984a:	9307      	str	r3, [sp, #28]
 800984c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800984e:	2b00      	cmp	r3, #0
 8009850:	d12a      	bne.n	80098a8 <_dtoa_r+0x818>
 8009852:	2001      	movs	r0, #1
 8009854:	e030      	b.n	80098b8 <_dtoa_r+0x828>
 8009856:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009858:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800985c:	e795      	b.n	800978a <_dtoa_r+0x6fa>
 800985e:	9b07      	ldr	r3, [sp, #28]
 8009860:	f109 37ff 	add.w	r7, r9, #4294967295
 8009864:	42bb      	cmp	r3, r7
 8009866:	bfbf      	itttt	lt
 8009868:	9b07      	ldrlt	r3, [sp, #28]
 800986a:	9707      	strlt	r7, [sp, #28]
 800986c:	1afa      	sublt	r2, r7, r3
 800986e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009870:	bfbb      	ittet	lt
 8009872:	189b      	addlt	r3, r3, r2
 8009874:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009876:	1bdf      	subge	r7, r3, r7
 8009878:	2700      	movlt	r7, #0
 800987a:	f1b9 0f00 	cmp.w	r9, #0
 800987e:	bfb5      	itete	lt
 8009880:	9b05      	ldrlt	r3, [sp, #20]
 8009882:	9d05      	ldrge	r5, [sp, #20]
 8009884:	eba3 0509 	sublt.w	r5, r3, r9
 8009888:	464b      	movge	r3, r9
 800988a:	bfb8      	it	lt
 800988c:	2300      	movlt	r3, #0
 800988e:	e77e      	b.n	800978e <_dtoa_r+0x6fe>
 8009890:	9f07      	ldr	r7, [sp, #28]
 8009892:	9d05      	ldr	r5, [sp, #20]
 8009894:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009896:	e783      	b.n	80097a0 <_dtoa_r+0x710>
 8009898:	9a07      	ldr	r2, [sp, #28]
 800989a:	e7ab      	b.n	80097f4 <_dtoa_r+0x764>
 800989c:	2300      	movs	r3, #0
 800989e:	e7d4      	b.n	800984a <_dtoa_r+0x7ba>
 80098a0:	9b00      	ldr	r3, [sp, #0]
 80098a2:	e7d2      	b.n	800984a <_dtoa_r+0x7ba>
 80098a4:	2300      	movs	r3, #0
 80098a6:	9307      	str	r3, [sp, #28]
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80098ae:	6918      	ldr	r0, [r3, #16]
 80098b0:	f000 fa42 	bl	8009d38 <__hi0bits>
 80098b4:	f1c0 0020 	rsb	r0, r0, #32
 80098b8:	4440      	add	r0, r8
 80098ba:	f010 001f 	ands.w	r0, r0, #31
 80098be:	d047      	beq.n	8009950 <_dtoa_r+0x8c0>
 80098c0:	f1c0 0320 	rsb	r3, r0, #32
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	dd3b      	ble.n	8009940 <_dtoa_r+0x8b0>
 80098c8:	9b05      	ldr	r3, [sp, #20]
 80098ca:	f1c0 001c 	rsb	r0, r0, #28
 80098ce:	4403      	add	r3, r0
 80098d0:	9305      	str	r3, [sp, #20]
 80098d2:	4405      	add	r5, r0
 80098d4:	4480      	add	r8, r0
 80098d6:	9b05      	ldr	r3, [sp, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	dd05      	ble.n	80098e8 <_dtoa_r+0x858>
 80098dc:	461a      	mov	r2, r3
 80098de:	9904      	ldr	r1, [sp, #16]
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 fb65 	bl	8009fb0 <__lshift>
 80098e6:	9004      	str	r0, [sp, #16]
 80098e8:	f1b8 0f00 	cmp.w	r8, #0
 80098ec:	dd05      	ble.n	80098fa <_dtoa_r+0x86a>
 80098ee:	4639      	mov	r1, r7
 80098f0:	4642      	mov	r2, r8
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fb5c 	bl	8009fb0 <__lshift>
 80098f8:	4607      	mov	r7, r0
 80098fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098fc:	b353      	cbz	r3, 8009954 <_dtoa_r+0x8c4>
 80098fe:	4639      	mov	r1, r7
 8009900:	9804      	ldr	r0, [sp, #16]
 8009902:	f000 fba9 	bl	800a058 <__mcmp>
 8009906:	2800      	cmp	r0, #0
 8009908:	da24      	bge.n	8009954 <_dtoa_r+0x8c4>
 800990a:	2300      	movs	r3, #0
 800990c:	220a      	movs	r2, #10
 800990e:	9904      	ldr	r1, [sp, #16]
 8009910:	4620      	mov	r0, r4
 8009912:	f000 f9d6 	bl	8009cc2 <__multadd>
 8009916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009918:	9004      	str	r0, [sp, #16]
 800991a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 814d 	beq.w	8009bbe <_dtoa_r+0xb2e>
 8009924:	2300      	movs	r3, #0
 8009926:	4631      	mov	r1, r6
 8009928:	220a      	movs	r2, #10
 800992a:	4620      	mov	r0, r4
 800992c:	f000 f9c9 	bl	8009cc2 <__multadd>
 8009930:	9b02      	ldr	r3, [sp, #8]
 8009932:	2b00      	cmp	r3, #0
 8009934:	4606      	mov	r6, r0
 8009936:	dc4f      	bgt.n	80099d8 <_dtoa_r+0x948>
 8009938:	9b06      	ldr	r3, [sp, #24]
 800993a:	2b02      	cmp	r3, #2
 800993c:	dd4c      	ble.n	80099d8 <_dtoa_r+0x948>
 800993e:	e011      	b.n	8009964 <_dtoa_r+0x8d4>
 8009940:	d0c9      	beq.n	80098d6 <_dtoa_r+0x846>
 8009942:	9a05      	ldr	r2, [sp, #20]
 8009944:	331c      	adds	r3, #28
 8009946:	441a      	add	r2, r3
 8009948:	9205      	str	r2, [sp, #20]
 800994a:	441d      	add	r5, r3
 800994c:	4498      	add	r8, r3
 800994e:	e7c2      	b.n	80098d6 <_dtoa_r+0x846>
 8009950:	4603      	mov	r3, r0
 8009952:	e7f6      	b.n	8009942 <_dtoa_r+0x8b2>
 8009954:	f1b9 0f00 	cmp.w	r9, #0
 8009958:	dc38      	bgt.n	80099cc <_dtoa_r+0x93c>
 800995a:	9b06      	ldr	r3, [sp, #24]
 800995c:	2b02      	cmp	r3, #2
 800995e:	dd35      	ble.n	80099cc <_dtoa_r+0x93c>
 8009960:	f8cd 9008 	str.w	r9, [sp, #8]
 8009964:	9b02      	ldr	r3, [sp, #8]
 8009966:	b963      	cbnz	r3, 8009982 <_dtoa_r+0x8f2>
 8009968:	4639      	mov	r1, r7
 800996a:	2205      	movs	r2, #5
 800996c:	4620      	mov	r0, r4
 800996e:	f000 f9a8 	bl	8009cc2 <__multadd>
 8009972:	4601      	mov	r1, r0
 8009974:	4607      	mov	r7, r0
 8009976:	9804      	ldr	r0, [sp, #16]
 8009978:	f000 fb6e 	bl	800a058 <__mcmp>
 800997c:	2800      	cmp	r0, #0
 800997e:	f73f adcc 	bgt.w	800951a <_dtoa_r+0x48a>
 8009982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009984:	465d      	mov	r5, fp
 8009986:	ea6f 0a03 	mvn.w	sl, r3
 800998a:	f04f 0900 	mov.w	r9, #0
 800998e:	4639      	mov	r1, r7
 8009990:	4620      	mov	r0, r4
 8009992:	f000 f97f 	bl	8009c94 <_Bfree>
 8009996:	2e00      	cmp	r6, #0
 8009998:	f43f aeb7 	beq.w	800970a <_dtoa_r+0x67a>
 800999c:	f1b9 0f00 	cmp.w	r9, #0
 80099a0:	d005      	beq.n	80099ae <_dtoa_r+0x91e>
 80099a2:	45b1      	cmp	r9, r6
 80099a4:	d003      	beq.n	80099ae <_dtoa_r+0x91e>
 80099a6:	4649      	mov	r1, r9
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 f973 	bl	8009c94 <_Bfree>
 80099ae:	4631      	mov	r1, r6
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 f96f 	bl	8009c94 <_Bfree>
 80099b6:	e6a8      	b.n	800970a <_dtoa_r+0x67a>
 80099b8:	2700      	movs	r7, #0
 80099ba:	463e      	mov	r6, r7
 80099bc:	e7e1      	b.n	8009982 <_dtoa_r+0x8f2>
 80099be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80099c2:	463e      	mov	r6, r7
 80099c4:	e5a9      	b.n	800951a <_dtoa_r+0x48a>
 80099c6:	bf00      	nop
 80099c8:	40240000 	.word	0x40240000
 80099cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 80fa 	beq.w	8009bcc <_dtoa_r+0xb3c>
 80099d8:	2d00      	cmp	r5, #0
 80099da:	dd05      	ble.n	80099e8 <_dtoa_r+0x958>
 80099dc:	4631      	mov	r1, r6
 80099de:	462a      	mov	r2, r5
 80099e0:	4620      	mov	r0, r4
 80099e2:	f000 fae5 	bl	8009fb0 <__lshift>
 80099e6:	4606      	mov	r6, r0
 80099e8:	9b07      	ldr	r3, [sp, #28]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d04c      	beq.n	8009a88 <_dtoa_r+0x9f8>
 80099ee:	6871      	ldr	r1, [r6, #4]
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 f91b 	bl	8009c2c <_Balloc>
 80099f6:	6932      	ldr	r2, [r6, #16]
 80099f8:	3202      	adds	r2, #2
 80099fa:	4605      	mov	r5, r0
 80099fc:	0092      	lsls	r2, r2, #2
 80099fe:	f106 010c 	add.w	r1, r6, #12
 8009a02:	300c      	adds	r0, #12
 8009a04:	f7fe fe28 	bl	8008658 <memcpy>
 8009a08:	2201      	movs	r2, #1
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 facf 	bl	8009fb0 <__lshift>
 8009a12:	9b00      	ldr	r3, [sp, #0]
 8009a14:	f8cd b014 	str.w	fp, [sp, #20]
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	46b1      	mov	r9, r6
 8009a1e:	9307      	str	r3, [sp, #28]
 8009a20:	4606      	mov	r6, r0
 8009a22:	4639      	mov	r1, r7
 8009a24:	9804      	ldr	r0, [sp, #16]
 8009a26:	f7ff faa7 	bl	8008f78 <quorem>
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a32:	9804      	ldr	r0, [sp, #16]
 8009a34:	f000 fb10 	bl	800a058 <__mcmp>
 8009a38:	4632      	mov	r2, r6
 8009a3a:	9000      	str	r0, [sp, #0]
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 fb24 	bl	800a08c <__mdiff>
 8009a44:	68c3      	ldr	r3, [r0, #12]
 8009a46:	4602      	mov	r2, r0
 8009a48:	bb03      	cbnz	r3, 8009a8c <_dtoa_r+0x9fc>
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	9008      	str	r0, [sp, #32]
 8009a4e:	9804      	ldr	r0, [sp, #16]
 8009a50:	f000 fb02 	bl	800a058 <__mcmp>
 8009a54:	9a08      	ldr	r2, [sp, #32]
 8009a56:	4603      	mov	r3, r0
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	9308      	str	r3, [sp, #32]
 8009a5e:	f000 f919 	bl	8009c94 <_Bfree>
 8009a62:	9b08      	ldr	r3, [sp, #32]
 8009a64:	b9a3      	cbnz	r3, 8009a90 <_dtoa_r+0xa00>
 8009a66:	9a06      	ldr	r2, [sp, #24]
 8009a68:	b992      	cbnz	r2, 8009a90 <_dtoa_r+0xa00>
 8009a6a:	9a07      	ldr	r2, [sp, #28]
 8009a6c:	b982      	cbnz	r2, 8009a90 <_dtoa_r+0xa00>
 8009a6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a72:	d029      	beq.n	8009ac8 <_dtoa_r+0xa38>
 8009a74:	9b00      	ldr	r3, [sp, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	dd01      	ble.n	8009a7e <_dtoa_r+0x9ee>
 8009a7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009a7e:	9b05      	ldr	r3, [sp, #20]
 8009a80:	1c5d      	adds	r5, r3, #1
 8009a82:	f883 8000 	strb.w	r8, [r3]
 8009a86:	e782      	b.n	800998e <_dtoa_r+0x8fe>
 8009a88:	4630      	mov	r0, r6
 8009a8a:	e7c2      	b.n	8009a12 <_dtoa_r+0x982>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e7e3      	b.n	8009a58 <_dtoa_r+0x9c8>
 8009a90:	9a00      	ldr	r2, [sp, #0]
 8009a92:	2a00      	cmp	r2, #0
 8009a94:	db04      	blt.n	8009aa0 <_dtoa_r+0xa10>
 8009a96:	d125      	bne.n	8009ae4 <_dtoa_r+0xa54>
 8009a98:	9a06      	ldr	r2, [sp, #24]
 8009a9a:	bb1a      	cbnz	r2, 8009ae4 <_dtoa_r+0xa54>
 8009a9c:	9a07      	ldr	r2, [sp, #28]
 8009a9e:	bb0a      	cbnz	r2, 8009ae4 <_dtoa_r+0xa54>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	ddec      	ble.n	8009a7e <_dtoa_r+0x9ee>
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	9904      	ldr	r1, [sp, #16]
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 fa81 	bl	8009fb0 <__lshift>
 8009aae:	4639      	mov	r1, r7
 8009ab0:	9004      	str	r0, [sp, #16]
 8009ab2:	f000 fad1 	bl	800a058 <__mcmp>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	dc03      	bgt.n	8009ac2 <_dtoa_r+0xa32>
 8009aba:	d1e0      	bne.n	8009a7e <_dtoa_r+0x9ee>
 8009abc:	f018 0f01 	tst.w	r8, #1
 8009ac0:	d0dd      	beq.n	8009a7e <_dtoa_r+0x9ee>
 8009ac2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ac6:	d1d8      	bne.n	8009a7a <_dtoa_r+0x9ea>
 8009ac8:	9b05      	ldr	r3, [sp, #20]
 8009aca:	9a05      	ldr	r2, [sp, #20]
 8009acc:	1c5d      	adds	r5, r3, #1
 8009ace:	2339      	movs	r3, #57	; 0x39
 8009ad0:	7013      	strb	r3, [r2, #0]
 8009ad2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ad6:	2b39      	cmp	r3, #57	; 0x39
 8009ad8:	f105 32ff 	add.w	r2, r5, #4294967295
 8009adc:	d04f      	beq.n	8009b7e <_dtoa_r+0xaee>
 8009ade:	3301      	adds	r3, #1
 8009ae0:	7013      	strb	r3, [r2, #0]
 8009ae2:	e754      	b.n	800998e <_dtoa_r+0x8fe>
 8009ae4:	9a05      	ldr	r2, [sp, #20]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f102 0501 	add.w	r5, r2, #1
 8009aec:	dd06      	ble.n	8009afc <_dtoa_r+0xa6c>
 8009aee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009af2:	d0e9      	beq.n	8009ac8 <_dtoa_r+0xa38>
 8009af4:	f108 0801 	add.w	r8, r8, #1
 8009af8:	9b05      	ldr	r3, [sp, #20]
 8009afa:	e7c2      	b.n	8009a82 <_dtoa_r+0x9f2>
 8009afc:	9a02      	ldr	r2, [sp, #8]
 8009afe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009b02:	eba5 030b 	sub.w	r3, r5, fp
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d021      	beq.n	8009b4e <_dtoa_r+0xabe>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	220a      	movs	r2, #10
 8009b0e:	9904      	ldr	r1, [sp, #16]
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 f8d6 	bl	8009cc2 <__multadd>
 8009b16:	45b1      	cmp	r9, r6
 8009b18:	9004      	str	r0, [sp, #16]
 8009b1a:	f04f 0300 	mov.w	r3, #0
 8009b1e:	f04f 020a 	mov.w	r2, #10
 8009b22:	4649      	mov	r1, r9
 8009b24:	4620      	mov	r0, r4
 8009b26:	d105      	bne.n	8009b34 <_dtoa_r+0xaa4>
 8009b28:	f000 f8cb 	bl	8009cc2 <__multadd>
 8009b2c:	4681      	mov	r9, r0
 8009b2e:	4606      	mov	r6, r0
 8009b30:	9505      	str	r5, [sp, #20]
 8009b32:	e776      	b.n	8009a22 <_dtoa_r+0x992>
 8009b34:	f000 f8c5 	bl	8009cc2 <__multadd>
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4681      	mov	r9, r0
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	220a      	movs	r2, #10
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 f8be 	bl	8009cc2 <__multadd>
 8009b46:	4606      	mov	r6, r0
 8009b48:	e7f2      	b.n	8009b30 <_dtoa_r+0xaa0>
 8009b4a:	f04f 0900 	mov.w	r9, #0
 8009b4e:	2201      	movs	r2, #1
 8009b50:	9904      	ldr	r1, [sp, #16]
 8009b52:	4620      	mov	r0, r4
 8009b54:	f000 fa2c 	bl	8009fb0 <__lshift>
 8009b58:	4639      	mov	r1, r7
 8009b5a:	9004      	str	r0, [sp, #16]
 8009b5c:	f000 fa7c 	bl	800a058 <__mcmp>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	dcb6      	bgt.n	8009ad2 <_dtoa_r+0xa42>
 8009b64:	d102      	bne.n	8009b6c <_dtoa_r+0xadc>
 8009b66:	f018 0f01 	tst.w	r8, #1
 8009b6a:	d1b2      	bne.n	8009ad2 <_dtoa_r+0xa42>
 8009b6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b70:	2b30      	cmp	r3, #48	; 0x30
 8009b72:	f105 32ff 	add.w	r2, r5, #4294967295
 8009b76:	f47f af0a 	bne.w	800998e <_dtoa_r+0x8fe>
 8009b7a:	4615      	mov	r5, r2
 8009b7c:	e7f6      	b.n	8009b6c <_dtoa_r+0xadc>
 8009b7e:	4593      	cmp	fp, r2
 8009b80:	d105      	bne.n	8009b8e <_dtoa_r+0xafe>
 8009b82:	2331      	movs	r3, #49	; 0x31
 8009b84:	f10a 0a01 	add.w	sl, sl, #1
 8009b88:	f88b 3000 	strb.w	r3, [fp]
 8009b8c:	e6ff      	b.n	800998e <_dtoa_r+0x8fe>
 8009b8e:	4615      	mov	r5, r2
 8009b90:	e79f      	b.n	8009ad2 <_dtoa_r+0xa42>
 8009b92:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009bf8 <_dtoa_r+0xb68>
 8009b96:	e007      	b.n	8009ba8 <_dtoa_r+0xb18>
 8009b98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b9a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009bfc <_dtoa_r+0xb6c>
 8009b9e:	b11b      	cbz	r3, 8009ba8 <_dtoa_r+0xb18>
 8009ba0:	f10b 0308 	add.w	r3, fp, #8
 8009ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	4658      	mov	r0, fp
 8009baa:	b017      	add	sp, #92	; 0x5c
 8009bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb0:	9b06      	ldr	r3, [sp, #24]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	f77f ae35 	ble.w	8009822 <_dtoa_r+0x792>
 8009bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bba:	9307      	str	r3, [sp, #28]
 8009bbc:	e649      	b.n	8009852 <_dtoa_r+0x7c2>
 8009bbe:	9b02      	ldr	r3, [sp, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dc03      	bgt.n	8009bcc <_dtoa_r+0xb3c>
 8009bc4:	9b06      	ldr	r3, [sp, #24]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	f73f aecc 	bgt.w	8009964 <_dtoa_r+0x8d4>
 8009bcc:	465d      	mov	r5, fp
 8009bce:	4639      	mov	r1, r7
 8009bd0:	9804      	ldr	r0, [sp, #16]
 8009bd2:	f7ff f9d1 	bl	8008f78 <quorem>
 8009bd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009bda:	f805 8b01 	strb.w	r8, [r5], #1
 8009bde:	9a02      	ldr	r2, [sp, #8]
 8009be0:	eba5 030b 	sub.w	r3, r5, fp
 8009be4:	429a      	cmp	r2, r3
 8009be6:	ddb0      	ble.n	8009b4a <_dtoa_r+0xaba>
 8009be8:	2300      	movs	r3, #0
 8009bea:	220a      	movs	r2, #10
 8009bec:	9904      	ldr	r1, [sp, #16]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 f867 	bl	8009cc2 <__multadd>
 8009bf4:	9004      	str	r0, [sp, #16]
 8009bf6:	e7ea      	b.n	8009bce <_dtoa_r+0xb3e>
 8009bf8:	0800c204 	.word	0x0800c204
 8009bfc:	0800c228 	.word	0x0800c228

08009c00 <_localeconv_r>:
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <_localeconv_r+0x14>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6a18      	ldr	r0, [r3, #32]
 8009c06:	4b04      	ldr	r3, [pc, #16]	; (8009c18 <_localeconv_r+0x18>)
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	bf08      	it	eq
 8009c0c:	4618      	moveq	r0, r3
 8009c0e:	30f0      	adds	r0, #240	; 0xf0
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20000054 	.word	0x20000054
 8009c18:	200000b8 	.word	0x200000b8

08009c1c <malloc>:
 8009c1c:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <malloc+0xc>)
 8009c1e:	4601      	mov	r1, r0
 8009c20:	6818      	ldr	r0, [r3, #0]
 8009c22:	f000 bb3b 	b.w	800a29c <_malloc_r>
 8009c26:	bf00      	nop
 8009c28:	20000054 	.word	0x20000054

08009c2c <_Balloc>:
 8009c2c:	b570      	push	{r4, r5, r6, lr}
 8009c2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c30:	4604      	mov	r4, r0
 8009c32:	460e      	mov	r6, r1
 8009c34:	b93d      	cbnz	r5, 8009c46 <_Balloc+0x1a>
 8009c36:	2010      	movs	r0, #16
 8009c38:	f7ff fff0 	bl	8009c1c <malloc>
 8009c3c:	6260      	str	r0, [r4, #36]	; 0x24
 8009c3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c42:	6005      	str	r5, [r0, #0]
 8009c44:	60c5      	str	r5, [r0, #12]
 8009c46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009c48:	68eb      	ldr	r3, [r5, #12]
 8009c4a:	b183      	cbz	r3, 8009c6e <_Balloc+0x42>
 8009c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009c54:	b9b8      	cbnz	r0, 8009c86 <_Balloc+0x5a>
 8009c56:	2101      	movs	r1, #1
 8009c58:	fa01 f506 	lsl.w	r5, r1, r6
 8009c5c:	1d6a      	adds	r2, r5, #5
 8009c5e:	0092      	lsls	r2, r2, #2
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 fabf 	bl	800a1e4 <_calloc_r>
 8009c66:	b160      	cbz	r0, 8009c82 <_Balloc+0x56>
 8009c68:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009c6c:	e00e      	b.n	8009c8c <_Balloc+0x60>
 8009c6e:	2221      	movs	r2, #33	; 0x21
 8009c70:	2104      	movs	r1, #4
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 fab6 	bl	800a1e4 <_calloc_r>
 8009c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c7a:	60e8      	str	r0, [r5, #12]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e4      	bne.n	8009c4c <_Balloc+0x20>
 8009c82:	2000      	movs	r0, #0
 8009c84:	bd70      	pop	{r4, r5, r6, pc}
 8009c86:	6802      	ldr	r2, [r0, #0]
 8009c88:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c92:	e7f7      	b.n	8009c84 <_Balloc+0x58>

08009c94 <_Bfree>:
 8009c94:	b570      	push	{r4, r5, r6, lr}
 8009c96:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c98:	4606      	mov	r6, r0
 8009c9a:	460d      	mov	r5, r1
 8009c9c:	b93c      	cbnz	r4, 8009cae <_Bfree+0x1a>
 8009c9e:	2010      	movs	r0, #16
 8009ca0:	f7ff ffbc 	bl	8009c1c <malloc>
 8009ca4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ca6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009caa:	6004      	str	r4, [r0, #0]
 8009cac:	60c4      	str	r4, [r0, #12]
 8009cae:	b13d      	cbz	r5, 8009cc0 <_Bfree+0x2c>
 8009cb0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009cb2:	686a      	ldr	r2, [r5, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cba:	6029      	str	r1, [r5, #0]
 8009cbc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}

08009cc2 <__multadd>:
 8009cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc6:	690d      	ldr	r5, [r1, #16]
 8009cc8:	461f      	mov	r7, r3
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460c      	mov	r4, r1
 8009cce:	f101 0c14 	add.w	ip, r1, #20
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f8dc 0000 	ldr.w	r0, [ip]
 8009cd8:	b281      	uxth	r1, r0
 8009cda:	fb02 7101 	mla	r1, r2, r1, r7
 8009cde:	0c0f      	lsrs	r7, r1, #16
 8009ce0:	0c00      	lsrs	r0, r0, #16
 8009ce2:	fb02 7000 	mla	r0, r2, r0, r7
 8009ce6:	b289      	uxth	r1, r1
 8009ce8:	3301      	adds	r3, #1
 8009cea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009cf4:	f84c 1b04 	str.w	r1, [ip], #4
 8009cf8:	dcec      	bgt.n	8009cd4 <__multadd+0x12>
 8009cfa:	b1d7      	cbz	r7, 8009d32 <__multadd+0x70>
 8009cfc:	68a3      	ldr	r3, [r4, #8]
 8009cfe:	42ab      	cmp	r3, r5
 8009d00:	dc12      	bgt.n	8009d28 <__multadd+0x66>
 8009d02:	6861      	ldr	r1, [r4, #4]
 8009d04:	4630      	mov	r0, r6
 8009d06:	3101      	adds	r1, #1
 8009d08:	f7ff ff90 	bl	8009c2c <_Balloc>
 8009d0c:	6922      	ldr	r2, [r4, #16]
 8009d0e:	3202      	adds	r2, #2
 8009d10:	f104 010c 	add.w	r1, r4, #12
 8009d14:	4680      	mov	r8, r0
 8009d16:	0092      	lsls	r2, r2, #2
 8009d18:	300c      	adds	r0, #12
 8009d1a:	f7fe fc9d 	bl	8008658 <memcpy>
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff ffb7 	bl	8009c94 <_Bfree>
 8009d26:	4644      	mov	r4, r8
 8009d28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	615f      	str	r7, [r3, #20]
 8009d30:	6125      	str	r5, [r4, #16]
 8009d32:	4620      	mov	r0, r4
 8009d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d38 <__hi0bits>:
 8009d38:	0c02      	lsrs	r2, r0, #16
 8009d3a:	0412      	lsls	r2, r2, #16
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	b9b2      	cbnz	r2, 8009d6e <__hi0bits+0x36>
 8009d40:	0403      	lsls	r3, r0, #16
 8009d42:	2010      	movs	r0, #16
 8009d44:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d48:	bf04      	itt	eq
 8009d4a:	021b      	lsleq	r3, r3, #8
 8009d4c:	3008      	addeq	r0, #8
 8009d4e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d52:	bf04      	itt	eq
 8009d54:	011b      	lsleq	r3, r3, #4
 8009d56:	3004      	addeq	r0, #4
 8009d58:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d5c:	bf04      	itt	eq
 8009d5e:	009b      	lsleq	r3, r3, #2
 8009d60:	3002      	addeq	r0, #2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	db06      	blt.n	8009d74 <__hi0bits+0x3c>
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	d503      	bpl.n	8009d72 <__hi0bits+0x3a>
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	4770      	bx	lr
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e7e8      	b.n	8009d44 <__hi0bits+0xc>
 8009d72:	2020      	movs	r0, #32
 8009d74:	4770      	bx	lr

08009d76 <__lo0bits>:
 8009d76:	6803      	ldr	r3, [r0, #0]
 8009d78:	f013 0207 	ands.w	r2, r3, #7
 8009d7c:	4601      	mov	r1, r0
 8009d7e:	d00b      	beq.n	8009d98 <__lo0bits+0x22>
 8009d80:	07da      	lsls	r2, r3, #31
 8009d82:	d423      	bmi.n	8009dcc <__lo0bits+0x56>
 8009d84:	0798      	lsls	r0, r3, #30
 8009d86:	bf49      	itett	mi
 8009d88:	085b      	lsrmi	r3, r3, #1
 8009d8a:	089b      	lsrpl	r3, r3, #2
 8009d8c:	2001      	movmi	r0, #1
 8009d8e:	600b      	strmi	r3, [r1, #0]
 8009d90:	bf5c      	itt	pl
 8009d92:	600b      	strpl	r3, [r1, #0]
 8009d94:	2002      	movpl	r0, #2
 8009d96:	4770      	bx	lr
 8009d98:	b298      	uxth	r0, r3
 8009d9a:	b9a8      	cbnz	r0, 8009dc8 <__lo0bits+0x52>
 8009d9c:	0c1b      	lsrs	r3, r3, #16
 8009d9e:	2010      	movs	r0, #16
 8009da0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009da4:	bf04      	itt	eq
 8009da6:	0a1b      	lsreq	r3, r3, #8
 8009da8:	3008      	addeq	r0, #8
 8009daa:	071a      	lsls	r2, r3, #28
 8009dac:	bf04      	itt	eq
 8009dae:	091b      	lsreq	r3, r3, #4
 8009db0:	3004      	addeq	r0, #4
 8009db2:	079a      	lsls	r2, r3, #30
 8009db4:	bf04      	itt	eq
 8009db6:	089b      	lsreq	r3, r3, #2
 8009db8:	3002      	addeq	r0, #2
 8009dba:	07da      	lsls	r2, r3, #31
 8009dbc:	d402      	bmi.n	8009dc4 <__lo0bits+0x4e>
 8009dbe:	085b      	lsrs	r3, r3, #1
 8009dc0:	d006      	beq.n	8009dd0 <__lo0bits+0x5a>
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	600b      	str	r3, [r1, #0]
 8009dc6:	4770      	bx	lr
 8009dc8:	4610      	mov	r0, r2
 8009dca:	e7e9      	b.n	8009da0 <__lo0bits+0x2a>
 8009dcc:	2000      	movs	r0, #0
 8009dce:	4770      	bx	lr
 8009dd0:	2020      	movs	r0, #32
 8009dd2:	4770      	bx	lr

08009dd4 <__i2b>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	2101      	movs	r1, #1
 8009dda:	f7ff ff27 	bl	8009c2c <_Balloc>
 8009dde:	2201      	movs	r2, #1
 8009de0:	6144      	str	r4, [r0, #20]
 8009de2:	6102      	str	r2, [r0, #16]
 8009de4:	bd10      	pop	{r4, pc}

08009de6 <__multiply>:
 8009de6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dea:	4614      	mov	r4, r2
 8009dec:	690a      	ldr	r2, [r1, #16]
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	bfb8      	it	lt
 8009df4:	460b      	movlt	r3, r1
 8009df6:	4688      	mov	r8, r1
 8009df8:	bfbc      	itt	lt
 8009dfa:	46a0      	movlt	r8, r4
 8009dfc:	461c      	movlt	r4, r3
 8009dfe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e02:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e0a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e0e:	eb07 0609 	add.w	r6, r7, r9
 8009e12:	42b3      	cmp	r3, r6
 8009e14:	bfb8      	it	lt
 8009e16:	3101      	addlt	r1, #1
 8009e18:	f7ff ff08 	bl	8009c2c <_Balloc>
 8009e1c:	f100 0514 	add.w	r5, r0, #20
 8009e20:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009e24:	462b      	mov	r3, r5
 8009e26:	2200      	movs	r2, #0
 8009e28:	4573      	cmp	r3, lr
 8009e2a:	d316      	bcc.n	8009e5a <__multiply+0x74>
 8009e2c:	f104 0214 	add.w	r2, r4, #20
 8009e30:	f108 0114 	add.w	r1, r8, #20
 8009e34:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009e38:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	9b00      	ldr	r3, [sp, #0]
 8009e40:	9201      	str	r2, [sp, #4]
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d80c      	bhi.n	8009e60 <__multiply+0x7a>
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	dd03      	ble.n	8009e52 <__multiply+0x6c>
 8009e4a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d05d      	beq.n	8009f0e <__multiply+0x128>
 8009e52:	6106      	str	r6, [r0, #16]
 8009e54:	b003      	add	sp, #12
 8009e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5a:	f843 2b04 	str.w	r2, [r3], #4
 8009e5e:	e7e3      	b.n	8009e28 <__multiply+0x42>
 8009e60:	f8b2 b000 	ldrh.w	fp, [r2]
 8009e64:	f1bb 0f00 	cmp.w	fp, #0
 8009e68:	d023      	beq.n	8009eb2 <__multiply+0xcc>
 8009e6a:	4689      	mov	r9, r1
 8009e6c:	46ac      	mov	ip, r5
 8009e6e:	f04f 0800 	mov.w	r8, #0
 8009e72:	f859 4b04 	ldr.w	r4, [r9], #4
 8009e76:	f8dc a000 	ldr.w	sl, [ip]
 8009e7a:	b2a3      	uxth	r3, r4
 8009e7c:	fa1f fa8a 	uxth.w	sl, sl
 8009e80:	fb0b a303 	mla	r3, fp, r3, sl
 8009e84:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009e88:	f8dc 4000 	ldr.w	r4, [ip]
 8009e8c:	4443      	add	r3, r8
 8009e8e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e92:	fb0b 840a 	mla	r4, fp, sl, r8
 8009e96:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009e9a:	46e2      	mov	sl, ip
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ea2:	454f      	cmp	r7, r9
 8009ea4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ea8:	f84a 3b04 	str.w	r3, [sl], #4
 8009eac:	d82b      	bhi.n	8009f06 <__multiply+0x120>
 8009eae:	f8cc 8004 	str.w	r8, [ip, #4]
 8009eb2:	9b01      	ldr	r3, [sp, #4]
 8009eb4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009eb8:	3204      	adds	r2, #4
 8009eba:	f1ba 0f00 	cmp.w	sl, #0
 8009ebe:	d020      	beq.n	8009f02 <__multiply+0x11c>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	4689      	mov	r9, r1
 8009ec4:	46a8      	mov	r8, r5
 8009ec6:	f04f 0b00 	mov.w	fp, #0
 8009eca:	f8b9 c000 	ldrh.w	ip, [r9]
 8009ece:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009ed2:	fb0a 440c 	mla	r4, sl, ip, r4
 8009ed6:	445c      	add	r4, fp
 8009ed8:	46c4      	mov	ip, r8
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ee0:	f84c 3b04 	str.w	r3, [ip], #4
 8009ee4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ee8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009eec:	0c1b      	lsrs	r3, r3, #16
 8009eee:	fb0a b303 	mla	r3, sl, r3, fp
 8009ef2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009ef6:	454f      	cmp	r7, r9
 8009ef8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009efc:	d805      	bhi.n	8009f0a <__multiply+0x124>
 8009efe:	f8c8 3004 	str.w	r3, [r8, #4]
 8009f02:	3504      	adds	r5, #4
 8009f04:	e79b      	b.n	8009e3e <__multiply+0x58>
 8009f06:	46d4      	mov	ip, sl
 8009f08:	e7b3      	b.n	8009e72 <__multiply+0x8c>
 8009f0a:	46e0      	mov	r8, ip
 8009f0c:	e7dd      	b.n	8009eca <__multiply+0xe4>
 8009f0e:	3e01      	subs	r6, #1
 8009f10:	e799      	b.n	8009e46 <__multiply+0x60>
	...

08009f14 <__pow5mult>:
 8009f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f18:	4615      	mov	r5, r2
 8009f1a:	f012 0203 	ands.w	r2, r2, #3
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460f      	mov	r7, r1
 8009f22:	d007      	beq.n	8009f34 <__pow5mult+0x20>
 8009f24:	3a01      	subs	r2, #1
 8009f26:	4c21      	ldr	r4, [pc, #132]	; (8009fac <__pow5mult+0x98>)
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f2e:	f7ff fec8 	bl	8009cc2 <__multadd>
 8009f32:	4607      	mov	r7, r0
 8009f34:	10ad      	asrs	r5, r5, #2
 8009f36:	d035      	beq.n	8009fa4 <__pow5mult+0x90>
 8009f38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f3a:	b93c      	cbnz	r4, 8009f4c <__pow5mult+0x38>
 8009f3c:	2010      	movs	r0, #16
 8009f3e:	f7ff fe6d 	bl	8009c1c <malloc>
 8009f42:	6270      	str	r0, [r6, #36]	; 0x24
 8009f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f48:	6004      	str	r4, [r0, #0]
 8009f4a:	60c4      	str	r4, [r0, #12]
 8009f4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f54:	b94c      	cbnz	r4, 8009f6a <__pow5mult+0x56>
 8009f56:	f240 2171 	movw	r1, #625	; 0x271
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff ff3a 	bl	8009dd4 <__i2b>
 8009f60:	2300      	movs	r3, #0
 8009f62:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f66:	4604      	mov	r4, r0
 8009f68:	6003      	str	r3, [r0, #0]
 8009f6a:	f04f 0800 	mov.w	r8, #0
 8009f6e:	07eb      	lsls	r3, r5, #31
 8009f70:	d50a      	bpl.n	8009f88 <__pow5mult+0x74>
 8009f72:	4639      	mov	r1, r7
 8009f74:	4622      	mov	r2, r4
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7ff ff35 	bl	8009de6 <__multiply>
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	4681      	mov	r9, r0
 8009f80:	4630      	mov	r0, r6
 8009f82:	f7ff fe87 	bl	8009c94 <_Bfree>
 8009f86:	464f      	mov	r7, r9
 8009f88:	106d      	asrs	r5, r5, #1
 8009f8a:	d00b      	beq.n	8009fa4 <__pow5mult+0x90>
 8009f8c:	6820      	ldr	r0, [r4, #0]
 8009f8e:	b938      	cbnz	r0, 8009fa0 <__pow5mult+0x8c>
 8009f90:	4622      	mov	r2, r4
 8009f92:	4621      	mov	r1, r4
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7ff ff26 	bl	8009de6 <__multiply>
 8009f9a:	6020      	str	r0, [r4, #0]
 8009f9c:	f8c0 8000 	str.w	r8, [r0]
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	e7e4      	b.n	8009f6e <__pow5mult+0x5a>
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009faa:	bf00      	nop
 8009fac:	0800c328 	.word	0x0800c328

08009fb0 <__lshift>:
 8009fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	6849      	ldr	r1, [r1, #4]
 8009fbe:	eb0a 0903 	add.w	r9, sl, r3
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	4616      	mov	r6, r2
 8009fc8:	f109 0501 	add.w	r5, r9, #1
 8009fcc:	42ab      	cmp	r3, r5
 8009fce:	db32      	blt.n	800a036 <__lshift+0x86>
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7ff fe2b 	bl	8009c2c <_Balloc>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	4680      	mov	r8, r0
 8009fda:	f100 0114 	add.w	r1, r0, #20
 8009fde:	461a      	mov	r2, r3
 8009fe0:	4553      	cmp	r3, sl
 8009fe2:	db2b      	blt.n	800a03c <__lshift+0x8c>
 8009fe4:	6920      	ldr	r0, [r4, #16]
 8009fe6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fea:	f104 0314 	add.w	r3, r4, #20
 8009fee:	f016 021f 	ands.w	r2, r6, #31
 8009ff2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ff6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ffa:	d025      	beq.n	800a048 <__lshift+0x98>
 8009ffc:	f1c2 0e20 	rsb	lr, r2, #32
 800a000:	2000      	movs	r0, #0
 800a002:	681e      	ldr	r6, [r3, #0]
 800a004:	468a      	mov	sl, r1
 800a006:	4096      	lsls	r6, r2
 800a008:	4330      	orrs	r0, r6
 800a00a:	f84a 0b04 	str.w	r0, [sl], #4
 800a00e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a012:	459c      	cmp	ip, r3
 800a014:	fa20 f00e 	lsr.w	r0, r0, lr
 800a018:	d814      	bhi.n	800a044 <__lshift+0x94>
 800a01a:	6048      	str	r0, [r1, #4]
 800a01c:	b108      	cbz	r0, 800a022 <__lshift+0x72>
 800a01e:	f109 0502 	add.w	r5, r9, #2
 800a022:	3d01      	subs	r5, #1
 800a024:	4638      	mov	r0, r7
 800a026:	f8c8 5010 	str.w	r5, [r8, #16]
 800a02a:	4621      	mov	r1, r4
 800a02c:	f7ff fe32 	bl	8009c94 <_Bfree>
 800a030:	4640      	mov	r0, r8
 800a032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a036:	3101      	adds	r1, #1
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	e7c7      	b.n	8009fcc <__lshift+0x1c>
 800a03c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a040:	3301      	adds	r3, #1
 800a042:	e7cd      	b.n	8009fe0 <__lshift+0x30>
 800a044:	4651      	mov	r1, sl
 800a046:	e7dc      	b.n	800a002 <__lshift+0x52>
 800a048:	3904      	subs	r1, #4
 800a04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a052:	459c      	cmp	ip, r3
 800a054:	d8f9      	bhi.n	800a04a <__lshift+0x9a>
 800a056:	e7e4      	b.n	800a022 <__lshift+0x72>

0800a058 <__mcmp>:
 800a058:	6903      	ldr	r3, [r0, #16]
 800a05a:	690a      	ldr	r2, [r1, #16]
 800a05c:	1a9b      	subs	r3, r3, r2
 800a05e:	b530      	push	{r4, r5, lr}
 800a060:	d10c      	bne.n	800a07c <__mcmp+0x24>
 800a062:	0092      	lsls	r2, r2, #2
 800a064:	3014      	adds	r0, #20
 800a066:	3114      	adds	r1, #20
 800a068:	1884      	adds	r4, r0, r2
 800a06a:	4411      	add	r1, r2
 800a06c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a070:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a074:	4295      	cmp	r5, r2
 800a076:	d003      	beq.n	800a080 <__mcmp+0x28>
 800a078:	d305      	bcc.n	800a086 <__mcmp+0x2e>
 800a07a:	2301      	movs	r3, #1
 800a07c:	4618      	mov	r0, r3
 800a07e:	bd30      	pop	{r4, r5, pc}
 800a080:	42a0      	cmp	r0, r4
 800a082:	d3f3      	bcc.n	800a06c <__mcmp+0x14>
 800a084:	e7fa      	b.n	800a07c <__mcmp+0x24>
 800a086:	f04f 33ff 	mov.w	r3, #4294967295
 800a08a:	e7f7      	b.n	800a07c <__mcmp+0x24>

0800a08c <__mdiff>:
 800a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a090:	460d      	mov	r5, r1
 800a092:	4607      	mov	r7, r0
 800a094:	4611      	mov	r1, r2
 800a096:	4628      	mov	r0, r5
 800a098:	4614      	mov	r4, r2
 800a09a:	f7ff ffdd 	bl	800a058 <__mcmp>
 800a09e:	1e06      	subs	r6, r0, #0
 800a0a0:	d108      	bne.n	800a0b4 <__mdiff+0x28>
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	f7ff fdc1 	bl	8009c2c <_Balloc>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b4:	bfa4      	itt	ge
 800a0b6:	4623      	movge	r3, r4
 800a0b8:	462c      	movge	r4, r5
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	6861      	ldr	r1, [r4, #4]
 800a0be:	bfa6      	itte	ge
 800a0c0:	461d      	movge	r5, r3
 800a0c2:	2600      	movge	r6, #0
 800a0c4:	2601      	movlt	r6, #1
 800a0c6:	f7ff fdb1 	bl	8009c2c <_Balloc>
 800a0ca:	692b      	ldr	r3, [r5, #16]
 800a0cc:	60c6      	str	r6, [r0, #12]
 800a0ce:	6926      	ldr	r6, [r4, #16]
 800a0d0:	f105 0914 	add.w	r9, r5, #20
 800a0d4:	f104 0214 	add.w	r2, r4, #20
 800a0d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a0dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a0e0:	f100 0514 	add.w	r5, r0, #20
 800a0e4:	f04f 0e00 	mov.w	lr, #0
 800a0e8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a0ec:	f859 4b04 	ldr.w	r4, [r9], #4
 800a0f0:	fa1e f18a 	uxtah	r1, lr, sl
 800a0f4:	b2a3      	uxth	r3, r4
 800a0f6:	1ac9      	subs	r1, r1, r3
 800a0f8:	0c23      	lsrs	r3, r4, #16
 800a0fa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a0fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a102:	b289      	uxth	r1, r1
 800a104:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a108:	45c8      	cmp	r8, r9
 800a10a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a10e:	4694      	mov	ip, r2
 800a110:	f845 3b04 	str.w	r3, [r5], #4
 800a114:	d8e8      	bhi.n	800a0e8 <__mdiff+0x5c>
 800a116:	45bc      	cmp	ip, r7
 800a118:	d304      	bcc.n	800a124 <__mdiff+0x98>
 800a11a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a11e:	b183      	cbz	r3, 800a142 <__mdiff+0xb6>
 800a120:	6106      	str	r6, [r0, #16]
 800a122:	e7c5      	b.n	800a0b0 <__mdiff+0x24>
 800a124:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a128:	fa1e f381 	uxtah	r3, lr, r1
 800a12c:	141a      	asrs	r2, r3, #16
 800a12e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a132:	b29b      	uxth	r3, r3
 800a134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a138:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a13c:	f845 3b04 	str.w	r3, [r5], #4
 800a140:	e7e9      	b.n	800a116 <__mdiff+0x8a>
 800a142:	3e01      	subs	r6, #1
 800a144:	e7e9      	b.n	800a11a <__mdiff+0x8e>

0800a146 <__d2b>:
 800a146:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a14a:	460e      	mov	r6, r1
 800a14c:	2101      	movs	r1, #1
 800a14e:	ec59 8b10 	vmov	r8, r9, d0
 800a152:	4615      	mov	r5, r2
 800a154:	f7ff fd6a 	bl	8009c2c <_Balloc>
 800a158:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a15c:	4607      	mov	r7, r0
 800a15e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a162:	bb34      	cbnz	r4, 800a1b2 <__d2b+0x6c>
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	f1b8 0300 	subs.w	r3, r8, #0
 800a16a:	d027      	beq.n	800a1bc <__d2b+0x76>
 800a16c:	a802      	add	r0, sp, #8
 800a16e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a172:	f7ff fe00 	bl	8009d76 <__lo0bits>
 800a176:	9900      	ldr	r1, [sp, #0]
 800a178:	b1f0      	cbz	r0, 800a1b8 <__d2b+0x72>
 800a17a:	9a01      	ldr	r2, [sp, #4]
 800a17c:	f1c0 0320 	rsb	r3, r0, #32
 800a180:	fa02 f303 	lsl.w	r3, r2, r3
 800a184:	430b      	orrs	r3, r1
 800a186:	40c2      	lsrs	r2, r0
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	9201      	str	r2, [sp, #4]
 800a18c:	9b01      	ldr	r3, [sp, #4]
 800a18e:	61bb      	str	r3, [r7, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	bf14      	ite	ne
 800a194:	2102      	movne	r1, #2
 800a196:	2101      	moveq	r1, #1
 800a198:	6139      	str	r1, [r7, #16]
 800a19a:	b1c4      	cbz	r4, 800a1ce <__d2b+0x88>
 800a19c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a1a0:	4404      	add	r4, r0
 800a1a2:	6034      	str	r4, [r6, #0]
 800a1a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1a8:	6028      	str	r0, [r5, #0]
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	b003      	add	sp, #12
 800a1ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1b6:	e7d5      	b.n	800a164 <__d2b+0x1e>
 800a1b8:	6179      	str	r1, [r7, #20]
 800a1ba:	e7e7      	b.n	800a18c <__d2b+0x46>
 800a1bc:	a801      	add	r0, sp, #4
 800a1be:	f7ff fdda 	bl	8009d76 <__lo0bits>
 800a1c2:	9b01      	ldr	r3, [sp, #4]
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	6139      	str	r1, [r7, #16]
 800a1ca:	3020      	adds	r0, #32
 800a1cc:	e7e5      	b.n	800a19a <__d2b+0x54>
 800a1ce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a1d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1d6:	6030      	str	r0, [r6, #0]
 800a1d8:	6918      	ldr	r0, [r3, #16]
 800a1da:	f7ff fdad 	bl	8009d38 <__hi0bits>
 800a1de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a1e2:	e7e1      	b.n	800a1a8 <__d2b+0x62>

0800a1e4 <_calloc_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	fb02 f401 	mul.w	r4, r2, r1
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	f000 f856 	bl	800a29c <_malloc_r>
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	b118      	cbz	r0, 800a1fc <_calloc_r+0x18>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	f7fe fa39 	bl	800866e <memset>
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	bd38      	pop	{r3, r4, r5, pc}

0800a200 <_free_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4605      	mov	r5, r0
 800a204:	2900      	cmp	r1, #0
 800a206:	d045      	beq.n	800a294 <_free_r+0x94>
 800a208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a20c:	1f0c      	subs	r4, r1, #4
 800a20e:	2b00      	cmp	r3, #0
 800a210:	bfb8      	it	lt
 800a212:	18e4      	addlt	r4, r4, r3
 800a214:	f000 fa29 	bl	800a66a <__malloc_lock>
 800a218:	4a1f      	ldr	r2, [pc, #124]	; (800a298 <_free_r+0x98>)
 800a21a:	6813      	ldr	r3, [r2, #0]
 800a21c:	4610      	mov	r0, r2
 800a21e:	b933      	cbnz	r3, 800a22e <_free_r+0x2e>
 800a220:	6063      	str	r3, [r4, #4]
 800a222:	6014      	str	r4, [r2, #0]
 800a224:	4628      	mov	r0, r5
 800a226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a22a:	f000 ba1f 	b.w	800a66c <__malloc_unlock>
 800a22e:	42a3      	cmp	r3, r4
 800a230:	d90c      	bls.n	800a24c <_free_r+0x4c>
 800a232:	6821      	ldr	r1, [r4, #0]
 800a234:	1862      	adds	r2, r4, r1
 800a236:	4293      	cmp	r3, r2
 800a238:	bf04      	itt	eq
 800a23a:	681a      	ldreq	r2, [r3, #0]
 800a23c:	685b      	ldreq	r3, [r3, #4]
 800a23e:	6063      	str	r3, [r4, #4]
 800a240:	bf04      	itt	eq
 800a242:	1852      	addeq	r2, r2, r1
 800a244:	6022      	streq	r2, [r4, #0]
 800a246:	6004      	str	r4, [r0, #0]
 800a248:	e7ec      	b.n	800a224 <_free_r+0x24>
 800a24a:	4613      	mov	r3, r2
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	b10a      	cbz	r2, 800a254 <_free_r+0x54>
 800a250:	42a2      	cmp	r2, r4
 800a252:	d9fa      	bls.n	800a24a <_free_r+0x4a>
 800a254:	6819      	ldr	r1, [r3, #0]
 800a256:	1858      	adds	r0, r3, r1
 800a258:	42a0      	cmp	r0, r4
 800a25a:	d10b      	bne.n	800a274 <_free_r+0x74>
 800a25c:	6820      	ldr	r0, [r4, #0]
 800a25e:	4401      	add	r1, r0
 800a260:	1858      	adds	r0, r3, r1
 800a262:	4282      	cmp	r2, r0
 800a264:	6019      	str	r1, [r3, #0]
 800a266:	d1dd      	bne.n	800a224 <_free_r+0x24>
 800a268:	6810      	ldr	r0, [r2, #0]
 800a26a:	6852      	ldr	r2, [r2, #4]
 800a26c:	605a      	str	r2, [r3, #4]
 800a26e:	4401      	add	r1, r0
 800a270:	6019      	str	r1, [r3, #0]
 800a272:	e7d7      	b.n	800a224 <_free_r+0x24>
 800a274:	d902      	bls.n	800a27c <_free_r+0x7c>
 800a276:	230c      	movs	r3, #12
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	e7d3      	b.n	800a224 <_free_r+0x24>
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	1821      	adds	r1, r4, r0
 800a280:	428a      	cmp	r2, r1
 800a282:	bf04      	itt	eq
 800a284:	6811      	ldreq	r1, [r2, #0]
 800a286:	6852      	ldreq	r2, [r2, #4]
 800a288:	6062      	str	r2, [r4, #4]
 800a28a:	bf04      	itt	eq
 800a28c:	1809      	addeq	r1, r1, r0
 800a28e:	6021      	streq	r1, [r4, #0]
 800a290:	605c      	str	r4, [r3, #4]
 800a292:	e7c7      	b.n	800a224 <_free_r+0x24>
 800a294:	bd38      	pop	{r3, r4, r5, pc}
 800a296:	bf00      	nop
 800a298:	200003f0 	.word	0x200003f0

0800a29c <_malloc_r>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	1ccd      	adds	r5, r1, #3
 800a2a0:	f025 0503 	bic.w	r5, r5, #3
 800a2a4:	3508      	adds	r5, #8
 800a2a6:	2d0c      	cmp	r5, #12
 800a2a8:	bf38      	it	cc
 800a2aa:	250c      	movcc	r5, #12
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	db01      	blt.n	800a2b6 <_malloc_r+0x1a>
 800a2b2:	42a9      	cmp	r1, r5
 800a2b4:	d903      	bls.n	800a2be <_malloc_r+0x22>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	6033      	str	r3, [r6, #0]
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	bd70      	pop	{r4, r5, r6, pc}
 800a2be:	f000 f9d4 	bl	800a66a <__malloc_lock>
 800a2c2:	4a21      	ldr	r2, [pc, #132]	; (800a348 <_malloc_r+0xac>)
 800a2c4:	6814      	ldr	r4, [r2, #0]
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	b991      	cbnz	r1, 800a2f0 <_malloc_r+0x54>
 800a2ca:	4c20      	ldr	r4, [pc, #128]	; (800a34c <_malloc_r+0xb0>)
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	b91b      	cbnz	r3, 800a2d8 <_malloc_r+0x3c>
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 f98f 	bl	800a5f4 <_sbrk_r>
 800a2d6:	6020      	str	r0, [r4, #0]
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f000 f98a 	bl	800a5f4 <_sbrk_r>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d124      	bne.n	800a32e <_malloc_r+0x92>
 800a2e4:	230c      	movs	r3, #12
 800a2e6:	6033      	str	r3, [r6, #0]
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f000 f9bf 	bl	800a66c <__malloc_unlock>
 800a2ee:	e7e4      	b.n	800a2ba <_malloc_r+0x1e>
 800a2f0:	680b      	ldr	r3, [r1, #0]
 800a2f2:	1b5b      	subs	r3, r3, r5
 800a2f4:	d418      	bmi.n	800a328 <_malloc_r+0x8c>
 800a2f6:	2b0b      	cmp	r3, #11
 800a2f8:	d90f      	bls.n	800a31a <_malloc_r+0x7e>
 800a2fa:	600b      	str	r3, [r1, #0]
 800a2fc:	50cd      	str	r5, [r1, r3]
 800a2fe:	18cc      	adds	r4, r1, r3
 800a300:	4630      	mov	r0, r6
 800a302:	f000 f9b3 	bl	800a66c <__malloc_unlock>
 800a306:	f104 000b 	add.w	r0, r4, #11
 800a30a:	1d23      	adds	r3, r4, #4
 800a30c:	f020 0007 	bic.w	r0, r0, #7
 800a310:	1ac3      	subs	r3, r0, r3
 800a312:	d0d3      	beq.n	800a2bc <_malloc_r+0x20>
 800a314:	425a      	negs	r2, r3
 800a316:	50e2      	str	r2, [r4, r3]
 800a318:	e7d0      	b.n	800a2bc <_malloc_r+0x20>
 800a31a:	428c      	cmp	r4, r1
 800a31c:	684b      	ldr	r3, [r1, #4]
 800a31e:	bf16      	itet	ne
 800a320:	6063      	strne	r3, [r4, #4]
 800a322:	6013      	streq	r3, [r2, #0]
 800a324:	460c      	movne	r4, r1
 800a326:	e7eb      	b.n	800a300 <_malloc_r+0x64>
 800a328:	460c      	mov	r4, r1
 800a32a:	6849      	ldr	r1, [r1, #4]
 800a32c:	e7cc      	b.n	800a2c8 <_malloc_r+0x2c>
 800a32e:	1cc4      	adds	r4, r0, #3
 800a330:	f024 0403 	bic.w	r4, r4, #3
 800a334:	42a0      	cmp	r0, r4
 800a336:	d005      	beq.n	800a344 <_malloc_r+0xa8>
 800a338:	1a21      	subs	r1, r4, r0
 800a33a:	4630      	mov	r0, r6
 800a33c:	f000 f95a 	bl	800a5f4 <_sbrk_r>
 800a340:	3001      	adds	r0, #1
 800a342:	d0cf      	beq.n	800a2e4 <_malloc_r+0x48>
 800a344:	6025      	str	r5, [r4, #0]
 800a346:	e7db      	b.n	800a300 <_malloc_r+0x64>
 800a348:	200003f0 	.word	0x200003f0
 800a34c:	200003f4 	.word	0x200003f4

0800a350 <__ssputs_r>:
 800a350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a354:	688e      	ldr	r6, [r1, #8]
 800a356:	429e      	cmp	r6, r3
 800a358:	4682      	mov	sl, r0
 800a35a:	460c      	mov	r4, r1
 800a35c:	4690      	mov	r8, r2
 800a35e:	4699      	mov	r9, r3
 800a360:	d837      	bhi.n	800a3d2 <__ssputs_r+0x82>
 800a362:	898a      	ldrh	r2, [r1, #12]
 800a364:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a368:	d031      	beq.n	800a3ce <__ssputs_r+0x7e>
 800a36a:	6825      	ldr	r5, [r4, #0]
 800a36c:	6909      	ldr	r1, [r1, #16]
 800a36e:	1a6f      	subs	r7, r5, r1
 800a370:	6965      	ldr	r5, [r4, #20]
 800a372:	2302      	movs	r3, #2
 800a374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a378:	fb95 f5f3 	sdiv	r5, r5, r3
 800a37c:	f109 0301 	add.w	r3, r9, #1
 800a380:	443b      	add	r3, r7
 800a382:	429d      	cmp	r5, r3
 800a384:	bf38      	it	cc
 800a386:	461d      	movcc	r5, r3
 800a388:	0553      	lsls	r3, r2, #21
 800a38a:	d530      	bpl.n	800a3ee <__ssputs_r+0x9e>
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7ff ff85 	bl	800a29c <_malloc_r>
 800a392:	4606      	mov	r6, r0
 800a394:	b950      	cbnz	r0, 800a3ac <__ssputs_r+0x5c>
 800a396:	230c      	movs	r3, #12
 800a398:	f8ca 3000 	str.w	r3, [sl]
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a2:	81a3      	strh	r3, [r4, #12]
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ac:	463a      	mov	r2, r7
 800a3ae:	6921      	ldr	r1, [r4, #16]
 800a3b0:	f7fe f952 	bl	8008658 <memcpy>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	6126      	str	r6, [r4, #16]
 800a3c2:	6165      	str	r5, [r4, #20]
 800a3c4:	443e      	add	r6, r7
 800a3c6:	1bed      	subs	r5, r5, r7
 800a3c8:	6026      	str	r6, [r4, #0]
 800a3ca:	60a5      	str	r5, [r4, #8]
 800a3cc:	464e      	mov	r6, r9
 800a3ce:	454e      	cmp	r6, r9
 800a3d0:	d900      	bls.n	800a3d4 <__ssputs_r+0x84>
 800a3d2:	464e      	mov	r6, r9
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	6820      	ldr	r0, [r4, #0]
 800a3da:	f000 f92d 	bl	800a638 <memmove>
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	1b9b      	subs	r3, r3, r6
 800a3e2:	60a3      	str	r3, [r4, #8]
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	441e      	add	r6, r3
 800a3e8:	6026      	str	r6, [r4, #0]
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e7dc      	b.n	800a3a8 <__ssputs_r+0x58>
 800a3ee:	462a      	mov	r2, r5
 800a3f0:	f000 f93d 	bl	800a66e <_realloc_r>
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d1e2      	bne.n	800a3c0 <__ssputs_r+0x70>
 800a3fa:	6921      	ldr	r1, [r4, #16]
 800a3fc:	4650      	mov	r0, sl
 800a3fe:	f7ff feff 	bl	800a200 <_free_r>
 800a402:	e7c8      	b.n	800a396 <__ssputs_r+0x46>

0800a404 <_svfiprintf_r>:
 800a404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	461d      	mov	r5, r3
 800a40a:	898b      	ldrh	r3, [r1, #12]
 800a40c:	061f      	lsls	r7, r3, #24
 800a40e:	b09d      	sub	sp, #116	; 0x74
 800a410:	4680      	mov	r8, r0
 800a412:	460c      	mov	r4, r1
 800a414:	4616      	mov	r6, r2
 800a416:	d50f      	bpl.n	800a438 <_svfiprintf_r+0x34>
 800a418:	690b      	ldr	r3, [r1, #16]
 800a41a:	b96b      	cbnz	r3, 800a438 <_svfiprintf_r+0x34>
 800a41c:	2140      	movs	r1, #64	; 0x40
 800a41e:	f7ff ff3d 	bl	800a29c <_malloc_r>
 800a422:	6020      	str	r0, [r4, #0]
 800a424:	6120      	str	r0, [r4, #16]
 800a426:	b928      	cbnz	r0, 800a434 <_svfiprintf_r+0x30>
 800a428:	230c      	movs	r3, #12
 800a42a:	f8c8 3000 	str.w	r3, [r8]
 800a42e:	f04f 30ff 	mov.w	r0, #4294967295
 800a432:	e0c8      	b.n	800a5c6 <_svfiprintf_r+0x1c2>
 800a434:	2340      	movs	r3, #64	; 0x40
 800a436:	6163      	str	r3, [r4, #20]
 800a438:	2300      	movs	r3, #0
 800a43a:	9309      	str	r3, [sp, #36]	; 0x24
 800a43c:	2320      	movs	r3, #32
 800a43e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a442:	2330      	movs	r3, #48	; 0x30
 800a444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a448:	9503      	str	r5, [sp, #12]
 800a44a:	f04f 0b01 	mov.w	fp, #1
 800a44e:	4637      	mov	r7, r6
 800a450:	463d      	mov	r5, r7
 800a452:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a456:	b10b      	cbz	r3, 800a45c <_svfiprintf_r+0x58>
 800a458:	2b25      	cmp	r3, #37	; 0x25
 800a45a:	d13e      	bne.n	800a4da <_svfiprintf_r+0xd6>
 800a45c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a460:	d00b      	beq.n	800a47a <_svfiprintf_r+0x76>
 800a462:	4653      	mov	r3, sl
 800a464:	4632      	mov	r2, r6
 800a466:	4621      	mov	r1, r4
 800a468:	4640      	mov	r0, r8
 800a46a:	f7ff ff71 	bl	800a350 <__ssputs_r>
 800a46e:	3001      	adds	r0, #1
 800a470:	f000 80a4 	beq.w	800a5bc <_svfiprintf_r+0x1b8>
 800a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a476:	4453      	add	r3, sl
 800a478:	9309      	str	r3, [sp, #36]	; 0x24
 800a47a:	783b      	ldrb	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 809d 	beq.w	800a5bc <_svfiprintf_r+0x1b8>
 800a482:	2300      	movs	r3, #0
 800a484:	f04f 32ff 	mov.w	r2, #4294967295
 800a488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a48c:	9304      	str	r3, [sp, #16]
 800a48e:	9307      	str	r3, [sp, #28]
 800a490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a494:	931a      	str	r3, [sp, #104]	; 0x68
 800a496:	462f      	mov	r7, r5
 800a498:	2205      	movs	r2, #5
 800a49a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a49e:	4850      	ldr	r0, [pc, #320]	; (800a5e0 <_svfiprintf_r+0x1dc>)
 800a4a0:	f7f5 feae 	bl	8000200 <memchr>
 800a4a4:	9b04      	ldr	r3, [sp, #16]
 800a4a6:	b9d0      	cbnz	r0, 800a4de <_svfiprintf_r+0xda>
 800a4a8:	06d9      	lsls	r1, r3, #27
 800a4aa:	bf44      	itt	mi
 800a4ac:	2220      	movmi	r2, #32
 800a4ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4b2:	071a      	lsls	r2, r3, #28
 800a4b4:	bf44      	itt	mi
 800a4b6:	222b      	movmi	r2, #43	; 0x2b
 800a4b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4bc:	782a      	ldrb	r2, [r5, #0]
 800a4be:	2a2a      	cmp	r2, #42	; 0x2a
 800a4c0:	d015      	beq.n	800a4ee <_svfiprintf_r+0xea>
 800a4c2:	9a07      	ldr	r2, [sp, #28]
 800a4c4:	462f      	mov	r7, r5
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	250a      	movs	r5, #10
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d0:	3b30      	subs	r3, #48	; 0x30
 800a4d2:	2b09      	cmp	r3, #9
 800a4d4:	d94d      	bls.n	800a572 <_svfiprintf_r+0x16e>
 800a4d6:	b1b8      	cbz	r0, 800a508 <_svfiprintf_r+0x104>
 800a4d8:	e00f      	b.n	800a4fa <_svfiprintf_r+0xf6>
 800a4da:	462f      	mov	r7, r5
 800a4dc:	e7b8      	b.n	800a450 <_svfiprintf_r+0x4c>
 800a4de:	4a40      	ldr	r2, [pc, #256]	; (800a5e0 <_svfiprintf_r+0x1dc>)
 800a4e0:	1a80      	subs	r0, r0, r2
 800a4e2:	fa0b f000 	lsl.w	r0, fp, r0
 800a4e6:	4318      	orrs	r0, r3
 800a4e8:	9004      	str	r0, [sp, #16]
 800a4ea:	463d      	mov	r5, r7
 800a4ec:	e7d3      	b.n	800a496 <_svfiprintf_r+0x92>
 800a4ee:	9a03      	ldr	r2, [sp, #12]
 800a4f0:	1d11      	adds	r1, r2, #4
 800a4f2:	6812      	ldr	r2, [r2, #0]
 800a4f4:	9103      	str	r1, [sp, #12]
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	db01      	blt.n	800a4fe <_svfiprintf_r+0xfa>
 800a4fa:	9207      	str	r2, [sp, #28]
 800a4fc:	e004      	b.n	800a508 <_svfiprintf_r+0x104>
 800a4fe:	4252      	negs	r2, r2
 800a500:	f043 0302 	orr.w	r3, r3, #2
 800a504:	9207      	str	r2, [sp, #28]
 800a506:	9304      	str	r3, [sp, #16]
 800a508:	783b      	ldrb	r3, [r7, #0]
 800a50a:	2b2e      	cmp	r3, #46	; 0x2e
 800a50c:	d10c      	bne.n	800a528 <_svfiprintf_r+0x124>
 800a50e:	787b      	ldrb	r3, [r7, #1]
 800a510:	2b2a      	cmp	r3, #42	; 0x2a
 800a512:	d133      	bne.n	800a57c <_svfiprintf_r+0x178>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	1d1a      	adds	r2, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9203      	str	r2, [sp, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfb8      	it	lt
 800a520:	f04f 33ff 	movlt.w	r3, #4294967295
 800a524:	3702      	adds	r7, #2
 800a526:	9305      	str	r3, [sp, #20]
 800a528:	4d2e      	ldr	r5, [pc, #184]	; (800a5e4 <_svfiprintf_r+0x1e0>)
 800a52a:	7839      	ldrb	r1, [r7, #0]
 800a52c:	2203      	movs	r2, #3
 800a52e:	4628      	mov	r0, r5
 800a530:	f7f5 fe66 	bl	8000200 <memchr>
 800a534:	b138      	cbz	r0, 800a546 <_svfiprintf_r+0x142>
 800a536:	2340      	movs	r3, #64	; 0x40
 800a538:	1b40      	subs	r0, r0, r5
 800a53a:	fa03 f000 	lsl.w	r0, r3, r0
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	4303      	orrs	r3, r0
 800a542:	3701      	adds	r7, #1
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	7839      	ldrb	r1, [r7, #0]
 800a548:	4827      	ldr	r0, [pc, #156]	; (800a5e8 <_svfiprintf_r+0x1e4>)
 800a54a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a54e:	2206      	movs	r2, #6
 800a550:	1c7e      	adds	r6, r7, #1
 800a552:	f7f5 fe55 	bl	8000200 <memchr>
 800a556:	2800      	cmp	r0, #0
 800a558:	d038      	beq.n	800a5cc <_svfiprintf_r+0x1c8>
 800a55a:	4b24      	ldr	r3, [pc, #144]	; (800a5ec <_svfiprintf_r+0x1e8>)
 800a55c:	bb13      	cbnz	r3, 800a5a4 <_svfiprintf_r+0x1a0>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	3307      	adds	r3, #7
 800a562:	f023 0307 	bic.w	r3, r3, #7
 800a566:	3308      	adds	r3, #8
 800a568:	9303      	str	r3, [sp, #12]
 800a56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56c:	444b      	add	r3, r9
 800a56e:	9309      	str	r3, [sp, #36]	; 0x24
 800a570:	e76d      	b.n	800a44e <_svfiprintf_r+0x4a>
 800a572:	fb05 3202 	mla	r2, r5, r2, r3
 800a576:	2001      	movs	r0, #1
 800a578:	460f      	mov	r7, r1
 800a57a:	e7a6      	b.n	800a4ca <_svfiprintf_r+0xc6>
 800a57c:	2300      	movs	r3, #0
 800a57e:	3701      	adds	r7, #1
 800a580:	9305      	str	r3, [sp, #20]
 800a582:	4619      	mov	r1, r3
 800a584:	250a      	movs	r5, #10
 800a586:	4638      	mov	r0, r7
 800a588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a58c:	3a30      	subs	r2, #48	; 0x30
 800a58e:	2a09      	cmp	r2, #9
 800a590:	d903      	bls.n	800a59a <_svfiprintf_r+0x196>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0c8      	beq.n	800a528 <_svfiprintf_r+0x124>
 800a596:	9105      	str	r1, [sp, #20]
 800a598:	e7c6      	b.n	800a528 <_svfiprintf_r+0x124>
 800a59a:	fb05 2101 	mla	r1, r5, r1, r2
 800a59e:	2301      	movs	r3, #1
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	e7f0      	b.n	800a586 <_svfiprintf_r+0x182>
 800a5a4:	ab03      	add	r3, sp, #12
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <_svfiprintf_r+0x1ec>)
 800a5ac:	a904      	add	r1, sp, #16
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	f7fe f8fa 	bl	80087a8 <_printf_float>
 800a5b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a5b8:	4681      	mov	r9, r0
 800a5ba:	d1d6      	bne.n	800a56a <_svfiprintf_r+0x166>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	065b      	lsls	r3, r3, #25
 800a5c0:	f53f af35 	bmi.w	800a42e <_svfiprintf_r+0x2a>
 800a5c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5c6:	b01d      	add	sp, #116	; 0x74
 800a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5cc:	ab03      	add	r3, sp, #12
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <_svfiprintf_r+0x1ec>)
 800a5d4:	a904      	add	r1, sp, #16
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	f7fe fb9c 	bl	8008d14 <_printf_i>
 800a5dc:	e7ea      	b.n	800a5b4 <_svfiprintf_r+0x1b0>
 800a5de:	bf00      	nop
 800a5e0:	0800c334 	.word	0x0800c334
 800a5e4:	0800c33a 	.word	0x0800c33a
 800a5e8:	0800c33e 	.word	0x0800c33e
 800a5ec:	080087a9 	.word	0x080087a9
 800a5f0:	0800a351 	.word	0x0800a351

0800a5f4 <_sbrk_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4c06      	ldr	r4, [pc, #24]	; (800a610 <_sbrk_r+0x1c>)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	6023      	str	r3, [r4, #0]
 800a600:	f7fd ff74 	bl	80084ec <_sbrk>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_sbrk_r+0x1a>
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_sbrk_r+0x1a>
 800a60c:	602b      	str	r3, [r5, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	20000868 	.word	0x20000868

0800a614 <__ascii_mbtowc>:
 800a614:	b082      	sub	sp, #8
 800a616:	b901      	cbnz	r1, 800a61a <__ascii_mbtowc+0x6>
 800a618:	a901      	add	r1, sp, #4
 800a61a:	b142      	cbz	r2, 800a62e <__ascii_mbtowc+0x1a>
 800a61c:	b14b      	cbz	r3, 800a632 <__ascii_mbtowc+0x1e>
 800a61e:	7813      	ldrb	r3, [r2, #0]
 800a620:	600b      	str	r3, [r1, #0]
 800a622:	7812      	ldrb	r2, [r2, #0]
 800a624:	1c10      	adds	r0, r2, #0
 800a626:	bf18      	it	ne
 800a628:	2001      	movne	r0, #1
 800a62a:	b002      	add	sp, #8
 800a62c:	4770      	bx	lr
 800a62e:	4610      	mov	r0, r2
 800a630:	e7fb      	b.n	800a62a <__ascii_mbtowc+0x16>
 800a632:	f06f 0001 	mvn.w	r0, #1
 800a636:	e7f8      	b.n	800a62a <__ascii_mbtowc+0x16>

0800a638 <memmove>:
 800a638:	4288      	cmp	r0, r1
 800a63a:	b510      	push	{r4, lr}
 800a63c:	eb01 0302 	add.w	r3, r1, r2
 800a640:	d807      	bhi.n	800a652 <memmove+0x1a>
 800a642:	1e42      	subs	r2, r0, #1
 800a644:	4299      	cmp	r1, r3
 800a646:	d00a      	beq.n	800a65e <memmove+0x26>
 800a648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a64c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a650:	e7f8      	b.n	800a644 <memmove+0xc>
 800a652:	4283      	cmp	r3, r0
 800a654:	d9f5      	bls.n	800a642 <memmove+0xa>
 800a656:	1881      	adds	r1, r0, r2
 800a658:	1ad2      	subs	r2, r2, r3
 800a65a:	42d3      	cmn	r3, r2
 800a65c:	d100      	bne.n	800a660 <memmove+0x28>
 800a65e:	bd10      	pop	{r4, pc}
 800a660:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a664:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a668:	e7f7      	b.n	800a65a <memmove+0x22>

0800a66a <__malloc_lock>:
 800a66a:	4770      	bx	lr

0800a66c <__malloc_unlock>:
 800a66c:	4770      	bx	lr

0800a66e <_realloc_r>:
 800a66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a670:	4607      	mov	r7, r0
 800a672:	4614      	mov	r4, r2
 800a674:	460e      	mov	r6, r1
 800a676:	b921      	cbnz	r1, 800a682 <_realloc_r+0x14>
 800a678:	4611      	mov	r1, r2
 800a67a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a67e:	f7ff be0d 	b.w	800a29c <_malloc_r>
 800a682:	b922      	cbnz	r2, 800a68e <_realloc_r+0x20>
 800a684:	f7ff fdbc 	bl	800a200 <_free_r>
 800a688:	4625      	mov	r5, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68e:	f000 f821 	bl	800a6d4 <_malloc_usable_size_r>
 800a692:	42a0      	cmp	r0, r4
 800a694:	d20f      	bcs.n	800a6b6 <_realloc_r+0x48>
 800a696:	4621      	mov	r1, r4
 800a698:	4638      	mov	r0, r7
 800a69a:	f7ff fdff 	bl	800a29c <_malloc_r>
 800a69e:	4605      	mov	r5, r0
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d0f2      	beq.n	800a68a <_realloc_r+0x1c>
 800a6a4:	4631      	mov	r1, r6
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	f7fd ffd6 	bl	8008658 <memcpy>
 800a6ac:	4631      	mov	r1, r6
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	f7ff fda6 	bl	800a200 <_free_r>
 800a6b4:	e7e9      	b.n	800a68a <_realloc_r+0x1c>
 800a6b6:	4635      	mov	r5, r6
 800a6b8:	e7e7      	b.n	800a68a <_realloc_r+0x1c>

0800a6ba <__ascii_wctomb>:
 800a6ba:	b149      	cbz	r1, 800a6d0 <__ascii_wctomb+0x16>
 800a6bc:	2aff      	cmp	r2, #255	; 0xff
 800a6be:	bf85      	ittet	hi
 800a6c0:	238a      	movhi	r3, #138	; 0x8a
 800a6c2:	6003      	strhi	r3, [r0, #0]
 800a6c4:	700a      	strbls	r2, [r1, #0]
 800a6c6:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6ca:	bf98      	it	ls
 800a6cc:	2001      	movls	r0, #1
 800a6ce:	4770      	bx	lr
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	4770      	bx	lr

0800a6d4 <_malloc_usable_size_r>:
 800a6d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6d8:	1f18      	subs	r0, r3, #4
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	bfbc      	itt	lt
 800a6de:	580b      	ldrlt	r3, [r1, r0]
 800a6e0:	18c0      	addlt	r0, r0, r3
 800a6e2:	4770      	bx	lr

0800a6e4 <_init>:
 800a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e6:	bf00      	nop
 800a6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ea:	bc08      	pop	{r3}
 800a6ec:	469e      	mov	lr, r3
 800a6ee:	4770      	bx	lr

0800a6f0 <_fini>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	bf00      	nop
 800a6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f6:	bc08      	pop	{r3}
 800a6f8:	469e      	mov	lr, r3
 800a6fa:	4770      	bx	lr
