
ams_f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003f68  08003f68  00013f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f80  08003f80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f80  08003f80  00013f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f88  08003f88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  08003f9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08003f9c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d190  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b98  00000000  00000000  0002d1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  0002ed68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  0002fa98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023bd8  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e58  00000000  00000000  000542d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d85af  00000000  00000000  0005e130  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001366df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  0013675c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003f50 	.word	0x08003f50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08003f50 	.word	0x08003f50

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f92b 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f002 ff9a 	bl	8003c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f943 	bl	800101a <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f90b 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	20000000 	.word	0x20000000

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000004 	.word	0x20000004
 8000df4:	20000028 	.word	0x20000028

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000028 	.word	0x20000028

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff29 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff3e 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff31 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffa2 	bl	8000f6c <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	e177      	b.n	8001340 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	429a      	cmp	r2, r3
 800106a:	f040 8166 	bne.w	800133a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x4a>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b12      	cmp	r3, #18
 800107c:	d123      	bne.n	80010c6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	69b9      	ldr	r1, [r7, #24]
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0203 	and.w	r2, r3, #3
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d00b      	beq.n	800111a <HAL_GPIO_Init+0xe6>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110e:	2b11      	cmp	r3, #17
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b12      	cmp	r3, #18
 8001118:	d130      	bne.n	800117c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 0201 	and.w	r2, r3, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80c0 	beq.w	800133a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b65      	ldr	r3, [pc, #404]	; (8001354 <HAL_GPIO_Init+0x320>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a64      	ldr	r2, [pc, #400]	; (8001354 <HAL_GPIO_Init+0x320>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b62      	ldr	r3, [pc, #392]	; (8001354 <HAL_GPIO_Init+0x320>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d6:	4a60      	ldr	r2, [pc, #384]	; (8001358 <HAL_GPIO_Init+0x324>)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a57      	ldr	r2, [pc, #348]	; (800135c <HAL_GPIO_Init+0x328>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d037      	beq.n	8001272 <HAL_GPIO_Init+0x23e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a56      	ldr	r2, [pc, #344]	; (8001360 <HAL_GPIO_Init+0x32c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d031      	beq.n	800126e <HAL_GPIO_Init+0x23a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a55      	ldr	r2, [pc, #340]	; (8001364 <HAL_GPIO_Init+0x330>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02b      	beq.n	800126a <HAL_GPIO_Init+0x236>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a54      	ldr	r2, [pc, #336]	; (8001368 <HAL_GPIO_Init+0x334>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x232>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a53      	ldr	r2, [pc, #332]	; (800136c <HAL_GPIO_Init+0x338>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x22e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_GPIO_Init+0x33c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x22a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a51      	ldr	r2, [pc, #324]	; (8001374 <HAL_GPIO_Init+0x340>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x226>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a50      	ldr	r2, [pc, #320]	; (8001378 <HAL_GPIO_Init+0x344>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x222>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x348>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x21e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x34c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x21a>
 800124a:	2309      	movs	r3, #9
 800124c:	e012      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800124e:	230a      	movs	r3, #10
 8001250:	e010      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001252:	2308      	movs	r3, #8
 8001254:	e00e      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001256:	2307      	movs	r3, #7
 8001258:	e00c      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800125a:	2306      	movs	r3, #6
 800125c:	e00a      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800125e:	2305      	movs	r3, #5
 8001260:	e008      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001262:	2304      	movs	r3, #4
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001266:	2303      	movs	r3, #3
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001272:	2300      	movs	r3, #0
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	f002 0203 	and.w	r2, r2, #3
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001284:	4934      	ldr	r1, [pc, #208]	; (8001358 <HAL_GPIO_Init+0x324>)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <HAL_GPIO_Init+0x350>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b6:	4a33      	ldr	r2, [pc, #204]	; (8001384 <HAL_GPIO_Init+0x350>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012bc:	4b31      	ldr	r3, [pc, #196]	; (8001384 <HAL_GPIO_Init+0x350>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e0:	4a28      	ldr	r2, [pc, #160]	; (8001384 <HAL_GPIO_Init+0x350>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_GPIO_Init+0x350>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <HAL_GPIO_Init+0x350>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <HAL_GPIO_Init+0x350>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_GPIO_Init+0x350>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b0f      	cmp	r3, #15
 8001344:	f67f ae84 	bls.w	8001050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001348:	bf00      	nop
 800134a:	3724      	adds	r7, #36	; 0x24
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021400 	.word	0x40021400
 8001374:	40021800 	.word	0x40021800
 8001378:	40021c00 	.word	0x40021c00
 800137c:	40022000 	.word	0x40022000
 8001380:	40022400 	.word	0x40022400
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	041a      	lsls	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	401a      	ands	r2, r3
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d104      	bne.n	80013de <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	041a      	lsls	r2, r3, #16
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e10f      	b.n	8001622 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f002 fc66 	bl	8003ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001434:	f001 fc2e 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8001438:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a7b      	ldr	r2, [pc, #492]	; (800162c <HAL_I2C_Init+0x23c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d807      	bhi.n	8001454 <HAL_I2C_Init+0x64>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a7a      	ldr	r2, [pc, #488]	; (8001630 <HAL_I2C_Init+0x240>)
 8001448:	4293      	cmp	r3, r2
 800144a:	bf94      	ite	ls
 800144c:	2301      	movls	r3, #1
 800144e:	2300      	movhi	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	e006      	b.n	8001462 <HAL_I2C_Init+0x72>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4a77      	ldr	r2, [pc, #476]	; (8001634 <HAL_I2C_Init+0x244>)
 8001458:	4293      	cmp	r3, r2
 800145a:	bf94      	ite	ls
 800145c:	2301      	movls	r3, #1
 800145e:	2300      	movhi	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0db      	b.n	8001622 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a72      	ldr	r2, [pc, #456]	; (8001638 <HAL_I2C_Init+0x248>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9b      	lsrs	r3, r3, #18
 8001474:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a64      	ldr	r2, [pc, #400]	; (800162c <HAL_I2C_Init+0x23c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d802      	bhi.n	80014a4 <HAL_I2C_Init+0xb4>
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3301      	adds	r3, #1
 80014a2:	e009      	b.n	80014b8 <HAL_I2C_Init+0xc8>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014aa:	fb02 f303 	mul.w	r3, r2, r3
 80014ae:	4a63      	ldr	r2, [pc, #396]	; (800163c <HAL_I2C_Init+0x24c>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	3301      	adds	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	430b      	orrs	r3, r1
 80014be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4956      	ldr	r1, [pc, #344]	; (800162c <HAL_I2C_Init+0x23c>)
 80014d4:	428b      	cmp	r3, r1
 80014d6:	d80d      	bhi.n	80014f4 <HAL_I2C_Init+0x104>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	bf38      	it	cc
 80014f0:	2304      	movcc	r3, #4
 80014f2:	e04f      	b.n	8001594 <HAL_I2C_Init+0x1a4>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d111      	bne.n	8001520 <HAL_I2C_Init+0x130>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e58      	subs	r0, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	440b      	add	r3, r1
 800150a:	fbb0 f3f3 	udiv	r3, r0, r3
 800150e:	3301      	adds	r3, #1
 8001510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	e012      	b.n	8001546 <HAL_I2C_Init+0x156>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1e58      	subs	r0, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	0099      	lsls	r1, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	fbb0 f3f3 	udiv	r3, r0, r3
 8001536:	3301      	adds	r3, #1
 8001538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Init+0x15e>
 800154a:	2301      	movs	r3, #1
 800154c:	e022      	b.n	8001594 <HAL_I2C_Init+0x1a4>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10e      	bne.n	8001574 <HAL_I2C_Init+0x184>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1e58      	subs	r0, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6859      	ldr	r1, [r3, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	440b      	add	r3, r1
 8001564:	fbb0 f3f3 	udiv	r3, r0, r3
 8001568:	3301      	adds	r3, #1
 800156a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001572:	e00f      	b.n	8001594 <HAL_I2C_Init+0x1a4>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1e58      	subs	r0, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	0099      	lsls	r1, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	fbb0 f3f3 	udiv	r3, r0, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	6809      	ldr	r1, [r1, #0]
 8001598:	4313      	orrs	r3, r2
 800159a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69da      	ldr	r2, [r3, #28]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6911      	ldr	r1, [r2, #16]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68d2      	ldr	r2, [r2, #12]
 80015ce:	4311      	orrs	r1, r2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	430b      	orrs	r3, r1
 80015d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	000186a0 	.word	0x000186a0
 8001630:	001e847f 	.word	0x001e847f
 8001634:	003d08ff 	.word	0x003d08ff
 8001638:	431bde83 	.word	0x431bde83
 800163c:	10624dd3 	.word	0x10624dd3

08001640 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	817b      	strh	r3, [r7, #10]
 8001652:	460b      	mov	r3, r1
 8001654:	813b      	strh	r3, [r7, #8]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800165a:	f7ff fbcd 	bl	8000df8 <HAL_GetTick>
 800165e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	f040 80d9 	bne.w	8001820 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2319      	movs	r3, #25
 8001674:	2201      	movs	r2, #1
 8001676:	496d      	ldr	r1, [pc, #436]	; (800182c <HAL_I2C_Mem_Write+0x1ec>)
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 fc5b 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001684:	2302      	movs	r3, #2
 8001686:	e0cc      	b.n	8001822 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_I2C_Mem_Write+0x56>
 8001692:	2302      	movs	r3, #2
 8001694:	e0c5      	b.n	8001822 <HAL_I2C_Mem_Write+0x1e2>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d007      	beq.n	80016bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2221      	movs	r2, #33	; 0x21
 80016d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6a3a      	ldr	r2, [r7, #32]
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4a4d      	ldr	r2, [pc, #308]	; (8001830 <HAL_I2C_Mem_Write+0x1f0>)
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016fe:	88f8      	ldrh	r0, [r7, #6]
 8001700:	893a      	ldrh	r2, [r7, #8]
 8001702:	8979      	ldrh	r1, [r7, #10]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4603      	mov	r3, r0
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fab6 	bl	8001c80 <I2C_RequestMemoryWrite>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d052      	beq.n	80017c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e081      	b.n	8001822 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 fcdc 	bl	80020e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00d      	beq.n	800174a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b04      	cmp	r3, #4
 8001734:	d107      	bne.n	8001746 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06b      	b.n	8001822 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001770:	b29b      	uxth	r3, r3
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b04      	cmp	r3, #4
 8001786:	d11b      	bne.n	80017c0 <HAL_I2C_Mem_Write+0x180>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	2b00      	cmp	r3, #0
 800178e:	d017      	beq.n	80017c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1aa      	bne.n	800171e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fcc8 	bl	8002162 <I2C_WaitOnBTFFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00d      	beq.n	80017f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d107      	bne.n	80017f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e016      	b.n	8001822 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2220      	movs	r2, #32
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	e000      	b.n	8001822 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001820:	2302      	movs	r3, #2
  }
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	00100002 	.word	0x00100002
 8001830:	ffff0000 	.word	0xffff0000

08001834 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af02      	add	r7, sp, #8
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	817b      	strh	r3, [r7, #10]
 8001846:	460b      	mov	r3, r1
 8001848:	813b      	strh	r3, [r7, #8]
 800184a:	4613      	mov	r3, r2
 800184c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800184e:	f7ff fad3 	bl	8000df8 <HAL_GetTick>
 8001852:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b20      	cmp	r3, #32
 800185e:	f040 8208 	bne.w	8001c72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2319      	movs	r3, #25
 8001868:	2201      	movs	r2, #1
 800186a:	497b      	ldr	r1, [pc, #492]	; (8001a58 <HAL_I2C_Mem_Read+0x224>)
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 fb61 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001878:	2302      	movs	r3, #2
 800187a:	e1fb      	b.n	8001c74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_I2C_Mem_Read+0x56>
 8001886:	2302      	movs	r3, #2
 8001888:	e1f4      	b.n	8001c74 <HAL_I2C_Mem_Read+0x440>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d007      	beq.n	80018b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2222      	movs	r2, #34	; 0x22
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a5b      	ldr	r2, [pc, #364]	; (8001a5c <HAL_I2C_Mem_Read+0x228>)
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018f2:	88f8      	ldrh	r0, [r7, #6]
 80018f4:	893a      	ldrh	r2, [r7, #8]
 80018f6:	8979      	ldrh	r1, [r7, #10]
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4603      	mov	r3, r0
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fa46 	bl	8001d94 <I2C_RequestMemoryRead>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e1b0      	b.n	8001c74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	2b00      	cmp	r3, #0
 8001918:	d113      	bne.n	8001942 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	623b      	str	r3, [r7, #32]
 800192e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e184      	b.n	8001c4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	2b01      	cmp	r3, #1
 8001948:	d11b      	bne.n	8001982 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e164      	b.n	8001c4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	2b02      	cmp	r3, #2
 8001988:	d11b      	bne.n	80019c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001998:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	e144      	b.n	8001c4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019d8:	e138      	b.n	8001c4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019de:	2b03      	cmp	r3, #3
 80019e0:	f200 80f1 	bhi.w	8001bc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d123      	bne.n	8001a34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fbf7 	bl	80021e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e139      	b.n	8001c74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a32:	e10b      	b.n	8001c4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d14e      	bne.n	8001ada <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a42:	2200      	movs	r2, #0
 8001a44:	4906      	ldr	r1, [pc, #24]	; (8001a60 <HAL_I2C_Mem_Read+0x22c>)
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fa74 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e10e      	b.n	8001c74 <HAL_I2C_Mem_Read+0x440>
 8001a56:	bf00      	nop
 8001a58:	00100002 	.word	0x00100002
 8001a5c:	ffff0000 	.word	0xffff0000
 8001a60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ad8:	e0b8      	b.n	8001c4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4966      	ldr	r1, [pc, #408]	; (8001c7c <HAL_I2C_Mem_Read+0x448>)
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 fa25 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0bf      	b.n	8001c74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	494f      	ldr	r1, [pc, #316]	; (8001c7c <HAL_I2C_Mem_Read+0x448>)
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f9f7 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e091      	b.n	8001c74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bc4:	e042      	b.n	8001c4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fb0a 	bl	80021e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e04c      	b.n	8001c74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d118      	bne.n	8001c4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f aec2 	bne.w	80019da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
  }
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	00010004 	.word	0x00010004

08001c80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	817b      	strh	r3, [r7, #10]
 8001c92:	460b      	mov	r3, r1
 8001c94:	813b      	strh	r3, [r7, #8]
 8001c96:	4613      	mov	r3, r2
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f93c 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e05f      	b.n	8001d86 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	6a3a      	ldr	r2, [r7, #32]
 8001cda:	492d      	ldr	r1, [pc, #180]	; (8001d90 <I2C_RequestMemoryWrite+0x110>)
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f980 	bl	8001fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e04c      	b.n	8001d86 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d04:	6a39      	ldr	r1, [r7, #32]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f9ea 	bl	80020e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00d      	beq.n	8001d2e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d107      	bne.n	8001d2a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e02b      	b.n	8001d86 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d34:	893b      	ldrh	r3, [r7, #8]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	611a      	str	r2, [r3, #16]
 8001d3e:	e021      	b.n	8001d84 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d40:	893b      	ldrh	r3, [r7, #8]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f9c4 	bl	80020e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00d      	beq.n	8001d7a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d107      	bne.n	8001d76 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e005      	b.n	8001d86 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d7a:	893b      	ldrh	r3, [r7, #8]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	00010002 	.word	0x00010002

08001d94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	4611      	mov	r1, r2
 8001da0:	461a      	mov	r2, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	817b      	strh	r3, [r7, #10]
 8001da6:	460b      	mov	r3, r1
 8001da8:	813b      	strh	r3, [r7, #8]
 8001daa:	4613      	mov	r3, r2
 8001dac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f8aa 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e09e      	b.n	8001f28 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	494c      	ldr	r1, [pc, #304]	; (8001f30 <I2C_RequestMemoryRead+0x19c>)
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f8ee 	bl	8001fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e08b      	b.n	8001f28 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	6a39      	ldr	r1, [r7, #32]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f958 	bl	80020e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00d      	beq.n	8001e52 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d107      	bne.n	8001e4e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06a      	b.n	8001f28 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e58:	893b      	ldrh	r3, [r7, #8]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	e021      	b.n	8001ea8 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e64:	893b      	ldrh	r3, [r7, #8]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f932 	bl	80020e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00d      	beq.n	8001e9e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d107      	bne.n	8001e9a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e044      	b.n	8001f28 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e9e:	893b      	ldrh	r3, [r7, #8]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eaa:	6a39      	ldr	r1, [r7, #32]
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f917 	bl	80020e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d107      	bne.n	8001ed0 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e029      	b.n	8001f28 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f81f 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e013      	b.n	8001f28 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f00:	897b      	ldrh	r3, [r7, #10]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	6a3a      	ldr	r2, [r7, #32]
 8001f14:	4906      	ldr	r1, [pc, #24]	; (8001f30 <I2C_RequestMemoryRead+0x19c>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f863 	bl	8001fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	00010002 	.word	0x00010002

08001f34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f44:	e025      	b.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d021      	beq.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7fe ff53 	bl	8000df8 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d116      	bne.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f043 0220 	orr.w	r2, r3, #32
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e023      	b.n	8001fda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10d      	bne.n	8001fb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf0c      	ite	eq
 8001fae:	2301      	moveq	r3, #1
 8001fb0:	2300      	movne	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	e00c      	b.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bf0c      	ite	eq
 8001fca:	2301      	moveq	r3, #1
 8001fcc:	2300      	movne	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d0b6      	beq.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ff0:	e051      	b.n	8002096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002000:	d123      	bne.n	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002010:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800201a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f043 0204 	orr.w	r2, r3, #4
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e046      	b.n	80020d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d021      	beq.n	8002096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002052:	f7fe fed1 	bl	8000df8 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	429a      	cmp	r2, r3
 8002060:	d302      	bcc.n	8002068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d116      	bne.n	8002096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f043 0220 	orr.w	r2, r3, #32
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e020      	b.n	80020d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d10c      	bne.n	80020ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4013      	ands	r3, r2
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	e00b      	b.n	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4013      	ands	r3, r2
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d18d      	bne.n	8001ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ec:	e02d      	b.n	800214a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f8ce 	bl	8002290 <I2C_IsAcknowledgeFailed>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e02d      	b.n	800215a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d021      	beq.n	800214a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002106:	f7fe fe77 	bl	8000df8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	d302      	bcc.n	800211c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d116      	bne.n	800214a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e007      	b.n	800215a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002154:	2b80      	cmp	r3, #128	; 0x80
 8002156:	d1ca      	bne.n	80020ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800216e:	e02d      	b.n	80021cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f88d 	bl	8002290 <I2C_IsAcknowledgeFailed>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e02d      	b.n	80021dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002186:	d021      	beq.n	80021cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002188:	f7fe fe36 	bl	8000df8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	d302      	bcc.n	800219e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e007      	b.n	80021dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d1ca      	bne.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021f0:	e042      	b.n	8002278 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d119      	bne.n	8002234 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0210 	mvn.w	r2, #16
 8002208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e029      	b.n	8002288 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002234:	f7fe fde0 	bl	8000df8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	429a      	cmp	r2, r3
 8002242:	d302      	bcc.n	800224a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f043 0220 	orr.w	r2, r3, #32
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e007      	b.n	8002288 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002282:	2b40      	cmp	r3, #64	; 0x40
 8002284:	d1b5      	bne.n	80021f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a6:	d11b      	bne.n	80022e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f043 0204 	orr.w	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b20      	cmp	r3, #32
 8002302:	d129      	bne.n	8002358 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0210 	bic.w	r2, r2, #16
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	e000      	b.n	800235a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002358:	2302      	movs	r3, #2
  }
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b20      	cmp	r3, #32
 800237e:	d12a      	bne.n	80023d6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80023a0:	89fb      	ldrh	r3, [r7, #14]
 80023a2:	f023 030f 	bic.w	r3, r3, #15
 80023a6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	89fa      	ldrh	r2, [r7, #14]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
  }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_PWREx_EnableOverDrive+0x90>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_PWREx_EnableOverDrive+0x90>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_PWREx_EnableOverDrive+0x90>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_PWREx_EnableOverDrive+0x94>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002410:	f7fe fcf2 	bl	8000df8 <HAL_GetTick>
 8002414:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002416:	e009      	b.n	800242c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002418:	f7fe fcee 	bl	8000df8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002426:	d901      	bls.n	800242c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e01f      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_PWREx_EnableOverDrive+0x98>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d1ee      	bne.n	8002418 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7fe fcda 	bl	8000df8 <HAL_GetTick>
 8002444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002446:	e009      	b.n	800245c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002448:	f7fe fcd6 	bl	8000df8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002456:	d901      	bls.n	800245c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e007      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_PWREx_EnableOverDrive+0x98>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002468:	d1ee      	bne.n	8002448 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	420e0040 	.word	0x420e0040
 800247c:	40007000 	.word	0x40007000
 8002480:	420e0044 	.word	0x420e0044

08002484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e22d      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d075      	beq.n	800258e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a2:	4ba3      	ldr	r3, [pc, #652]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ae:	4ba0      	ldr	r3, [pc, #640]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b9d      	ldr	r3, [pc, #628]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	4b99      	ldr	r3, [pc, #612]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05b      	beq.n	800258c <HAL_RCC_OscConfig+0x108>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d157      	bne.n	800258c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e208      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x74>
 80024ea:	4b91      	ldr	r3, [pc, #580]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a90      	ldr	r2, [pc, #576]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a8a      	ldr	r2, [pc, #552]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a87      	ldr	r2, [pc, #540]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 800251c:	4b84      	ldr	r3, [pc, #528]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a83      	ldr	r2, [pc, #524]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b81      	ldr	r3, [pc, #516]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a80      	ldr	r2, [pc, #512]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fc5c 	bl	8000df8 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe fc58 	bl	8000df8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1cd      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b76      	ldr	r3, [pc, #472]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xc0>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fc48 	bl	8000df8 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fc44 	bl	8000df8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1b9      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0xe8>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259a:	4b65      	ldr	r3, [pc, #404]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a6:	4b62      	ldr	r3, [pc, #392]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e18d      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b56      	ldr	r3, [pc, #344]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4952      	ldr	r1, [pc, #328]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e03a      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCC_OscConfig+0x2b0>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe fbfd 	bl	8000df8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002602:	f7fe fbf9 	bl	8000df8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e16e      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	4b46      	ldr	r3, [pc, #280]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4940      	ldr	r1, [pc, #256]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCC_OscConfig+0x2b0>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fbdc 	bl	8000df8 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fbd8 	bl	8000df8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e14d      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d030      	beq.n	80026d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCC_OscConfig+0x2b4>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fbbc 	bl	8000df8 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe fbb8 	bl	8000df8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e12d      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x200>
 80026a2:	e015      	b.n	80026d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_OscConfig+0x2b4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fba5 	bl	8000df8 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe fba1 	bl	8000df8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e116      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a0 	beq.w	800281e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800270a:	2301      	movs	r3, #1
 800270c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x2b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d121      	bne.n	800275e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCC_OscConfig+0x2b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_RCC_OscConfig+0x2b8>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002726:	f7fe fb67 	bl	8000df8 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	e011      	b.n	8002752 <HAL_RCC_OscConfig+0x2ce>
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	42470000 	.word	0x42470000
 8002738:	42470e80 	.word	0x42470e80
 800273c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002740:	f7fe fb5a 	bl	8000df8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0cf      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <HAL_RCC_OscConfig+0x478>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d106      	bne.n	8002774 <HAL_RCC_OscConfig+0x2f0>
 8002766:	4b66      	ldr	r3, [pc, #408]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a65      	ldr	r2, [pc, #404]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
 8002772:	e01c      	b.n	80027ae <HAL_RCC_OscConfig+0x32a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x312>
 800277c:	4b60      	ldr	r3, [pc, #384]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a5f      	ldr	r2, [pc, #380]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	4b5d      	ldr	r3, [pc, #372]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a5c      	ldr	r2, [pc, #368]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x32a>
 8002796:	4b5a      	ldr	r3, [pc, #360]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a59      	ldr	r2, [pc, #356]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a56      	ldr	r2, [pc, #344]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fb1f 	bl	8000df8 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe fb1b 	bl	8000df8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e08e      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ee      	beq.n	80027be <HAL_RCC_OscConfig+0x33a>
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7fe fb09 	bl	8000df8 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe fb05 	bl	8000df8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e078      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d064      	beq.n	80028f0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d05c      	beq.n	80028ec <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d141      	bne.n	80028be <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_RCC_OscConfig+0x480>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe fada 	bl	8000df8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fad6 	bl	8000df8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e04b      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	3b01      	subs	r3, #1
 8002880:	041b      	lsls	r3, r3, #16
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	491d      	ldr	r1, [pc, #116]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <HAL_RCC_OscConfig+0x480>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7fe faaf 	bl	8000df8 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe faab 	bl	8000df8 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e020      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x41a>
 80028bc:	e018      	b.n	80028f0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_RCC_OscConfig+0x480>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe fa98 	bl	8000df8 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fa94 	bl	8000df8 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e009      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_RCC_OscConfig+0x47c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x448>
 80028ea:	e001      	b.n	80028f0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40007000 	.word	0x40007000
 8002900:	40023800 	.word	0x40023800
 8002904:	42470060 	.word	0x42470060

08002908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0ca      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b67      	ldr	r3, [pc, #412]	; (8002abc <HAL_RCC_ClockConfig+0x1b4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d90c      	bls.n	8002944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b64      	ldr	r3, [pc, #400]	; (8002abc <HAL_RCC_ClockConfig+0x1b4>)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b62      	ldr	r3, [pc, #392]	; (8002abc <HAL_RCC_ClockConfig+0x1b4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b6      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800295c:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a57      	ldr	r2, [pc, #348]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002974:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a51      	ldr	r2, [pc, #324]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800297e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	494c      	ldr	r1, [pc, #304]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d044      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d119      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07d      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d003      	beq.n	80029c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c6:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06d      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d6:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e065      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f023 0203 	bic.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4933      	ldr	r1, [pc, #204]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f8:	f7fe f9fe 	bl	8000df8 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f7fe f9fa 	bl	8000df8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e04d      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 020c 	and.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1eb      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_ClockConfig+0x1b4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d20c      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_ClockConfig+0x1b4>)
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_RCC_ClockConfig+0x1b4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e030      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4915      	ldr	r1, [pc, #84]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	490d      	ldr	r1, [pc, #52]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a8e:	f000 f81d 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a92:	4601      	mov	r1, r0
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	5cd3      	ldrb	r3, [r2, r3]
 8002aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fe f960 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	08003f68 	.word	0x08003f68
 8002ac8:	20000008 	.word	0x20000008

08002acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	2300      	movs	r3, #0
 8002adc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae2:	4b63      	ldr	r3, [pc, #396]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d007      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x32>
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d008      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x38>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 80b4 	bne.w	8002c60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b5e      	ldr	r3, [pc, #376]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002afa:	60bb      	str	r3, [r7, #8]
       break;
 8002afc:	e0b3      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b00:	60bb      	str	r3, [r7, #8]
      break;
 8002b02:	e0b0      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b04:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d04a      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	4b55      	ldr	r3, [pc, #340]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	099b      	lsrs	r3, r3, #6
 8002b20:	f04f 0400 	mov.w	r4, #0
 8002b24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	ea03 0501 	and.w	r5, r3, r1
 8002b30:	ea04 0602 	and.w	r6, r4, r2
 8002b34:	4629      	mov	r1, r5
 8002b36:	4632      	mov	r2, r6
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	f04f 0400 	mov.w	r4, #0
 8002b40:	0154      	lsls	r4, r2, #5
 8002b42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b46:	014b      	lsls	r3, r1, #5
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	1b49      	subs	r1, r1, r5
 8002b4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	f04f 0400 	mov.w	r4, #0
 8002b5a:	0194      	lsls	r4, r2, #6
 8002b5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b60:	018b      	lsls	r3, r1, #6
 8002b62:	1a5b      	subs	r3, r3, r1
 8002b64:	eb64 0402 	sbc.w	r4, r4, r2
 8002b68:	f04f 0100 	mov.w	r1, #0
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	00e2      	lsls	r2, r4, #3
 8002b72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b76:	00d9      	lsls	r1, r3, #3
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	195b      	adds	r3, r3, r5
 8002b7e:	eb44 0406 	adc.w	r4, r4, r6
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	0262      	lsls	r2, r4, #9
 8002b8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b90:	0259      	lsls	r1, r3, #9
 8002b92:	460b      	mov	r3, r1
 8002b94:	4614      	mov	r4, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	4621      	mov	r1, r4
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	f7fd ff42 	bl	8000a2c <__aeabi_uldivmod>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	460c      	mov	r4, r1
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	e049      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	f04f 0400 	mov.w	r4, #0
 8002bba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	ea03 0501 	and.w	r5, r3, r1
 8002bc6:	ea04 0602 	and.w	r6, r4, r2
 8002bca:	4629      	mov	r1, r5
 8002bcc:	4632      	mov	r2, r6
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0154      	lsls	r4, r2, #5
 8002bd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bdc:	014b      	lsls	r3, r1, #5
 8002bde:	4619      	mov	r1, r3
 8002be0:	4622      	mov	r2, r4
 8002be2:	1b49      	subs	r1, r1, r5
 8002be4:	eb62 0206 	sbc.w	r2, r2, r6
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	f04f 0400 	mov.w	r4, #0
 8002bf0:	0194      	lsls	r4, r2, #6
 8002bf2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	1a5b      	subs	r3, r3, r1
 8002bfa:	eb64 0402 	sbc.w	r4, r4, r2
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	00e2      	lsls	r2, r4, #3
 8002c08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c0c:	00d9      	lsls	r1, r3, #3
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4614      	mov	r4, r2
 8002c12:	195b      	adds	r3, r3, r5
 8002c14:	eb44 0406 	adc.w	r4, r4, r6
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	02a2      	lsls	r2, r4, #10
 8002c22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c26:	0299      	lsls	r1, r3, #10
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4614      	mov	r4, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	4621      	mov	r1, r4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4623      	mov	r3, r4
 8002c3a:	f7fd fef7 	bl	8000a2c <__aeabi_uldivmod>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460c      	mov	r4, r1
 8002c42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	60bb      	str	r3, [r7, #8]
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c62:	60bb      	str	r3, [r7, #8]
      break;
 8002c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c66:	68bb      	ldr	r3, [r7, #8]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	00f42400 	.word	0x00f42400
 8002c78:	007a1200 	.word	0x007a1200

08002c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000008 	.word	0x20000008

08002c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c98:	f7ff fff0 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002c9c:	4601      	mov	r1, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	0a9b      	lsrs	r3, r3, #10
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	08003f78 	.word	0x08003f78

08002cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e01d      	b.n	8002d0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f001 f848 	bl	8003d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f000 f95e 	bl	8002fbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	d007      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d122      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d11b      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0202 	mvn.w	r2, #2
 8002d86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f8ee 	bl	8002f7e <HAL_TIM_IC_CaptureCallback>
 8002da2:	e005      	b.n	8002db0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f8e0 	bl	8002f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8f1 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d122      	bne.n	8002e0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d11b      	bne.n	8002e0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0204 	mvn.w	r2, #4
 8002dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f8c4 	bl	8002f7e <HAL_TIM_IC_CaptureCallback>
 8002df6:	e005      	b.n	8002e04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f8b6 	bl	8002f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f8c7 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d122      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d11b      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0208 	mvn.w	r2, #8
 8002e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f89a 	bl	8002f7e <HAL_TIM_IC_CaptureCallback>
 8002e4a:	e005      	b.n	8002e58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f88c 	bl	8002f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f89d 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d122      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d11b      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0210 	mvn.w	r2, #16
 8002e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2208      	movs	r2, #8
 8002e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f870 	bl	8002f7e <HAL_TIM_IC_CaptureCallback>
 8002e9e:	e005      	b.n	8002eac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f862 	bl	8002f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f873 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10e      	bne.n	8002ede <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0201 	mvn.w	r2, #1
 8002ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fb0d 	bl	80034f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d10e      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	2b80      	cmp	r3, #128	; 0x80
 8002ef8:	d107      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f948 	bl	800319a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d10e      	bne.n	8002f36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d107      	bne.n	8002f36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f838 	bl	8002fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d10e      	bne.n	8002f62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d107      	bne.n	8002f62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f06f 0220 	mvn.w	r2, #32
 8002f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f912 	bl	8003186 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a40      	ldr	r2, [pc, #256]	; (80030d0 <TIM_Base_SetConfig+0x114>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fda:	d00f      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a3d      	ldr	r2, [pc, #244]	; (80030d4 <TIM_Base_SetConfig+0x118>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a3c      	ldr	r2, [pc, #240]	; (80030d8 <TIM_Base_SetConfig+0x11c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d007      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <TIM_Base_SetConfig+0x120>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a3a      	ldr	r2, [pc, #232]	; (80030e0 <TIM_Base_SetConfig+0x124>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d108      	bne.n	800300e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a2f      	ldr	r2, [pc, #188]	; (80030d0 <TIM_Base_SetConfig+0x114>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02b      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d027      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a2c      	ldr	r2, [pc, #176]	; (80030d4 <TIM_Base_SetConfig+0x118>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d023      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a2b      	ldr	r2, [pc, #172]	; (80030d8 <TIM_Base_SetConfig+0x11c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01f      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <TIM_Base_SetConfig+0x120>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01b      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a29      	ldr	r2, [pc, #164]	; (80030e0 <TIM_Base_SetConfig+0x124>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d017      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a28      	ldr	r2, [pc, #160]	; (80030e4 <TIM_Base_SetConfig+0x128>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a27      	ldr	r2, [pc, #156]	; (80030e8 <TIM_Base_SetConfig+0x12c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00f      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a26      	ldr	r2, [pc, #152]	; (80030ec <TIM_Base_SetConfig+0x130>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00b      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a25      	ldr	r2, [pc, #148]	; (80030f0 <TIM_Base_SetConfig+0x134>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d007      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a24      	ldr	r2, [pc, #144]	; (80030f4 <TIM_Base_SetConfig+0x138>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a23      	ldr	r2, [pc, #140]	; (80030f8 <TIM_Base_SetConfig+0x13c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d108      	bne.n	8003080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <TIM_Base_SetConfig+0x114>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0xf8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a0c      	ldr	r2, [pc, #48]	; (80030e0 <TIM_Base_SetConfig+0x124>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	615a      	str	r2, [r3, #20]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40010400 	.word	0x40010400
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800
 80030f0:	40001800 	.word	0x40001800
 80030f4:	40001c00 	.word	0x40001c00
 80030f8:	40002000 	.word	0x40002000

080030fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003110:	2302      	movs	r3, #2
 8003112:	e032      	b.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800314c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4313      	orrs	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <i2cm_read>:

/**
 * Read a I2C (real) register from AS7265x
 */
uint8_t i2cm_read(I2C_HandleTypeDef *hi2c, uint8_t addr)
    {
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b088      	sub	sp, #32
 80031b2:	af04      	add	r7, sp, #16
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70fb      	strb	r3, [r7, #3]
	uint8_t result;
	HAL_I2C_Mem_Read(hi2c, (uint16_t)(0x49 << 1) ,addr, I2C_MEMADD_SIZE_8BIT, &result , sizeof(result) , 100);
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	b29a      	uxth	r2, r3
 80031be:	2364      	movs	r3, #100	; 0x64
 80031c0:	9302      	str	r3, [sp, #8]
 80031c2:	2301      	movs	r3, #1
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	f107 030f 	add.w	r3, r7, #15
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2301      	movs	r3, #1
 80031ce:	2192      	movs	r1, #146	; 0x92
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7fe fb2f 	bl	8001834 <HAL_I2C_Mem_Read>
	return result;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
    }
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <i2cm_write>:

/**
 * Write a I2C (real) register to AS7265x.
 */
void i2cm_write(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t value)
    {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af04      	add	r7, sp, #16
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	70fb      	strb	r3, [r7, #3]
 80031ec:	4613      	mov	r3, r2
 80031ee:	70bb      	strb	r3, [r7, #2]

	HAL_I2C_Mem_Write(hi2c, (uint16_t)(0x49 << 1) , addr, I2C_MEMADD_SIZE_8BIT, &value, sizeof(value) , 100); //AS7265X_I2C_ADDR
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	2364      	movs	r3, #100	; 0x64
 80031f6:	9302      	str	r3, [sp, #8]
 80031f8:	2301      	movs	r3, #1
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	1cbb      	adds	r3, r7, #2
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2301      	movs	r3, #1
 8003202:	2192      	movs	r1, #146	; 0x92
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7fe fa1b 	bl	8001640 <HAL_I2C_Mem_Write>
    }
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <as7265x_vreg_write>:

/**
 * Write to AS7265x virtual register. Based on code in the AS7265x datasheet.
 */
void as7265x_vreg_write(I2C_HandleTypeDef *hi2c, uint8_t virtualReg, uint8_t d)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	70fb      	strb	r3, [r7, #3]
 800321e:	4613      	mov	r3, r2
 8003220:	70bb      	strb	r3, [r7, #2]
	volatile uint8_t status;
	while (1)
	{
		// Read slave I²C status to see if the write buffer is ready.
		status = i2cm_read(hi2c,I2C_AS72XX_SLAVE_STATUS_REG);
 8003222:	2100      	movs	r1, #0
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ffc2 	bl	80031ae <i2cm_read>
 800322a:	4603      	mov	r3, r0
 800322c:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) 
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d000      	beq.n	800323c <as7265x_vreg_write+0x2a>
		status = i2cm_read(hi2c,I2C_AS72XX_SLAVE_STATUS_REG);
 800323a:	e7f2      	b.n	8003222 <as7265x_vreg_write+0x10>
			// No inbound TX pending at slave. Okay to write now.
			break ;
 800323c:	bf00      	nop
//		HAL_Delay(5);
	}
	// Send the virtual register address (enabling bit 7 to indicate a write).
	i2cm_write(hi2c, I2C_AS72XX_SLAVE_WRITE_REG, (virtualReg | 0x80)) ;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	2101      	movs	r1, #1
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffc8 	bl	80031e0 <i2cm_write>
	while (1)
	{
		// Read the slave I²C status to see if the write buffer is ready.
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG) ;
 8003250:	2100      	movs	r1, #0
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ffab 	bl	80031ae <i2cm_read>
 8003258:	4603      	mov	r3, r0
 800325a:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d000      	beq.n	800326a <as7265x_vreg_write+0x58>
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG) ;
 8003268:	e7f2      	b.n	8003250 <as7265x_vreg_write+0x3e>
		// No inbound TX pending at slave. Okay to write data now.
		break ;
 800326a:	bf00      	nop
//		HAL_Delay(5);

	}
	// Send the data to complete the operation.
	i2cm_write(hi2c,I2C_AS72XX_SLAVE_WRITE_REG, d) ;
 800326c:	78bb      	ldrb	r3, [r7, #2]
 800326e:	461a      	mov	r2, r3
 8003270:	2101      	movs	r1, #1
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ffb4 	bl	80031e0 <i2cm_write>
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <as7265x_vreg_read>:

/**
 * Read from AS7265x virtual register. Based on code in the AS7265x datasheet. 
 */
uint8_t as7265x_vreg_read(I2C_HandleTypeDef *hi2c, uint8_t virtualReg)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]

	// Wait for WRITE flag to clear
	while (1)
	{
		// Read slave I²C status to see if the read buffer is ready.
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG) ;
 800328c:	2100      	movs	r1, #0
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff8d 	bl	80031ae <i2cm_read>
 8003294:	4603      	mov	r3, r0
 8003296:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d000      	beq.n	80032a6 <as7265x_vreg_read+0x26>
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG) ;
 80032a4:	e7f2      	b.n	800328c <as7265x_vreg_read+0xc>
		// No inbound TX pending at slave. Okay to write now.
		break;
 80032a6:	bf00      	nop

	}


	// Send the virtual register address (disabling bit 7 to indicate a read).
	i2cm_write(hi2c, I2C_AS72XX_SLAVE_WRITE_REG, virtualReg);
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	461a      	mov	r2, r3
 80032ac:	2101      	movs	r1, #1
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ff96 	bl	80031e0 <i2cm_write>


	while (1)
	{
		// Read the slave I²C status to see if our read data is available.
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG);
 80032b4:	2100      	movs	r1, #0
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ff79 	bl	80031ae <i2cm_read>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_RX_VALID)!= 0)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d100      	bne.n	80032ce <as7265x_vreg_read+0x4e>
		status = i2cm_read(hi2c, I2C_AS72XX_SLAVE_STATUS_REG);
 80032cc:	e7f2      	b.n	80032b4 <as7265x_vreg_read+0x34>
		// Read data is ready.
		break;
 80032ce:	bf00      	nop
//		HAL_Delay(5);

	}

	// Read the data to complete the operation.
	d = i2cm_read(hi2c, I2C_AS72XX_SLAVE_READ_REG) ;
 80032d0:	2102      	movs	r1, #2
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ff6b 	bl	80031ae <i2cm_read>
 80032d8:	4603      	mov	r3, r0
 80032da:	73bb      	strb	r3, [r7, #14]
	return d;
 80032dc:	7bbb      	ldrb	r3, [r7, #14]
 80032de:	b2db      	uxtb	r3, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <as7265x_is_data_available>:
 * Test DATA_RDY flag of configuration virtual register (add
 *
 * @return 0 if not set, non-zero if set.
 */
int as7265x_is_data_available (I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	int status = as7265x_vreg_read(hi2c, AS7265X_CONFIG);
 80032f0:	2104      	movs	r1, #4
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ffc4 	bl	8003280 <as7265x_vreg_read>
 80032f8:	4603      	mov	r3, r0
 80032fa:	60fb      	str	r3, [r7, #12]
	return (status & (1<<1) );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 0302 	and.w	r3, r3, #2
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <as7265x_device_select>:
/**
 * Select device
 *
 * @param device 0=master; 1=first slave; 2=second slave
 */
void as7265x_device_select(I2C_HandleTypeDef *hi2c, uint8_t device) {
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	70fb      	strb	r3, [r7, #3]
	as7265x_vreg_write(hi2c, AS7265X_DEV_SELECT_CONTROL, device);
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	461a      	mov	r2, r3
 800331a:	214f      	movs	r1, #79	; 0x4f
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ff78 	bl	8003212 <as7265x_vreg_write>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <as7265x_set_gain>:
 * Set amplifier gain

 * @param gain 0= 1x (default), 1=3.7x, 2=16x, 3=64x
 */
void as7265x_set_gain (I2C_HandleTypeDef *hi2c, int gain) 
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]

	int value = as7265x_vreg_read(hi2c, AS7265X_CONFIG);
 8003334:	2104      	movs	r1, #4
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ffa2 	bl	8003280 <as7265x_vreg_read>
 800333c:	4603      	mov	r3, r0
 800333e:	60fb      	str	r3, [r7, #12]
	value &= 0b11001111; // clear gain bits
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
 8003346:	60fb      	str	r3, [r7, #12]
	value |= (gain&0b11) << 4;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
	as7265x_vreg_write(hi2c, AS7265X_CONFIG,value);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	2104      	movs	r1, #4
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ff57 	bl	8003212 <as7265x_vreg_write>
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <as7265x_set_integration_time>:
 * Set ADC integration time. 
 *
 * @param time from 1..255. 2.8ms units.
 */
void as7265x_set_integration_time(I2C_HandleTypeDef *hi2c, uint8_t time)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
	as7265x_vreg_write(hi2c, AS7265X_INTERGRATION_TIME, time);
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	461a      	mov	r2, r3
 800337c:	2105      	movs	r1, #5
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff47 	bl	8003212 <as7265x_vreg_write>
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <as7265x_indicator_disable>:
	value |= (1<<0);
	as7265x_vreg_write(hi2c, AS7265X_LED_CONFIG, value);
}

void as7265x_indicator_disable (I2C_HandleTypeDef *hi2c) 
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
        as7265x_device_select(hi2c, 0);
 8003394:	2100      	movs	r1, #0
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ffb7 	bl	800330a <as7265x_device_select>
        uint8_t value = as7265x_vreg_read(hi2c, AS7265X_LED_CONFIG);
 800339c:	2107      	movs	r1, #7
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ff6e 	bl	8003280 <as7265x_vreg_read>
 80033a4:	4603      	mov	r3, r0
 80033a6:	73fb      	strb	r3, [r7, #15]
        value &= ~(1<<0);
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
        as7265x_vreg_write(hi2c, AS7265X_LED_CONFIG, value);
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	461a      	mov	r2, r3
 80033b4:	2107      	movs	r1, #7
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff2b 	bl	8003212 <as7265x_vreg_write>
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <as7265x_set_measurement_mode>:
 * Set measurement mode.
 * 
 * @param mode 2 = all 6 channels continuous; 3 = one shot all channels
 */
void as7265x_set_measurement_mode(I2C_HandleTypeDef *hi2c, uint8_t mode) 
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
	uint8_t value = as7265x_vreg_read(hi2c, AS7265X_CONFIG);
 80033d0:	2104      	movs	r1, #4
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ff54 	bl	8003280 <as7265x_vreg_read>
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]
	value &= 0b11110011;
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	f023 030c 	bic.w	r3, r3, #12
 80033e2:	73fb      	strb	r3, [r7, #15]
	value |= (mode&0b11) << 2;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	b25b      	sxtb	r3, r3
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	b25a      	sxtb	r2, r3
 80033f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	b25b      	sxtb	r3, r3
 80033f8:	73fb      	strb	r3, [r7, #15]
	as7265x_vreg_write(hi2c, AS7265X_CONFIG, value);
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	461a      	mov	r2, r3
 80033fe:	2104      	movs	r1, #4
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff06 	bl	8003212 <as7265x_vreg_write>
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <as7265x_get_calibrated_value>:

/**
 * Read calibrated value (IEEE 754 float)
 */
float as7265x_get_calibrated_value (I2C_HandleTypeDef *hi2c, uint8_t device, uint8_t base_addr)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	70fb      	strb	r3, [r7, #3]
 800341a:	4613      	mov	r3, r2
 800341c:	70bb      	strb	r3, [r7, #2]
	int i;
	uint8_t value;
	uint32_t shift_reg = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]

	as7265x_device_select(hi2c, device);
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ff6f 	bl	800330a <as7265x_device_select>

	for (i = base_addr; i < base_addr+4; i++) {
 800342c:	78bb      	ldrb	r3, [r7, #2]
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	e011      	b.n	8003456 <as7265x_get_calibrated_value+0x48>
		shift_reg <<= 8;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	60fb      	str	r3, [r7, #12]
		value = as7265x_vreg_read(hi2c, i);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ff1e 	bl	8003280 <as7265x_vreg_read>
 8003444:	4603      	mov	r3, r0
 8003446:	74fb      	strb	r3, [r7, #19]
		shift_reg |= value;
 8003448:	7cfa      	ldrb	r2, [r7, #19]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
	for (i = base_addr; i < base_addr+4; i++) {
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3301      	adds	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	78bb      	ldrb	r3, [r7, #2]
 8003458:	3304      	adds	r3, #4
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	dbe8      	blt.n	8003432 <as7265x_get_calibrated_value+0x24>
	}
	// convert content of shift_reg to floating point
	float ret;
	memcpy (&ret, &shift_reg, sizeof(float));
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	60bb      	str	r3, [r7, #8]
	return ret;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	ee07 3a90 	vmov	s15, r3
}
 800346a:	eeb0 0a67 	vmov.f32	s0, s15
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <as7265x_get_all_calibrated_values>:
/**
 * Read all 18 channels. Channels AS72651 (vis): channels 0-5, AS72652 (vis+IR): channels 6-11,
 * AS72653 (vis+UV): channels 12-17.
 */
void as7265x_get_all_calibrated_values (I2C_HandleTypeDef *hi2c, as7265x_channels_t *channels)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]

	uint8_t base_addr;
	int channel_index = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
	uint8_t device;
	float v;

	for (device = 0; device < 3; device++) {
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	e01c      	b.n	80034c2 <as7265x_get_all_calibrated_values+0x4e>
		for (base_addr = 0x14; base_addr < 0x2c; base_addr += 4) {	
 8003488:	2314      	movs	r3, #20
 800348a:	75fb      	strb	r3, [r7, #23]
 800348c:	e013      	b.n	80034b6 <as7265x_get_all_calibrated_values+0x42>
			v = as7265x_get_calibrated_value (hi2c, device, base_addr);
 800348e:	7dfa      	ldrb	r2, [r7, #23]
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ffba 	bl	800340e <as7265x_get_calibrated_value>
 800349a:	ed87 0a02 	vstr	s0, [r7, #8]
			channels->channel[channel_index] = v;
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	601a      	str	r2, [r3, #0]
			channel_index++;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3301      	adds	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
		for (base_addr = 0x14; base_addr < 0x2c; base_addr += 4) {	
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	3304      	adds	r3, #4
 80034b4:	75fb      	strb	r3, [r7, #23]
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	2b2b      	cmp	r3, #43	; 0x2b
 80034ba:	d9e8      	bls.n	800348e <as7265x_get_all_calibrated_values+0x1a>
	for (device = 0; device < 3; device++) {
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	3301      	adds	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d9df      	bls.n	8003488 <as7265x_get_all_calibrated_values+0x14>
		}
	}

}
 80034c8:	bf00      	nop
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <as7265x_init>:
static void MX_I2C2_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void as7265x_init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
	as7265x_indicator_disable(&hi2c2);
 80034d4:	4806      	ldr	r0, [pc, #24]	; (80034f0 <as7265x_init+0x20>)
 80034d6:	f7ff ff59 	bl	800338c <as7265x_indicator_disable>
	as7265x_set_gain (&hi2c2, AS7265X_GAIN_16X);
 80034da:	2102      	movs	r1, #2
 80034dc:	4804      	ldr	r0, [pc, #16]	; (80034f0 <as7265x_init+0x20>)
 80034de:	f7ff ff24 	bl	800332a <as7265x_set_gain>
	as7265x_set_integration_time (&hi2c2, 59); //integration_time: 1-255 in 2.8ms units
 80034e2:	213b      	movs	r1, #59	; 0x3b
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <as7265x_init+0x20>)
 80034e6:	f7ff ff41 	bl	800336c <as7265x_set_integration_time>
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000002c 	.word	0x2000002c
 80034f4:	00000000 	.word	0x00000000

080034f8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4ac3      	ldr	r2, [pc, #780]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	f040 8260 	bne.w	80039cc <HAL_TIM_PeriodElapsedCallback+0x4d4>
	    {
		as7265x_set_measurement_mode(&hi2c2, AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT);
 800350c:	2103      	movs	r1, #3
 800350e:	48c2      	ldr	r0, [pc, #776]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003510:	f7ff ff58 	bl	80033c4 <as7265x_set_measurement_mode>
//
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8003514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003518:	48c0      	ldr	r0, [pc, #768]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800351a:	f7fd ff4e 	bl	80013ba <HAL_GPIO_TogglePin>

		while (!as7265x_is_data_available(&hi2c2))
 800351e:	bf00      	nop
 8003520:	48bd      	ldr	r0, [pc, #756]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003522:	f7ff fee1 	bl	80032e8 <as7265x_is_data_available>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f9      	beq.n	8003520 <HAL_TIM_PeriodElapsedCallback+0x28>
		    {

		    }
//
		as7265x_get_all_calibrated_values(&hi2c2, &calibrated_channels);
 800352c:	49bc      	ldr	r1, [pc, #752]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800352e:	48ba      	ldr	r0, [pc, #744]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003530:	f7ff ffa0 	bl	8003474 <as7265x_get_all_calibrated_values>

		calibrated_channel.nm410 = calibrated_channels.channel[12];
 8003534:	4bba      	ldr	r3, [pc, #744]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	4aba      	ldr	r2, [pc, #744]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800353a:	6013      	str	r3, [r2, #0]
		calibrated_channel.nm435 = calibrated_channels.channel[13];
 800353c:	4bb8      	ldr	r3, [pc, #736]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	4ab8      	ldr	r2, [pc, #736]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003542:	6053      	str	r3, [r2, #4]
		calibrated_channel.nm460 = calibrated_channels.channel[14];
 8003544:	4bb6      	ldr	r3, [pc, #728]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	4ab6      	ldr	r2, [pc, #728]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800354a:	6093      	str	r3, [r2, #8]
		calibrated_channel.nm485 = calibrated_channels.channel[15];
 800354c:	4bb4      	ldr	r3, [pc, #720]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	4ab4      	ldr	r2, [pc, #720]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003552:	60d3      	str	r3, [r2, #12]
		calibrated_channel.nm510 = calibrated_channels.channel[16];
 8003554:	4bb2      	ldr	r3, [pc, #712]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	4ab2      	ldr	r2, [pc, #712]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800355a:	6113      	str	r3, [r2, #16]
		calibrated_channel.nm535 = calibrated_channels.channel[17];
 800355c:	4bb0      	ldr	r3, [pc, #704]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	4ab0      	ldr	r2, [pc, #704]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003562:	6153      	str	r3, [r2, #20]

		calibrated_channel.nm560 = calibrated_channels.channel[6];
 8003564:	4bae      	ldr	r3, [pc, #696]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	4aae      	ldr	r2, [pc, #696]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800356a:	6193      	str	r3, [r2, #24]
		calibrated_channel.nm585 = calibrated_channels.channel[7];
 800356c:	4bac      	ldr	r3, [pc, #688]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	4aac      	ldr	r2, [pc, #688]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003572:	61d3      	str	r3, [r2, #28]
		calibrated_channel.nm610 = calibrated_channels.channel[0];
 8003574:	4baa      	ldr	r3, [pc, #680]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4aaa      	ldr	r2, [pc, #680]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800357a:	6213      	str	r3, [r2, #32]
		calibrated_channel.nm645 = calibrated_channels.channel[8];
 800357c:	4ba8      	ldr	r3, [pc, #672]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4aa8      	ldr	r2, [pc, #672]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003582:	6253      	str	r3, [r2, #36]	; 0x24
		calibrated_channel.nm680 = calibrated_channels.channel[1];
 8003584:	4ba6      	ldr	r3, [pc, #664]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4aa6      	ldr	r2, [pc, #664]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800358a:	6293      	str	r3, [r2, #40]	; 0x28
		calibrated_channel.nm705 = calibrated_channels.channel[9];
 800358c:	4ba4      	ldr	r3, [pc, #656]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	4aa4      	ldr	r2, [pc, #656]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003592:	62d3      	str	r3, [r2, #44]	; 0x2c

		calibrated_channel.nm730 = calibrated_channels.channel[2];
 8003594:	4ba2      	ldr	r3, [pc, #648]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4aa2      	ldr	r2, [pc, #648]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800359a:	6313      	str	r3, [r2, #48]	; 0x30
		calibrated_channel.nm760 = calibrated_channels.channel[3];
 800359c:	4ba0      	ldr	r3, [pc, #640]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4aa0      	ldr	r2, [pc, #640]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035a2:	6353      	str	r3, [r2, #52]	; 0x34
		calibrated_channel.nm810 = calibrated_channels.channel[4];
 80035a4:	4b9e      	ldr	r3, [pc, #632]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4a9e      	ldr	r2, [pc, #632]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035aa:	6393      	str	r3, [r2, #56]	; 0x38
		calibrated_channel.nm860 = calibrated_channels.channel[5];
 80035ac:	4b9c      	ldr	r3, [pc, #624]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	4a9c      	ldr	r2, [pc, #624]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035b2:	63d3      	str	r3, [r2, #60]	; 0x3c
		calibrated_channel.nm900 = calibrated_channels.channel[10];
 80035b4:	4b9a      	ldr	r3, [pc, #616]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	4a9a      	ldr	r2, [pc, #616]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035ba:	6413      	str	r3, [r2, #64]	; 0x40
		calibrated_channel.nm940 = calibrated_channels.channel[11];
 80035bc:	4b98      	ldr	r3, [pc, #608]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	4a98      	ldr	r2, [pc, #608]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035c2:	6453      	str	r3, [r2, #68]	; 0x44

		calibrated_channel.intensity = ((calibrated_channel.nm410 + calibrated_channel.nm435)*12.5) + ((calibrated_channel.nm435 + calibrated_channel.nm460)*12.5) +
 80035c4:	4b97      	ldr	r3, [pc, #604]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035c6:	ed93 7a00 	vldr	s14, [r3]
 80035ca:	4b96      	ldr	r3, [pc, #600]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80035d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d4:	ee17 0a90 	vmov	r0, s15
 80035d8:	f7fc ff6e 	bl	80004b8 <__aeabi_f2d>
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	4b91      	ldr	r3, [pc, #580]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80035e2:	f7fc ffc1 	bl	8000568 <__aeabi_dmul>
 80035e6:	4603      	mov	r3, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	4625      	mov	r5, r4
 80035ec:	461c      	mov	r4, r3
 80035ee:	4b8d      	ldr	r3, [pc, #564]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80035f4:	4b8b      	ldr	r3, [pc, #556]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80035fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fe:	ee17 0a90 	vmov	r0, s15
 8003602:	f7fc ff59 	bl	80004b8 <__aeabi_f2d>
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	4b87      	ldr	r3, [pc, #540]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800360c:	f7fc ffac 	bl	8000568 <__aeabi_dmul>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4620      	mov	r0, r4
 8003616:	4629      	mov	r1, r5
 8003618:	f7fc fdf0 	bl	80001fc <__adddf3>
 800361c:	4603      	mov	r3, r0
 800361e:	460c      	mov	r4, r1
 8003620:	4625      	mov	r5, r4
 8003622:	461c      	mov	r4, r3
			((calibrated_channel.nm460 + calibrated_channel.nm485)*12.5) + ((calibrated_channel.nm485 + calibrated_channel.nm510)*12.5) +
 8003624:	4b7f      	ldr	r3, [pc, #508]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003626:	ed93 7a02 	vldr	s14, [r3, #8]
 800362a:	4b7e      	ldr	r3, [pc, #504]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800362c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003634:	ee17 0a90 	vmov	r0, s15
 8003638:	f7fc ff3e 	bl	80004b8 <__aeabi_f2d>
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	4b79      	ldr	r3, [pc, #484]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003642:	f7fc ff91 	bl	8000568 <__aeabi_dmul>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
		calibrated_channel.intensity = ((calibrated_channel.nm410 + calibrated_channel.nm435)*12.5) + ((calibrated_channel.nm435 + calibrated_channel.nm460)*12.5) +
 800364a:	4620      	mov	r0, r4
 800364c:	4629      	mov	r1, r5
 800364e:	f7fc fdd5 	bl	80001fc <__adddf3>
 8003652:	4603      	mov	r3, r0
 8003654:	460c      	mov	r4, r1
 8003656:	4625      	mov	r5, r4
 8003658:	461c      	mov	r4, r3
			((calibrated_channel.nm460 + calibrated_channel.nm485)*12.5) + ((calibrated_channel.nm485 + calibrated_channel.nm510)*12.5) +
 800365a:	4b72      	ldr	r3, [pc, #456]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800365c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003660:	4b70      	ldr	r3, [pc, #448]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003662:	edd3 7a04 	vldr	s15, [r3, #16]
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366a:	ee17 0a90 	vmov	r0, s15
 800366e:	f7fc ff23 	bl	80004b8 <__aeabi_f2d>
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	4b6c      	ldr	r3, [pc, #432]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003678:	f7fc ff76 	bl	8000568 <__aeabi_dmul>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4620      	mov	r0, r4
 8003682:	4629      	mov	r1, r5
 8003684:	f7fc fdba 	bl	80001fc <__adddf3>
 8003688:	4603      	mov	r3, r0
 800368a:	460c      	mov	r4, r1
 800368c:	4625      	mov	r5, r4
 800368e:	461c      	mov	r4, r3
			((calibrated_channel.nm510 + calibrated_channel.nm535)*12.5) + ((calibrated_channel.nm535 + calibrated_channel.nm560)*12.5) +
 8003690:	4b64      	ldr	r3, [pc, #400]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003692:	ed93 7a04 	vldr	s14, [r3, #16]
 8003696:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003698:	edd3 7a05 	vldr	s15, [r3, #20]
 800369c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a0:	ee17 0a90 	vmov	r0, s15
 80036a4:	f7fc ff08 	bl	80004b8 <__aeabi_f2d>
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	4b5e      	ldr	r3, [pc, #376]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80036ae:	f7fc ff5b 	bl	8000568 <__aeabi_dmul>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
			((calibrated_channel.nm460 + calibrated_channel.nm485)*12.5) + ((calibrated_channel.nm485 + calibrated_channel.nm510)*12.5) +
 80036b6:	4620      	mov	r0, r4
 80036b8:	4629      	mov	r1, r5
 80036ba:	f7fc fd9f 	bl	80001fc <__adddf3>
 80036be:	4603      	mov	r3, r0
 80036c0:	460c      	mov	r4, r1
 80036c2:	4625      	mov	r5, r4
 80036c4:	461c      	mov	r4, r3
			((calibrated_channel.nm510 + calibrated_channel.nm535)*12.5) + ((calibrated_channel.nm535 + calibrated_channel.nm560)*12.5) +
 80036c6:	4b57      	ldr	r3, [pc, #348]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80036c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80036cc:	4b55      	ldr	r3, [pc, #340]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80036ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	ee17 0a90 	vmov	r0, s15
 80036da:	f7fc feed 	bl	80004b8 <__aeabi_f2d>
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	4b51      	ldr	r3, [pc, #324]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80036e4:	f7fc ff40 	bl	8000568 <__aeabi_dmul>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4620      	mov	r0, r4
 80036ee:	4629      	mov	r1, r5
 80036f0:	f7fc fd84 	bl	80001fc <__adddf3>
 80036f4:	4603      	mov	r3, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	4625      	mov	r5, r4
 80036fa:	461c      	mov	r4, r3
			((calibrated_channel.nm560 + calibrated_channel.nm585)*12.5) + ((calibrated_channel.nm585 + calibrated_channel.nm610)*12.5) +
 80036fc:	4b49      	ldr	r3, [pc, #292]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80036fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8003702:	4b48      	ldr	r3, [pc, #288]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003704:	edd3 7a07 	vldr	s15, [r3, #28]
 8003708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370c:	ee17 0a90 	vmov	r0, s15
 8003710:	f7fc fed2 	bl	80004b8 <__aeabi_f2d>
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800371a:	f7fc ff25 	bl	8000568 <__aeabi_dmul>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
			((calibrated_channel.nm510 + calibrated_channel.nm535)*12.5) + ((calibrated_channel.nm535 + calibrated_channel.nm560)*12.5) +
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	f7fc fd69 	bl	80001fc <__adddf3>
 800372a:	4603      	mov	r3, r0
 800372c:	460c      	mov	r4, r1
 800372e:	4625      	mov	r5, r4
 8003730:	461c      	mov	r4, r3
			((calibrated_channel.nm560 + calibrated_channel.nm585)*12.5) + ((calibrated_channel.nm585 + calibrated_channel.nm610)*12.5) +
 8003732:	4b3c      	ldr	r3, [pc, #240]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003734:	ed93 7a07 	vldr	s14, [r3, #28]
 8003738:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800373a:	edd3 7a08 	vldr	s15, [r3, #32]
 800373e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003742:	ee17 0a90 	vmov	r0, s15
 8003746:	f7fc feb7 	bl	80004b8 <__aeabi_f2d>
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	4b36      	ldr	r3, [pc, #216]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003750:	f7fc ff0a 	bl	8000568 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4620      	mov	r0, r4
 800375a:	4629      	mov	r1, r5
 800375c:	f7fc fd4e 	bl	80001fc <__adddf3>
 8003760:	4603      	mov	r3, r0
 8003762:	460c      	mov	r4, r1
 8003764:	4625      	mov	r5, r4
 8003766:	461c      	mov	r4, r3
			((calibrated_channel.nm610 + calibrated_channel.nm645)*12.5) + ((calibrated_channel.nm645 + calibrated_channel.nm680)*12.5) +
 8003768:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800376a:	ed93 7a08 	vldr	s14, [r3, #32]
 800376e:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003770:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003778:	ee17 0a90 	vmov	r0, s15
 800377c:	f7fc fe9c 	bl	80004b8 <__aeabi_f2d>
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	4b28      	ldr	r3, [pc, #160]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003786:	f7fc feef 	bl	8000568 <__aeabi_dmul>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
			((calibrated_channel.nm560 + calibrated_channel.nm585)*12.5) + ((calibrated_channel.nm585 + calibrated_channel.nm610)*12.5) +
 800378e:	4620      	mov	r0, r4
 8003790:	4629      	mov	r1, r5
 8003792:	f7fc fd33 	bl	80001fc <__adddf3>
 8003796:	4603      	mov	r3, r0
 8003798:	460c      	mov	r4, r1
 800379a:	4625      	mov	r5, r4
 800379c:	461c      	mov	r4, r3
			((calibrated_channel.nm610 + calibrated_channel.nm645)*12.5) + ((calibrated_channel.nm645 + calibrated_channel.nm680)*12.5) +
 800379e:	4b21      	ldr	r3, [pc, #132]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80037a0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80037a4:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80037a6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80037aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ae:	ee17 0a90 	vmov	r0, s15
 80037b2:	f7fc fe81 	bl	80004b8 <__aeabi_f2d>
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80037bc:	f7fc fed4 	bl	8000568 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4620      	mov	r0, r4
 80037c6:	4629      	mov	r1, r5
 80037c8:	f7fc fd18 	bl	80001fc <__adddf3>
 80037cc:	4603      	mov	r3, r0
 80037ce:	460c      	mov	r4, r1
 80037d0:	4625      	mov	r5, r4
 80037d2:	461c      	mov	r4, r3
			((calibrated_channel.nm680 + calibrated_channel.nm705)*12.5) + ((calibrated_channel.nm705 + calibrated_channel.nm730)*12.5) +
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80037d6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80037dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80037e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e4:	ee17 0a90 	vmov	r0, s15
 80037e8:	f7fc fe66 	bl	80004b8 <__aeabi_f2d>
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80037f2:	f7fc feb9 	bl	8000568 <__aeabi_dmul>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
			((calibrated_channel.nm610 + calibrated_channel.nm645)*12.5) + ((calibrated_channel.nm645 + calibrated_channel.nm680)*12.5) +
 80037fa:	4620      	mov	r0, r4
 80037fc:	4629      	mov	r1, r5
 80037fe:	f7fc fcfd 	bl	80001fc <__adddf3>
 8003802:	4603      	mov	r3, r0
 8003804:	460c      	mov	r4, r1
 8003806:	4625      	mov	r5, r4
 8003808:	461c      	mov	r4, r3
			((calibrated_channel.nm680 + calibrated_channel.nm705)*12.5) + ((calibrated_channel.nm705 + calibrated_channel.nm730)*12.5) +
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800380c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003810:	e00c      	b.n	800382c <HAL_TIM_PeriodElapsedCallback+0x334>
 8003812:	bf00      	nop
 8003814:	40001400 	.word	0x40001400
 8003818:	2000002c 	.word	0x2000002c
 800381c:	40021800 	.word	0x40021800
 8003820:	200000c8 	.word	0x200000c8
 8003824:	20000138 	.word	0x20000138
 8003828:	40290000 	.word	0x40290000
 800382c:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800382e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003836:	ee17 0a90 	vmov	r0, s15
 800383a:	f7fc fe3d 	bl	80004b8 <__aeabi_f2d>
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	4b68      	ldr	r3, [pc, #416]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8003844:	f7fc fe90 	bl	8000568 <__aeabi_dmul>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4620      	mov	r0, r4
 800384e:	4629      	mov	r1, r5
 8003850:	f7fc fcd4 	bl	80001fc <__adddf3>
 8003854:	4603      	mov	r3, r0
 8003856:	460c      	mov	r4, r1
 8003858:	4625      	mov	r5, r4
 800385a:	461c      	mov	r4, r3
			((calibrated_channel.nm730 + calibrated_channel.nm760)*12.5) + ((calibrated_channel.nm760 + calibrated_channel.nm810)*12.5) +
 800385c:	4b60      	ldr	r3, [pc, #384]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800385e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003862:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003864:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386c:	ee17 0a90 	vmov	r0, s15
 8003870:	f7fc fe22 	bl	80004b8 <__aeabi_f2d>
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	4b5a      	ldr	r3, [pc, #360]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800387a:	f7fc fe75 	bl	8000568 <__aeabi_dmul>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
			((calibrated_channel.nm680 + calibrated_channel.nm705)*12.5) + ((calibrated_channel.nm705 + calibrated_channel.nm730)*12.5) +
 8003882:	4620      	mov	r0, r4
 8003884:	4629      	mov	r1, r5
 8003886:	f7fc fcb9 	bl	80001fc <__adddf3>
 800388a:	4603      	mov	r3, r0
 800388c:	460c      	mov	r4, r1
 800388e:	4625      	mov	r5, r4
 8003890:	461c      	mov	r4, r3
			((calibrated_channel.nm730 + calibrated_channel.nm760)*12.5) + ((calibrated_channel.nm760 + calibrated_channel.nm810)*12.5) +
 8003892:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003894:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003898:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800389a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800389e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a2:	ee17 0a90 	vmov	r0, s15
 80038a6:	f7fc fe07 	bl	80004b8 <__aeabi_f2d>
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	4b4d      	ldr	r3, [pc, #308]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80038b0:	f7fc fe5a 	bl	8000568 <__aeabi_dmul>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4620      	mov	r0, r4
 80038ba:	4629      	mov	r1, r5
 80038bc:	f7fc fc9e 	bl	80001fc <__adddf3>
 80038c0:	4603      	mov	r3, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	4625      	mov	r5, r4
 80038c6:	461c      	mov	r4, r3
			((calibrated_channel.nm810 + calibrated_channel.nm860)*12.5) + ((calibrated_channel.nm860 + calibrated_channel.nm900)*12.5) +
 80038c8:	4b45      	ldr	r3, [pc, #276]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80038ca:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80038ce:	4b44      	ldr	r3, [pc, #272]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80038d0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80038d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d8:	ee17 0a90 	vmov	r0, s15
 80038dc:	f7fc fdec 	bl	80004b8 <__aeabi_f2d>
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80038e6:	f7fc fe3f 	bl	8000568 <__aeabi_dmul>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
			((calibrated_channel.nm730 + calibrated_channel.nm760)*12.5) + ((calibrated_channel.nm760 + calibrated_channel.nm810)*12.5) +
 80038ee:	4620      	mov	r0, r4
 80038f0:	4629      	mov	r1, r5
 80038f2:	f7fc fc83 	bl	80001fc <__adddf3>
 80038f6:	4603      	mov	r3, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	4625      	mov	r5, r4
 80038fc:	461c      	mov	r4, r3
			((calibrated_channel.nm810 + calibrated_channel.nm860)*12.5) + ((calibrated_channel.nm860 + calibrated_channel.nm900)*12.5) +
 80038fe:	4b38      	ldr	r3, [pc, #224]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003900:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8003904:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003906:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800390a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390e:	ee17 0a90 	vmov	r0, s15
 8003912:	f7fc fdd1 	bl	80004b8 <__aeabi_f2d>
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800391c:	f7fc fe24 	bl	8000568 <__aeabi_dmul>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4620      	mov	r0, r4
 8003926:	4629      	mov	r1, r5
 8003928:	f7fc fc68 	bl	80001fc <__adddf3>
 800392c:	4603      	mov	r3, r0
 800392e:	460c      	mov	r4, r1
 8003930:	4625      	mov	r5, r4
 8003932:	461c      	mov	r4, r3
			((calibrated_channel.nm900 + calibrated_channel.nm940)*12.5);
 8003934:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003936:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800393c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003944:	ee17 0a90 	vmov	r0, s15
 8003948:	f7fc fdb6 	bl	80004b8 <__aeabi_f2d>
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8003952:	f7fc fe09 	bl	8000568 <__aeabi_dmul>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
			((calibrated_channel.nm810 + calibrated_channel.nm860)*12.5) + ((calibrated_channel.nm860 + calibrated_channel.nm900)*12.5) +
 800395a:	4620      	mov	r0, r4
 800395c:	4629      	mov	r1, r5
 800395e:	f7fc fc4d 	bl	80001fc <__adddf3>
 8003962:	4603      	mov	r3, r0
 8003964:	460c      	mov	r4, r1
 8003966:	4618      	mov	r0, r3
 8003968:	4621      	mov	r1, r4
 800396a:	f7fd f80f 	bl	800098c <__aeabi_d2f>
 800396e:	4602      	mov	r2, r0
		calibrated_channel.intensity = ((calibrated_channel.nm410 + calibrated_channel.nm435)*12.5) + ((calibrated_channel.nm435 + calibrated_channel.nm460)*12.5) +
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003972:	649a      	str	r2, [r3, #72]	; 0x48

		calibrated_channel.intensity /= GAIN;
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003976:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800397a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800397e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003984:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		calibrated_channel.intensity /=SURFACE_DIFFUSER;
 8003988:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	4618      	mov	r0, r3
 800398e:	f7fc fd93 	bl	80004b8 <__aeabi_f2d>
 8003992:	a311      	add	r3, pc, #68	; (adr r3, 80039d8 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f7fc ff10 	bl	80007bc <__aeabi_ddiv>
 800399c:	4603      	mov	r3, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	4618      	mov	r0, r3
 80039a2:	4621      	mov	r1, r4
 80039a4:	f7fc fff2 	bl	800098c <__aeabi_d2f>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80039ac:	649a      	str	r2, [r3, #72]	; 0x48

		calibrated_channel.intensity_per_bw = calibrated_channel.intensity / lambda_50nm;
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80039b0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80039b4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80039e8 <HAL_TIM_PeriodElapsedCallback+0x4f0>
 80039b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80039be:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

//		as7265x_order_calibrated_channels(&hi2c2, &calibrated_channels);
//
//		as7265x_get_all_raw_values(&hi2c2, &raw_channels);
//
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80039c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039c6:	4809      	ldr	r0, [pc, #36]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80039c8:	f7fd fcf7 	bl	80013ba <HAL_GPIO_TogglePin>
	    }
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bdb0      	pop	{r4, r5, r7, pc}
 80039d4:	f3af 8000 	nop.w
 80039d8:	f5c28f5c 	.word	0xf5c28f5c
 80039dc:	40185c28 	.word	0x40185c28
 80039e0:	20000138 	.word	0x20000138
 80039e4:	40290000 	.word	0x40290000
 80039e8:	42480000 	.word	0x42480000
 80039ec:	40021800 	.word	0x40021800

080039f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039f4:	f7fd f99a 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039f8:	f000 f80e 	bl	8003a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039fc:	f000 f8f2 	bl	8003be4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8003a00:	f000 f87a 	bl	8003af8 <MX_I2C2_Init>
  MX_TIM7_Init();
 8003a04:	f000 f8b8 	bl	8003b78 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  as7265x_init();
 8003a08:	f7ff fd62 	bl	80034d0 <as7265x_init>

  HAL_TIM_Base_Start_IT(&htim7);
 8003a0c:	4801      	ldr	r0, [pc, #4]	; (8003a14 <main+0x24>)
 8003a0e:	f7ff f980 	bl	8002d12 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a12:	e7fe      	b.n	8003a12 <main+0x22>
 8003a14:	20000188 	.word	0x20000188

08003a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b094      	sub	sp, #80	; 0x50
 8003a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a1e:	f107 0320 	add.w	r3, r7, #32
 8003a22:	2230      	movs	r2, #48	; 0x30
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fa8a 	bl	8003f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a2c:	f107 030c 	add.w	r3, r7, #12
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <SystemClock_Config+0xd8>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <SystemClock_Config+0xd8>)
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4c:	4b28      	ldr	r3, [pc, #160]	; (8003af0 <SystemClock_Config+0xd8>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <SystemClock_Config+0xdc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <SystemClock_Config+0xdc>)
 8003a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <SystemClock_Config+0xdc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a74:	2302      	movs	r3, #2
 8003a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a80:	2302      	movs	r3, #2
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a84:	2300      	movs	r3, #0
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a88:	2308      	movs	r3, #8
 8003a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003a8c:	23b4      	movs	r3, #180	; 0xb4
 8003a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a90:	2302      	movs	r3, #2
 8003a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a94:	2304      	movs	r3, #4
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a98:	f107 0320 	add.w	r3, r7, #32
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fcf1 	bl	8002484 <HAL_RCC_OscConfig>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003aa8:	f000 f8ee 	bl	8003c88 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003aac:	f7fe fc9a 	bl	80023e4 <HAL_PWREx_EnableOverDrive>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003ab6:	f000 f8e7 	bl	8003c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aba:	230f      	movs	r3, #15
 8003abc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ac6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003aca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ad0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	2105      	movs	r1, #5
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe ff15 	bl	8002908 <HAL_RCC_ClockConfig>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003ae4:	f000 f8d0 	bl	8003c88 <Error_Handler>
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3750      	adds	r7, #80	; 0x50
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40007000 	.word	0x40007000

08003af8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <MX_I2C2_Init+0x78>)
 8003b00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003b02:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b04:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <MX_I2C2_Init+0x7c>)
 8003b06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003b0e:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b14:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b1c:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b28:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b34:	480d      	ldr	r0, [pc, #52]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b36:	f7fd fc5b 	bl	80013f0 <HAL_I2C_Init>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003b40:	f000 f8a2 	bl	8003c88 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b44:	2100      	movs	r1, #0
 8003b46:	4809      	ldr	r0, [pc, #36]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b48:	f7fe fbd1 	bl	80022ee <HAL_I2CEx_ConfigAnalogFilter>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8003b52:	f000 f899 	bl	8003c88 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003b56:	2100      	movs	r1, #0
 8003b58:	4804      	ldr	r0, [pc, #16]	; (8003b6c <MX_I2C2_Init+0x74>)
 8003b5a:	f7fe fc04 	bl	8002366 <HAL_I2CEx_ConfigDigitalFilter>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003b64:	f000 f890 	bl	8003c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	2000002c 	.word	0x2000002c
 8003b70:	40005800 	.word	0x40005800
 8003b74:	000186a0 	.word	0x000186a0

08003b78 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b7e:	463b      	mov	r3, r7
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <MX_TIM7_Init+0x64>)
 8003b88:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <MX_TIM7_Init+0x68>)
 8003b8a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 299;
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <MX_TIM7_Init+0x64>)
 8003b8e:	f240 122b 	movw	r2, #299	; 0x12b
 8003b92:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <MX_TIM7_Init+0x64>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000;
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <MX_TIM7_Init+0x64>)
 8003b9c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003ba0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <MX_TIM7_Init+0x64>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003ba8:	480c      	ldr	r0, [pc, #48]	; (8003bdc <MX_TIM7_Init+0x64>)
 8003baa:	f7ff f887 	bl	8002cbc <HAL_TIM_Base_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003bb4:	f000 f868 	bl	8003c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003bc0:	463b      	mov	r3, r7
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4805      	ldr	r0, [pc, #20]	; (8003bdc <MX_TIM7_Init+0x64>)
 8003bc6:	f7ff fa99 	bl	80030fc <HAL_TIMEx_MasterConfigSynchronization>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003bd0:	f000 f85a 	bl	8003c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000188 	.word	0x20000188
 8003be0:	40001400 	.word	0x40001400

08003be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bea:	f107 030c 	add.w	r3, r7, #12
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
 8003bf6:	60da      	str	r2, [r3, #12]
 8003bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <MX_GPIO_Init+0x9c>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <MX_GPIO_Init+0x9c>)
 8003c04:	f043 0320 	orr.w	r3, r3, #32
 8003c08:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <MX_GPIO_Init+0x9c>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <MX_GPIO_Init+0x9c>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <MX_GPIO_Init+0x9c>)
 8003c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c24:	6313      	str	r3, [r2, #48]	; 0x30
 8003c26:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <MX_GPIO_Init+0x9c>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <MX_GPIO_Init+0x9c>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	4a11      	ldr	r2, [pc, #68]	; (8003c80 <MX_GPIO_Init+0x9c>)
 8003c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c40:	6313      	str	r3, [r2, #48]	; 0x30
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <MX_GPIO_Init+0x9c>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003c54:	480b      	ldr	r0, [pc, #44]	; (8003c84 <MX_GPIO_Init+0xa0>)
 8003c56:	f7fd fb97 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003c5a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c60:	2301      	movs	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c6c:	f107 030c 	add.w	r3, r7, #12
 8003c70:	4619      	mov	r1, r3
 8003c72:	4804      	ldr	r0, [pc, #16]	; (8003c84 <MX_GPIO_Init+0xa0>)
 8003c74:	f7fd f9de 	bl	8001034 <HAL_GPIO_Init>

}
 8003c78:	bf00      	nop
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40021800 	.word	0x40021800

08003c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cac:	6453      	str	r3, [r2, #68]	; 0x44
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <HAL_I2C_MspInit+0x84>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d12b      	bne.n	8003d62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d14:	f043 0320 	orr.w	r3, r3, #32
 8003d18:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d26:	2303      	movs	r3, #3
 8003d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d2a:	2312      	movs	r3, #18
 8003d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d32:	2303      	movs	r3, #3
 8003d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d36:	2304      	movs	r3, #4
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	4619      	mov	r1, r3
 8003d40:	480c      	ldr	r0, [pc, #48]	; (8003d74 <HAL_I2C_MspInit+0x8c>)
 8003d42:	f7fd f977 	bl	8001034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003d62:	bf00      	nop
 8003d64:	3728      	adds	r7, #40	; 0x28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40005800 	.word	0x40005800
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40021400 	.word	0x40021400

08003d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <HAL_TIM_Base_MspInit+0x48>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d115      	bne.n	8003db6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <HAL_TIM_Base_MspInit+0x4c>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <HAL_TIM_Base_MspInit+0x4c>)
 8003d94:	f043 0320 	orr.w	r3, r3, #32
 8003d98:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <HAL_TIM_Base_MspInit+0x4c>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2100      	movs	r1, #0
 8003daa:	2037      	movs	r0, #55	; 0x37
 8003dac:	f7fd f90b 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003db0:	2037      	movs	r0, #55	; 0x37
 8003db2:	f7fd f924 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40001400 	.word	0x40001400
 8003dc4:	40023800 	.word	0x40023800

08003dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dda:	e7fe      	b.n	8003dda <HardFault_Handler+0x4>

08003ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003de0:	e7fe      	b.n	8003de0 <MemManage_Handler+0x4>

08003de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003de6:	e7fe      	b.n	8003de6 <BusFault_Handler+0x4>

08003de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dec:	e7fe      	b.n	8003dec <UsageFault_Handler+0x4>

08003dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e1c:	f7fc ffd8 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <TIM7_IRQHandler+0x10>)
 8003e2a:	f7fe ff96 	bl	8002d5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000188 	.word	0x20000188

08003e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e3c:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <SystemInit+0x60>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <SystemInit+0x60>)
 8003e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <SystemInit+0x64>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <SystemInit+0x64>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <SystemInit+0x64>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <SystemInit+0x64>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a0e      	ldr	r2, [pc, #56]	; (8003e9c <SystemInit+0x64>)
 8003e64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <SystemInit+0x64>)
 8003e70:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <SystemInit+0x68>)
 8003e72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <SystemInit+0x64>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <SystemInit+0x64>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <SystemInit+0x64>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e86:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <SystemInit+0x60>)
 8003e88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e8c:	609a      	str	r2, [r3, #8]
#endif
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000ed00 	.word	0xe000ed00
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	24003010 	.word	0x24003010

08003ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003edc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ea8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003eaa:	e003      	b.n	8003eb4 <LoopCopyDataInit>

08003eac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003eae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003eb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003eb2:	3104      	adds	r1, #4

08003eb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003eb4:	480b      	ldr	r0, [pc, #44]	; (8003ee4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003eb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003eba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ebc:	d3f6      	bcc.n	8003eac <CopyDataInit>
  ldr  r2, =_sbss
 8003ebe:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ec0:	e002      	b.n	8003ec8 <LoopFillZerobss>

08003ec2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ec2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ec4:	f842 3b04 	str.w	r3, [r2], #4

08003ec8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003eca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ecc:	d3f9      	bcc.n	8003ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ece:	f7ff ffb3 	bl	8003e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ed2:	f000 f811 	bl	8003ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ed6:	f7ff fd8b 	bl	80039f0 <main>
  bx  lr    
 8003eda:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003edc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003ee0:	08003f90 	.word	0x08003f90
  ldr  r0, =_sdata
 8003ee4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ee8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003eec:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003ef0:	20000210 	.word	0x20000210

08003ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ef4:	e7fe      	b.n	8003ef4 <ADC_IRQHandler>
	...

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4e0d      	ldr	r6, [pc, #52]	; (8003f30 <__libc_init_array+0x38>)
 8003efc:	4c0d      	ldr	r4, [pc, #52]	; (8003f34 <__libc_init_array+0x3c>)
 8003efe:	1ba4      	subs	r4, r4, r6
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	2500      	movs	r5, #0
 8003f04:	42a5      	cmp	r5, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	4e0b      	ldr	r6, [pc, #44]	; (8003f38 <__libc_init_array+0x40>)
 8003f0a:	4c0c      	ldr	r4, [pc, #48]	; (8003f3c <__libc_init_array+0x44>)
 8003f0c:	f000 f820 	bl	8003f50 <_init>
 8003f10:	1ba4      	subs	r4, r4, r6
 8003f12:	10a4      	asrs	r4, r4, #2
 8003f14:	2500      	movs	r5, #0
 8003f16:	42a5      	cmp	r5, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f20:	4798      	blx	r3
 8003f22:	3501      	adds	r5, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f2a:	4798      	blx	r3
 8003f2c:	3501      	adds	r5, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	08003f88 	.word	0x08003f88
 8003f34:	08003f88 	.word	0x08003f88
 8003f38:	08003f88 	.word	0x08003f88
 8003f3c:	08003f8c 	.word	0x08003f8c

08003f40 <memset>:
 8003f40:	4402      	add	r2, r0
 8003f42:	4603      	mov	r3, r0
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d100      	bne.n	8003f4a <memset+0xa>
 8003f48:	4770      	bx	lr
 8003f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4e:	e7f9      	b.n	8003f44 <memset+0x4>

08003f50 <_init>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr

08003f5c <_fini>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	bf00      	nop
 8003f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f62:	bc08      	pop	{r3}
 8003f64:	469e      	mov	lr, r3
 8003f66:	4770      	bx	lr
